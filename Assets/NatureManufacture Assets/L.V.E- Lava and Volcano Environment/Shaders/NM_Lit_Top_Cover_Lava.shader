Shader "NatureManufacture/HDRP/Lit/Lava/Lava Top Cover"
{
    Properties
    {
        _BaseColor("Base Color", Color) = (1, 1, 1, 0)
        [NoScaleOffset]_BaseColorMap("Base Map(RGB) Sm(A)", 2D) = "white" {}
        [ToggleUI]_BaseUsePlanarUV("Base Use Planar UV", Float) = 0
        _BaseTilingOffset("Base Tiling and Offset", Vector) = (1, 1, 0, 0)
        [NoScaleOffset]_BaseNormalMap("Base Normal Map", 2D) = "white" {}
        _BaseNormalScale("Base Normal Scale", Range(0, 8)) = 1
        [NoScaleOffset]_BaseMaskMap("Base Mask Map MT(R) AO(G) H(B) E(A)", 2D) = "white" {}
        _BaseMetallic("Base Metallic", Range(0, 1)) = 1
        _BaseAORemapMin("Base AO Remap Min", Range(0, 1)) = 0
        _BaseAORemapMax("Base AO Remap Max", Range(0, 1)) = 1
        _BaseSmoothnessRemapMin("Base Smoothness Remap Min", Range(0, 1)) = 0
        _BaseSmoothnessRemapMax("Base Smoothness Remap Max", Range(0, 1)) = 1
        [NoScaleOffset]_CoverMaskA("Cover Mask (A)", 2D) = "white" {}
        _CoverMaskPower("Cover Mask Power", Range(0, 10)) = 1
        _Cover_Amount("Cover Amount", Range(0, 2)) = 2
        _Cover_Amount_Grow_Speed("Cover Amount Grow Speed", Range(0, 3)) = 3
        _Cover_Max_Angle("Cover Max Angle", Range(0.001, 90)) = 35
        _Cover_Min_Height("Cover Min Height", Float) = -10000
        _Cover_Min_Height_Blending("Cover Min Height Blending", Range(0, 500)) = 1
        _CoverBaseColor("Cover Base Color", Color) = (1, 1, 1, 0)
        [NoScaleOffset]_CoverBaseColorMap("Cover Base Map(RGB) Sm(A)", 2D) = "white" {}
        [ToggleUI]_CoverUsePlanarUV("Cover Use Planar UV", Float) = 1
        _CoverTilingOffset("Cover Tiling Offset", Vector) = (1, 1, 0, 0)
        [NoScaleOffset]_CoverNormalMap("Cover Normal Map", 2D) = "white" {}
        _CoverNormalScale("Cover Normal Scale", Range(0, 8)) = 1
        _CoverNormalBlendHardness("Cover Normal Blend Hardness", Range(0, 8)) = 1
        _CoverHardness("Cover Hardness", Range(0, 10)) = 5
        _CoverHeightMapMin("Cover Height Map Min", Float) = 0
        _CoverHeightMapMax("Cover Height Map Max", Float) = 1
        _CoverHeightMapOffset("Cover Height Map Offset", Float) = 0
        [NoScaleOffset]_CoverMaskMap("Cover Mask Map MT(R) AO(G) H(B) E(A)", 2D) = "white" {}
        _CoverMetallic("Cover Metallic", Range(0, 1)) = 1
        _CoverAORemapMin("Cover AO Remap Min", Range(0, 1)) = 0
        _CoverAORemapMax("Cover AO Remap Max", Range(0, 1)) = 1
        _CoverSmoothnessRemapMin("Cover Smoothness Remap Min", Range(0, 1)) = 0
        _CoverSmoothnessRemapMax("Cover Smoothness Remap Max", Range(0, 1)) = 1
        [NoScaleOffset]_DetailMap("Detail Map Base (R) Ny(G) Sm(B) Nx(A)", 2D) = "white" {}
        _DetailTilingOffset("Detail Tiling Offset", Vector) = (1, 1, 0, 0)
        _DetailAlbedoScale("Detail Albedo Scale", Range(0, 2)) = 0
        _DetailNormalScale("Detail Normal Scale", Range(0, 2)) = 0
        _DetailSmoothnessScale("Detail Smoothness Scale", Range(0, 2)) = 0
        [HDR]_LavaEmissionColor("Lava Emission Color", Color) = (1, 0.1862055, 0, 0)
        _BaseEmissionMaskIntensivity("Base Emission Mask Intensivity", Range(0, 100)) = 0
        _BaseEmissionMaskTreshold("Base Emission Mask Treshold", Range(0, 100)) = 0.01
        _CoverEmissionMaskIntensivity("Cover Emission Mask Intensivity", Range(0, 100)) = 0.01
        _CoverEmissionMaskTreshold("Cover Emission Mask Treshold", Range(0, 100)) = 0
        [HDR]_RimColor("Rim Color", Color) = (1, 0, 0, 0)
        _RimLightPower("Rim Light Power", Float) = 4
        [NoScaleOffset]_Noise("Emission Noise", 2D) = "white" {}
        _NoiseTiling("Emission Noise Tiling", Vector) = (1, 1, 0, 0)
        _NoiseSpeed("Emission Noise Speed", Vector) = (0.001, 0.005, 0, 0)
        _EmissionNoisePower("Emission Noise Power", Range(0, 10)) = 2.71
        [ToggleUI]_USEDYNAMICCOVERTSTATICMASKF("Use Dynamic Cover (T) Static Mask (F)", Float) = 1
        [HideInInspector]_EmissionColor("Color", Color) = (1, 1, 1, 1)
        [HideInInspector]_RenderQueueType("Float", Float) = 1
        [HideInInspector][ToggleUI]_AddPrecomputedVelocity("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_DepthOffsetEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_ConservativeDepthOffsetEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_TransparentWritingMotionVec("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_AlphaCutoffEnable("Boolean", Float) = 0
        [HideInInspector]_TransparentSortPriority("_TransparentSortPriority", Float) = 0
        [HideInInspector][ToggleUI]_UseShadowThreshold("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_DoubleSidedEnable("Boolean", Float) = 0
        [HideInInspector][Enum(Flip, 0, Mirror, 1, None, 2)]_DoubleSidedNormalMode("Float", Float) = 2
        [HideInInspector]_DoubleSidedConstants("Vector4", Vector) = (1, 1, -1, 0)
        [HideInInspector][Enum(Auto, 0, On, 1, Off, 2)]_DoubleSidedGIMode("Float", Float) = 0
        [HideInInspector][ToggleUI]_TransparentDepthPrepassEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_TransparentDepthPostpassEnable("Boolean", Float) = 0
        [HideInInspector]_SurfaceType("Float", Float) = 0
        [HideInInspector]_BlendMode("Float", Float) = 0
        [HideInInspector]_SrcBlend("Float", Float) = 1
        [HideInInspector]_DstBlend("Float", Float) = 0
        [HideInInspector]_AlphaSrcBlend("Float", Float) = 1
        [HideInInspector]_AlphaDstBlend("Float", Float) = 0
        [HideInInspector][ToggleUI]_AlphaToMask("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_AlphaToMaskInspectorValue("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_ZWrite("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_TransparentZWrite("Boolean", Float) = 0
        [HideInInspector]_CullMode("Float", Float) = 2
        [HideInInspector][ToggleUI]_EnableFogOnTransparent("Boolean", Float) = 1
        [HideInInspector]_CullModeForward("Float", Float) = 2
        [HideInInspector][Enum(Front, 1, Back, 2)]_TransparentCullMode("Float", Float) = 2
        [HideInInspector][Enum(UnityEditor.Rendering.HighDefinition.OpaqueCullMode)]_OpaqueCullMode("Float", Float) = 2
        [HideInInspector]_ZTestDepthEqualForOpaque("Float", Int) = 4
        [HideInInspector][Enum(UnityEngine.Rendering.CompareFunction)]_ZTestTransparent("Float", Float) = 4
        [HideInInspector][ToggleUI]_TransparentBackfaceEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_RequireSplitLighting("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_ReceivesSSR("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_ReceivesSSRTransparent("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_EnableBlendModePreserveSpecularLighting("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_SupportDecals("Boolean", Float) = 1
        [HideInInspector]_StencilRef("Float", Int) = 0
        [HideInInspector]_StencilWriteMask("Float", Int) = 6
        [HideInInspector]_StencilRefDepth("Float", Int) = 8
        [HideInInspector]_StencilWriteMaskDepth("Float", Int) = 8
        [HideInInspector]_StencilRefMV("Float", Int) = 40
        [HideInInspector]_StencilWriteMaskMV("Float", Int) = 40
        [HideInInspector]_StencilRefDistortionVec("Float", Int) = 4
        [HideInInspector]_StencilWriteMaskDistortionVec("Float", Int) = 4
        [HideInInspector]_StencilWriteMaskGBuffer("Float", Int) = 14
        [HideInInspector]_StencilRefGBuffer("Float", Int) = 10
        [HideInInspector]_ZTestGBuffer("Float", Int) = 4
        [HideInInspector][ToggleUI]_RayTracing("Boolean", Float) = 0
        [HideInInspector][Enum(None, 0, Box, 1, Sphere, 2, Thin, 3)]_RefractionModel("Float", Float) = 0
        [HideInInspector][NoScaleOffset]unity_Lightmaps("unity_Lightmaps", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset]unity_LightmapsInd("unity_LightmapsInd", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset]unity_ShadowMasks("unity_ShadowMasks", 2DArray) = "" {}
    }
    SubShader
    {
        Tags
        {
            "RenderPipeline"="HDRenderPipeline"
            "RenderType"="HDLitShader"
            "Queue"="Geometry+225"
            "ShaderGraphShader"="true"
            "ShaderGraphTargetId"="HDLitSubTarget"
        }
        Pass
        {
            Name "ShadowCaster"
            Tags
            {
                "LightMode" = "ShadowCaster"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        ColorMask 0
        ZClip [_ZClip]
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_SHADOWS
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _CoverMaskA_TexelSize;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float _CoverUsePlanarUV;
        float4 _CoverTilingOffset;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float _CoverEmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float4 _Noise_TexelSize;
        float2 _NoiseTiling;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_CoverMaskA);
        SAMPLER(sampler_CoverMaskA);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Lava_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options renderinglayer procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float
        {
        };
        
        void SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(float3 Vector3_314C8600, Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63;
            float3 _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1;
            SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(IN.ObjectSpacePosition, _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63, _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1);
            description.Position = _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float Alpha;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            surface.Alpha = 1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "META"
            Tags
            {
                "LightMode" = "META"
            }
        
            // Render State
            Cull Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ EDITOR_VISUALIZATION
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_TEXCOORD3
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_POSITIONPREDISPLACEMENT_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_TEXCOORD3
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_LIGHT_TRANSPORT
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _CoverMaskA_TexelSize;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float _CoverUsePlanarUV;
        float4 _CoverTilingOffset;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float _CoverEmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float4 _Noise_TexelSize;
        float2 _NoiseTiling;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_CoverMaskA);
        SAMPLER(sampler_CoverMaskA);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv1 : TEXCOORD1;
             float4 uv2 : TEXCOORD2;
             float4 uv3 : TEXCOORD3;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 positionPredisplacementRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 texCoord3;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float3 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
             float4 interp6 : INTERP6;
             float4 interp7 : INTERP7;
             float4 interp8 : INTERP8;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.positionPredisplacementRWS;
            output.interp2.xyz =  input.normalWS;
            output.interp3.xyzw =  input.tangentWS;
            output.interp4.xyzw =  input.texCoord0;
            output.interp5.xyzw =  input.texCoord1;
            output.interp6.xyzw =  input.texCoord2;
            output.interp7.xyzw =  input.texCoord3;
            output.interp8.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.positionPredisplacementRWS = input.interp1.xyz;
            output.normalWS = input.interp2.xyz;
            output.tangentWS = input.interp3.xyzw;
            output.texCoord0 = input.interp4.xyzw;
            output.texCoord1 = input.interp5.xyzw;
            output.texCoord2 = input.interp6.xyzw;
            output.texCoord3 = input.interp7.xyzw;
            output.color = input.interp8.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_e4c53213449c7682b60df6ae54f219f0_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_115fcc827510f38798b214d835c27637_Out_0 = _BaseTilingOffset;
            float _Property_d83b8f290862b285bbe2f157190e1315_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.uv0 = IN.uv0;
            float4 _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_e4c53213449c7682b60df6ae54f219f0_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2);
            float4 _Property_13c79aaf332e20868551d934a2cb7112_Out_0 = _BaseColor;
            float4 _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2, _Property_13c79aaf332e20868551d934a2cb7112_Out_0, _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2);
            UnityTexture2D _Property_b561c414493a8f8299227a27e437f045_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0 = _DetailTilingOffset;
            float _Split_cda27505033cfc8eaf60fe914f0949b9_R_1 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[0];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_G_2 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[1];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_B_3 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[2];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_A_4 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[3];
            float2 _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_R_1, _Split_cda27505033cfc8eaf60fe914f0949b9_G_2);
            float2 _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_B_3, _Split_cda27505033cfc8eaf60fe914f0949b9_A_4);
            float2 _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0, _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0, _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3);
            float4 _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0 = SAMPLE_TEXTURE2D(_Property_b561c414493a8f8299227a27e437f045_Out_0.tex, _Property_b561c414493a8f8299227a27e437f045_Out_0.samplerstate, _Property_b561c414493a8f8299227a27e437f045_Out_0.GetTransformedUV(_TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3));
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.r;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.g;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.b;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.a;
            float _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4, 2, _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2);
            float _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2;
            Unity_Add_float(_Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2, -1, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2);
            float _Property_02e7dd176dc59f8a9a62453677916b24_Out_0 = _DetailAlbedoScale;
            float _Multiply_fd406247e3137a8b8777918477740653_Out_2;
            Unity_Multiply_float_float(_Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Property_02e7dd176dc59f8a9a62453677916b24_Out_0, _Multiply_fd406247e3137a8b8777918477740653_Out_2);
            float _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1;
            Unity_Saturate_float(_Multiply_fd406247e3137a8b8777918477740653_Out_2, _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1);
            float _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1;
            Unity_Absolute_float(_Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73;
            float3 _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(_Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1);
            float _Split_1a45181d77ac838a90665f3132f6a4ef_R_1 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[0];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_G_2 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[1];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_B_3 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[2];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_A_4 = 0;
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_R_1 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[0];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_G_2 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[1];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_B_3 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[2];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[3];
            float _Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0 = float2(_Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0, _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0);
            float _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3;
            Unity_Remap_float(_Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4, float2 (0, 1), _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0, _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3);
            float _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6, 2, _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2);
            float _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2;
            Unity_Add_float(_Multiply_93138f23185e4d83b6825f8212653c3e_Out_2, -1, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2);
            float _Property_dadcc7446e5d388e9a6730406295f93a_Out_0 = _DetailSmoothnessScale;
            float _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2;
            Unity_Multiply_float_float(_Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Property_dadcc7446e5d388e9a6730406295f93a_Out_0, _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2);
            float _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1;
            Unity_Saturate_float(_Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2, _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1);
            float _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1;
            Unity_Absolute_float(_Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7;
            float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1);
            float _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1);
            float4 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4;
            float3 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5;
            float2 _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6;
            Unity_Combine_float(_Split_1a45181d77ac838a90665f3132f6a4ef_R_1, _Split_1a45181d77ac838a90665f3132f6a4ef_G_2, _Split_1a45181d77ac838a90665f3132f6a4ef_B_3, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5, _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6);
            UnityTexture2D _Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0 = _CoverTilingOffset;
            float _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.uv0 = IN.uv0;
            float4 _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2);
            float4 _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0 = _CoverBaseColor;
            float4 _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2, _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0, _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2);
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[0];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[1];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[2];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_A_4 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[3];
            float _Split_7bf3828fa790d989ac06f803f35a2027_R_1 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[0];
            float _Split_7bf3828fa790d989ac06f803f35a2027_G_2 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[1];
            float _Split_7bf3828fa790d989ac06f803f35a2027_B_3 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[2];
            float _Split_7bf3828fa790d989ac06f803f35a2027_A_4 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[3];
            float _Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0 = float2(_Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0, _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0);
            float _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3;
            Unity_Remap_float(_Split_7bf3828fa790d989ac06f803f35a2027_A_4, float2 (0, 1), _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3);
            float4 _Combine_750b21380a24ad809d449001e091b966_RGBA_4;
            float3 _Combine_750b21380a24ad809d449001e091b966_RGB_5;
            float2 _Combine_750b21380a24ad809d449001e091b966_RG_6;
            Unity_Combine_float(_Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1, _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2, _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGB_5, _Combine_750b21380a24ad809d449001e091b966_RG_6);
            float _Property_9ff69c54111eb2859f741d093f22298f_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskA);
            float4 _UV_045cea9e82354980a778f44d92578382_Out_0 = IN.uv0;
            float4 _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0 = SAMPLE_TEXTURE2D(_Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.tex, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.samplerstate, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.GetTransformedUV((_UV_045cea9e82354980a778f44d92578382_Out_0.xy)));
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_R_4 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.r;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_G_5 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.g;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_B_6 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.b;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.a;
            float _Property_4e8240836843df81941cdf6cf2cdd638_Out_0 = _CoverMaskPower;
            float _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7, _Property_4e8240836843df81941cdf6cf2cdd638_Out_0, _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2);
            float _Clamp_030a7c32684c258084338456eaddc77a_Out_3;
            Unity_Clamp_float(_Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2, 0, 1, _Clamp_030a7c32684c258084338456eaddc77a_Out_3);
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_R_1 = IN.VertexColor[0];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2 = IN.VertexColor[1];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_B_3 = IN.VertexColor[2];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_A_4 = IN.VertexColor[3];
            float2 _Vector2_65060e9a9f687a89b68e32dc876be645_Out_0 = float2(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7, _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5);
            float2 _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2;
            Unity_Multiply_float2_float2(_Vector2_65060e9a9f687a89b68e32dc876be645_Out_0, float2(2, 2), _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2);
            float2 _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2;
            Unity_Add_float2(_Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2, float2(-1, -1), _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2);
            float _Property_08b99582093b36869beb5ea3d18e765d_Out_0 = _DetailNormalScale;
            float2 _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2;
            Unity_Multiply_float2_float2(_Add_98b310e19c5fa5899c39cc45969c15ea_Out_2, (_Property_08b99582093b36869beb5ea3d18e765d_Out_0.xx), _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2);
            float _Split_26c1e73f8436c78ebdae5b51365a072b_R_1 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[0];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_G_2 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[1];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_B_3 = 0;
            float _Split_26c1e73f8436c78ebdae5b51365a072b_A_4 = 0;
            float _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2;
            Unity_DotProduct_float2(_Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2);
            float _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1;
            Unity_Saturate_float(_DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2, _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1);
            float _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1;
            Unity_OneMinus_float(_Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1, _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1);
            float _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1;
            Unity_SquareRoot_float(_OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            float3 _Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0 = float3(_Split_26c1e73f8436c78ebdae5b51365a072b_R_1, _Split_26c1e73f8436c78ebdae5b51365a072b_G_2, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            UnityTexture2D _Property_2cc39234d3d334899f94126a216a50fc_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.uv0 = IN.uv0;
            float4 _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_2cc39234d3d334899f94126a216a50fc_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2);
            float _Property_020d569f63e9a2849e23988ff74eb005_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2.xyz), _Property_020d569f63e9a2849e23988ff74eb005_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2);
            float3 _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2;
            Unity_NormalBlend_float(_Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2, _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2);
            UnityTexture2D _Property_a383045772822c87acd099bb4cd6c478_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_79abde32a0223a89907c9f09efac8db7;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.uv0 = IN.uv0;
            float4 _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_a383045772822c87acd099bb4cd6c478_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNMn_79abde32a0223a89907c9f09efac8db7, _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2);
            float _Property_c688e246111fd881820a97415e14d8a3_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_c688e246111fd881820a97415e14d8a3_Out_0, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2);
            float _Split_8cadce726725318fbacd47f436a8231d_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8cadce726725318fbacd47f436a8231d_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8cadce726725318fbacd47f436a8231d_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8cadce726725318fbacd47f436a8231d_A_4 = 0;
            float _Property_ce4e5954a0b7ff8c819fa53963327595_Out_0 = _Cover_Amount;
            float _Property_384059e6344fb98a85eccad78dd82f36_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2;
            Unity_Subtract_float(4, _Property_384059e6344fb98a85eccad78dd82f36_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2);
            float _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2;
            Unity_Divide_float(_Property_ce4e5954a0b7ff8c819fa53963327595_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2);
            float _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1;
            Unity_Absolute_float(_Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2, _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1);
            float _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2;
            Unity_Power_float(_Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2);
            float _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3;
            Unity_Clamp_float(_Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2, 0, 2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3);
            float _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2;
            Unity_Multiply_float_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2);
            float _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1;
            Unity_Saturate_float(_Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2, _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1);
            float _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3;
            Unity_Clamp_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, 0, 0.9999, _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3);
            float _Property_9babc76177853482826cae0163ffe988_Out_0 = _Cover_Max_Angle;
            float _Divide_3b22550205905d8da5870f9db56e44ff_Out_2;
            Unity_Divide_float(_Property_9babc76177853482826cae0163ffe988_Out_0, 45, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2);
            float _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1;
            Unity_OneMinus_float(_Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1);
            float _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2;
            Unity_Subtract_float(_Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1, _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2);
            float _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3;
            Unity_Clamp_float(_Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2, 0, 2, _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3);
            float _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2;
            Unity_Divide_float(1, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2);
            float _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2;
            Unity_Multiply_float_float(_Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2, _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2);
            float _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1;
            Unity_Absolute_float(_Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2, _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1);
            float _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0 = _CoverHardness;
            float _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2;
            Unity_Power_float(_Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2);
            float _Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0 = _Cover_Min_Height;
            float _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1;
            Unity_OneMinus_float(_Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0, _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1);
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_A_4 = 0;
            float _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2;
            Unity_Add_float(_OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1, _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2);
            float _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, 1, _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2);
            float _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3;
            Unity_Clamp_float(_Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2, 0, 1, _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3);
            float _Property_5da709b259ac268bb134d927bcffa4b8_Out_0 = _Cover_Min_Height_Blending;
            float _Add_c322347d9ddbcd83ba52983e9316c387_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Property_5da709b259ac268bb134d927bcffa4b8_Out_0, _Add_c322347d9ddbcd83ba52983e9316c387_Out_2);
            float _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2;
            Unity_Divide_float(_Add_c322347d9ddbcd83ba52983e9316c387_Out_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2);
            float _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1;
            Unity_OneMinus_float(_Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2, _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1);
            float _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2;
            Unity_Add_float(_OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1, -0.5, _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2);
            float _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3;
            Unity_Clamp_float(_Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2, 0, 1, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3);
            float _Add_674fcef023d728848510150af810a103_Out_2;
            Unity_Add_float(_Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3, _Add_674fcef023d728848510150af810a103_Out_2);
            float _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3;
            Unity_Clamp_float(_Add_674fcef023d728848510150af810a103_Out_2, 0, 1, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3);
            float _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2;
            Unity_Multiply_float_float(_Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2);
            float _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2;
            Unity_Multiply_float_float(_Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2);
            float3 _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2, (_Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2.xxx), _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3);
            float3x3 Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1 = normalize(mul(Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent, _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3.xyz).xyz);
            float _Split_600a9d271d96798a94ab28118977defd_R_1 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[0];
            float _Split_600a9d271d96798a94ab28118977defd_G_2 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[1];
            float _Split_600a9d271d96798a94ab28118977defd_B_3 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[2];
            float _Split_600a9d271d96798a94ab28118977defd_A_4 = 0;
            float _Multiply_2e5b010626435f8492a2690396ced19d_Out_2;
            Unity_Multiply_float_float(_Split_600a9d271d96798a94ab28118977defd_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_2e5b010626435f8492a2690396ced19d_Out_2);
            float _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2;
            Unity_Multiply_float_float(_Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2);
            float _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2;
            Unity_Multiply_float_float(_Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2);
            float _Multiply_05614e740451f18f8301586390aa5a0a_Out_2;
            Unity_Multiply_float_float(_Multiply_2e5b010626435f8492a2690396ced19d_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2, _Multiply_05614e740451f18f8301586390aa5a0a_Out_2);
            UnityTexture2D _Property_a14f2476a35d208b988233c852f919ef_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6858a0e821f26a8d87846d325e9bd170;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.uv0 = IN.uv0;
            float4 _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a14f2476a35d208b988233c852f919ef_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_6858a0e821f26a8d87846d325e9bd170, _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2);
            float _Split_16313c20ccdeaa86a639068877a69a2f_R_1 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[0];
            float _Split_16313c20ccdeaa86a639068877a69a2f_G_2 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[1];
            float _Split_16313c20ccdeaa86a639068877a69a2f_B_3 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[2];
            float _Split_16313c20ccdeaa86a639068877a69a2f_A_4 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[3];
            float _Property_673896519f419589938b37e782b90141_Out_0 = _CoverHeightMapMin;
            float _Property_c35906332422438da3b19f45cbd5ac17_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0 = float2(_Property_673896519f419589938b37e782b90141_Out_0, _Property_c35906332422438da3b19f45cbd5ac17_Out_0);
            float _Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0 = _CoverHeightMapOffset;
            float2 _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2;
            Unity_Add_float2(_Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0, (_Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0.xx), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2);
            float _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_B_3, float2 (0, 1), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3);
            float _Multiply_0093be0fd848498b89a0fa282608e715_Out_2;
            Unity_Multiply_float_float(_Multiply_05614e740451f18f8301586390aa5a0a_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2);
            float _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2;
            Unity_Multiply_float_float(_Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2, _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2);
            float _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1;
            Unity_Saturate_float(_Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1);
            float _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2;
            Unity_Multiply_float_float(_Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1, _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2);
            float _Clamp_c95f5515948375878df6581a36d8b203_Out_3;
            Unity_Clamp_float(_Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2, 0, 1, _Clamp_c95f5515948375878df6581a36d8b203_Out_3);
            float _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3;
            Unity_Branch_float(_Property_9ff69c54111eb2859f741d093f22298f_Out_0, _Clamp_c95f5515948375878df6581a36d8b203_Out_3, _Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3);
            float4 _Lerp_87882219e20a6d818c0de017d739125f_Out_3;
            Unity_Lerp_float4(_Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxxx), _Lerp_87882219e20a6d818c0de017d739125f_Out_3);
            UnityTexture2D _Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d26fd10040332c89b94151832fa36c95;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.uv0 = IN.uv0;
            float4 _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_d26fd10040332c89b94151832fa36c95, _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2);
            float _Split_c8dcaee88e16428ab476271a494e0946_R_1 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[0];
            float _Split_c8dcaee88e16428ab476271a494e0946_G_2 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[1];
            float _Split_c8dcaee88e16428ab476271a494e0946_B_3 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[2];
            float _Split_c8dcaee88e16428ab476271a494e0946_A_4 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[3];
            float _Split_81540eba4304c9878d445ae2aad30a44_R_1 = IN.VertexColor[0];
            float _Split_81540eba4304c9878d445ae2aad30a44_G_2 = IN.VertexColor[1];
            float _Split_81540eba4304c9878d445ae2aad30a44_B_3 = IN.VertexColor[2];
            float _Split_81540eba4304c9878d445ae2aad30a44_A_4 = IN.VertexColor[3];
            float _OneMinus_106edffa8269d28e944c403917c0be93_Out_1;
            Unity_OneMinus_float(_Split_81540eba4304c9878d445ae2aad30a44_R_1, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1);
            float _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3;
            Unity_Lerp_float(0, _Split_c8dcaee88e16428ab476271a494e0946_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3);
            float _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2;
            Unity_Multiply_float_float(_Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3, _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0, _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2);
            float _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1;
            Unity_Absolute_float(_Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2, _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1);
            float _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2;
            Unity_Power_float(_Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1, _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0, _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2);
            float _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3;
            Unity_Lerp_float(0, _Split_16313c20ccdeaa86a639068877a69a2f_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3);
            float _Property_cc11b329366008849094e720bdbaad9e_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2;
            Unity_Multiply_float_float(_Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3, _Property_cc11b329366008849094e720bdbaad9e_Out_0, _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2);
            float _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1;
            Unity_Absolute_float(_Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2, _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1);
            float _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_d2f191850ca06f829281d27846b9292a_Out_2;
            Unity_Power_float(_Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1, _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0, _Power_d2f191850ca06f829281d27846b9292a_Out_2);
            float _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3;
            Unity_Lerp_float(_Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2, _Power_d2f191850ca06f829281d27846b9292a_Out_2, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3, _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3);
            float4 _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0, _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2);
            UnityTexture2D _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0 = IN.uv0;
            float2 _Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0 = _NoiseSpeed;
            float2 _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2;
            Unity_Multiply_float2_float2(_Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0, (IN.TimeParameters.x.xx), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2);
            float2 _Add_46357740be2d5a86b5151c5767993e4e_Out_2;
            Unity_Add_float2((_UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0.xy), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2, _Add_46357740be2d5a86b5151c5767993e4e_Out_2);
            float4 _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_46357740be2d5a86b5151c5767993e4e_Out_2));
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_R_4 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.r;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_G_5 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.g;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_B_6 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.b;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.a;
            float2 _Multiply_a2232bab274ab88289a3628364da60c7_Out_2;
            Unity_Multiply_float2_float2(_Add_46357740be2d5a86b5151c5767993e4e_Out_2, float2(-1.2, -0.9), _Multiply_a2232bab274ab88289a3628364da60c7_Out_2);
            float2 _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2;
            Unity_Add_float2(_Multiply_a2232bab274ab88289a3628364da60c7_Out_2, float2(0.5, 0.5), _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2);
            float4 _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2));
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_R_4 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.r;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_G_5 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.g;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_B_6 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.b;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.a;
            float _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2;
            Unity_Minimum_float(_SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7, _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7, _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2);
            float _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1;
            Unity_Absolute_float(_Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2, _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1);
            float _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0 = _EmissionNoisePower;
            float _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2;
            Unity_Power_float(_Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1, _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0, _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2);
            float _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2;
            Unity_Multiply_float_float(_Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2, 20, _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2);
            float _Clamp_943869501048178fbb848b437df184e8_Out_3;
            Unity_Clamp_float(_Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2, 0.05, 1.2, _Clamp_943869501048178fbb848b437df184e8_Out_3);
            float4 _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2;
            Unity_Multiply_float4_float4(_Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2, (_Clamp_943869501048178fbb848b437df184e8_Out_3.xxxx), _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2);
            float4 _Property_1734859c1389ab848dc4063320d66a5d_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_486692dad4d34a8c8410b4771efbf96b_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d60a055f00d779808337e9d909827806_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_486692dad4d34a8c8410b4771efbf96b_Out_0, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2);
            float3 _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3);
            float3 _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1);
            float _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2;
            Unity_DotProduct_float3(_Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1, _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2);
            float _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1;
            Unity_Saturate_float(_DotProduct_845cf97598838e8198e9075e45be98c8_Out_2, _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1);
            float _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1;
            Unity_OneMinus_float(_Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1, _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1);
            float _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1;
            Unity_Absolute_float(_OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1, _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1);
            float _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2;
            Unity_Power_float(_Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1, 10, _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2);
            float4 _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2;
            Unity_Multiply_float4_float4(_Property_1734859c1389ab848dc4063320d66a5d_Out_0, (_Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2.xxxx), _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2);
            float _Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0 = _RimLightPower;
            float4 _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2;
            Unity_Multiply_float4_float4(_Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2, (_Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2);
            float4 _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2);
            float4 _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2;
            Unity_Add_float4(_Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2, _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2);
            float4 _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3;
            Unity_Clamp_float4(_Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, float4(0, 0, 0, 0), _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3);
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_R_1 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[0];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_G_2 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[1];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_B_3 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[2];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[3];
            float _Property_06c41396a31ba582877d3a10387f69e6_Out_0 = _BaseMetallic;
            float _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2;
            Unity_Multiply_float_float(_Split_c8dcaee88e16428ab476271a494e0946_R_1, _Property_06c41396a31ba582877d3a10387f69e6_Out_0, _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2);
            float _Property_2dbdbebc756fb1819344efcc68c07d00_Out_0 = _BaseAORemapMin;
            float _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0 = _BaseAORemapMax;
            float2 _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0 = float2(_Property_2dbdbebc756fb1819344efcc68c07d00_Out_0, _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0);
            float _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3;
            Unity_Remap_float(_Split_c8dcaee88e16428ab476271a494e0946_G_2, float2 (0, 1), _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3);
            float3 _Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0 = float3(_Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3, 0);
            float _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0 = _CoverMetallic;
            float _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2;
            Unity_Multiply_float_float(_Split_16313c20ccdeaa86a639068877a69a2f_R_1, _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0, _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2);
            float _Property_2696a3815c73848db1c5516a77ad7e3e_Out_0 = _CoverAORemapMin;
            float _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0 = _CoverAORemapMax;
            float2 _Vector2_6f054e667fb031849116087b7663e8de_Out_0 = float2(_Property_2696a3815c73848db1c5516a77ad7e3e_Out_0, _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0);
            float _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_G_2, float2 (0, 1), _Vector2_6f054e667fb031849116087b7663e8de_Out_0, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3);
            float3 _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0 = float3(_Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3, 0);
            float3 _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3;
            Unity_Lerp_float3(_Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0, _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3);
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[0];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[1];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_B_3 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[2];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_A_4 = 0;
            surface.BaseColor = (_Lerp_87882219e20a6d818c0de017d739125f_Out_3.xyz);
            surface.Emission = (_Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4;
            surface.Occlusion = _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2;
            surface.NormalTS = _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            surface.Metallic = _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVertMeshCustomInterpolation' */
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.positionPredisplacementRWS = input.positionPredisplacementRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord1 =                  input.texCoord1;
            output.texCoord2 =                  input.texCoord2;
            output.texCoord3 =                  input.texCoord3;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVaryingsToFragInputs' */
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassLightTransport.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "ScenePickingPass"
            Tags
            {
                "LightMode" = "Picking"
            }
        
            // Render State
            Cull [_CullMode]
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma editor_sync_compilation
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define SCENEPICKINGPASS 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _CoverMaskA_TexelSize;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float _CoverUsePlanarUV;
        float4 _CoverTilingOffset;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float _CoverEmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float4 _Noise_TexelSize;
        float2 _NoiseTiling;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_CoverMaskA);
        SAMPLER(sampler_CoverMaskA);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Lava_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options renderinglayer procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float
        {
        };
        
        void SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(float3 Vector3_314C8600, Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63;
            float3 _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1;
            SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(IN.ObjectSpacePosition, _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63, _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1);
            description.Position = _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_e4c53213449c7682b60df6ae54f219f0_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_115fcc827510f38798b214d835c27637_Out_0 = _BaseTilingOffset;
            float _Property_d83b8f290862b285bbe2f157190e1315_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.uv0 = IN.uv0;
            float4 _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_e4c53213449c7682b60df6ae54f219f0_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2);
            float4 _Property_13c79aaf332e20868551d934a2cb7112_Out_0 = _BaseColor;
            float4 _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2, _Property_13c79aaf332e20868551d934a2cb7112_Out_0, _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2);
            UnityTexture2D _Property_b561c414493a8f8299227a27e437f045_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0 = _DetailTilingOffset;
            float _Split_cda27505033cfc8eaf60fe914f0949b9_R_1 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[0];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_G_2 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[1];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_B_3 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[2];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_A_4 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[3];
            float2 _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_R_1, _Split_cda27505033cfc8eaf60fe914f0949b9_G_2);
            float2 _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_B_3, _Split_cda27505033cfc8eaf60fe914f0949b9_A_4);
            float2 _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0, _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0, _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3);
            float4 _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0 = SAMPLE_TEXTURE2D(_Property_b561c414493a8f8299227a27e437f045_Out_0.tex, _Property_b561c414493a8f8299227a27e437f045_Out_0.samplerstate, _Property_b561c414493a8f8299227a27e437f045_Out_0.GetTransformedUV(_TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3));
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.r;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.g;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.b;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.a;
            float _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4, 2, _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2);
            float _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2;
            Unity_Add_float(_Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2, -1, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2);
            float _Property_02e7dd176dc59f8a9a62453677916b24_Out_0 = _DetailAlbedoScale;
            float _Multiply_fd406247e3137a8b8777918477740653_Out_2;
            Unity_Multiply_float_float(_Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Property_02e7dd176dc59f8a9a62453677916b24_Out_0, _Multiply_fd406247e3137a8b8777918477740653_Out_2);
            float _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1;
            Unity_Saturate_float(_Multiply_fd406247e3137a8b8777918477740653_Out_2, _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1);
            float _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1;
            Unity_Absolute_float(_Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73;
            float3 _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(_Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1);
            float _Split_1a45181d77ac838a90665f3132f6a4ef_R_1 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[0];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_G_2 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[1];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_B_3 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[2];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_A_4 = 0;
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_R_1 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[0];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_G_2 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[1];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_B_3 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[2];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[3];
            float _Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0 = float2(_Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0, _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0);
            float _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3;
            Unity_Remap_float(_Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4, float2 (0, 1), _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0, _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3);
            float _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6, 2, _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2);
            float _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2;
            Unity_Add_float(_Multiply_93138f23185e4d83b6825f8212653c3e_Out_2, -1, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2);
            float _Property_dadcc7446e5d388e9a6730406295f93a_Out_0 = _DetailSmoothnessScale;
            float _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2;
            Unity_Multiply_float_float(_Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Property_dadcc7446e5d388e9a6730406295f93a_Out_0, _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2);
            float _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1;
            Unity_Saturate_float(_Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2, _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1);
            float _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1;
            Unity_Absolute_float(_Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7;
            float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1);
            float _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1);
            float4 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4;
            float3 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5;
            float2 _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6;
            Unity_Combine_float(_Split_1a45181d77ac838a90665f3132f6a4ef_R_1, _Split_1a45181d77ac838a90665f3132f6a4ef_G_2, _Split_1a45181d77ac838a90665f3132f6a4ef_B_3, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5, _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6);
            UnityTexture2D _Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0 = _CoverTilingOffset;
            float _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.uv0 = IN.uv0;
            float4 _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2);
            float4 _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0 = _CoverBaseColor;
            float4 _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2, _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0, _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2);
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[0];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[1];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[2];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_A_4 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[3];
            float _Split_7bf3828fa790d989ac06f803f35a2027_R_1 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[0];
            float _Split_7bf3828fa790d989ac06f803f35a2027_G_2 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[1];
            float _Split_7bf3828fa790d989ac06f803f35a2027_B_3 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[2];
            float _Split_7bf3828fa790d989ac06f803f35a2027_A_4 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[3];
            float _Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0 = float2(_Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0, _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0);
            float _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3;
            Unity_Remap_float(_Split_7bf3828fa790d989ac06f803f35a2027_A_4, float2 (0, 1), _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3);
            float4 _Combine_750b21380a24ad809d449001e091b966_RGBA_4;
            float3 _Combine_750b21380a24ad809d449001e091b966_RGB_5;
            float2 _Combine_750b21380a24ad809d449001e091b966_RG_6;
            Unity_Combine_float(_Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1, _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2, _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGB_5, _Combine_750b21380a24ad809d449001e091b966_RG_6);
            float _Property_9ff69c54111eb2859f741d093f22298f_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskA);
            float4 _UV_045cea9e82354980a778f44d92578382_Out_0 = IN.uv0;
            float4 _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0 = SAMPLE_TEXTURE2D(_Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.tex, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.samplerstate, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.GetTransformedUV((_UV_045cea9e82354980a778f44d92578382_Out_0.xy)));
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_R_4 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.r;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_G_5 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.g;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_B_6 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.b;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.a;
            float _Property_4e8240836843df81941cdf6cf2cdd638_Out_0 = _CoverMaskPower;
            float _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7, _Property_4e8240836843df81941cdf6cf2cdd638_Out_0, _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2);
            float _Clamp_030a7c32684c258084338456eaddc77a_Out_3;
            Unity_Clamp_float(_Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2, 0, 1, _Clamp_030a7c32684c258084338456eaddc77a_Out_3);
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_R_1 = IN.VertexColor[0];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2 = IN.VertexColor[1];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_B_3 = IN.VertexColor[2];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_A_4 = IN.VertexColor[3];
            float2 _Vector2_65060e9a9f687a89b68e32dc876be645_Out_0 = float2(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7, _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5);
            float2 _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2;
            Unity_Multiply_float2_float2(_Vector2_65060e9a9f687a89b68e32dc876be645_Out_0, float2(2, 2), _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2);
            float2 _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2;
            Unity_Add_float2(_Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2, float2(-1, -1), _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2);
            float _Property_08b99582093b36869beb5ea3d18e765d_Out_0 = _DetailNormalScale;
            float2 _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2;
            Unity_Multiply_float2_float2(_Add_98b310e19c5fa5899c39cc45969c15ea_Out_2, (_Property_08b99582093b36869beb5ea3d18e765d_Out_0.xx), _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2);
            float _Split_26c1e73f8436c78ebdae5b51365a072b_R_1 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[0];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_G_2 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[1];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_B_3 = 0;
            float _Split_26c1e73f8436c78ebdae5b51365a072b_A_4 = 0;
            float _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2;
            Unity_DotProduct_float2(_Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2);
            float _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1;
            Unity_Saturate_float(_DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2, _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1);
            float _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1;
            Unity_OneMinus_float(_Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1, _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1);
            float _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1;
            Unity_SquareRoot_float(_OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            float3 _Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0 = float3(_Split_26c1e73f8436c78ebdae5b51365a072b_R_1, _Split_26c1e73f8436c78ebdae5b51365a072b_G_2, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            UnityTexture2D _Property_2cc39234d3d334899f94126a216a50fc_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.uv0 = IN.uv0;
            float4 _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_2cc39234d3d334899f94126a216a50fc_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2);
            float _Property_020d569f63e9a2849e23988ff74eb005_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2.xyz), _Property_020d569f63e9a2849e23988ff74eb005_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2);
            float3 _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2;
            Unity_NormalBlend_float(_Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2, _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2);
            UnityTexture2D _Property_a383045772822c87acd099bb4cd6c478_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_79abde32a0223a89907c9f09efac8db7;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.uv0 = IN.uv0;
            float4 _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_a383045772822c87acd099bb4cd6c478_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNMn_79abde32a0223a89907c9f09efac8db7, _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2);
            float _Property_c688e246111fd881820a97415e14d8a3_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_c688e246111fd881820a97415e14d8a3_Out_0, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2);
            float _Split_8cadce726725318fbacd47f436a8231d_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8cadce726725318fbacd47f436a8231d_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8cadce726725318fbacd47f436a8231d_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8cadce726725318fbacd47f436a8231d_A_4 = 0;
            float _Property_ce4e5954a0b7ff8c819fa53963327595_Out_0 = _Cover_Amount;
            float _Property_384059e6344fb98a85eccad78dd82f36_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2;
            Unity_Subtract_float(4, _Property_384059e6344fb98a85eccad78dd82f36_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2);
            float _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2;
            Unity_Divide_float(_Property_ce4e5954a0b7ff8c819fa53963327595_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2);
            float _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1;
            Unity_Absolute_float(_Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2, _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1);
            float _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2;
            Unity_Power_float(_Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2);
            float _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3;
            Unity_Clamp_float(_Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2, 0, 2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3);
            float _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2;
            Unity_Multiply_float_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2);
            float _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1;
            Unity_Saturate_float(_Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2, _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1);
            float _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3;
            Unity_Clamp_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, 0, 0.9999, _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3);
            float _Property_9babc76177853482826cae0163ffe988_Out_0 = _Cover_Max_Angle;
            float _Divide_3b22550205905d8da5870f9db56e44ff_Out_2;
            Unity_Divide_float(_Property_9babc76177853482826cae0163ffe988_Out_0, 45, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2);
            float _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1;
            Unity_OneMinus_float(_Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1);
            float _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2;
            Unity_Subtract_float(_Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1, _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2);
            float _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3;
            Unity_Clamp_float(_Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2, 0, 2, _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3);
            float _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2;
            Unity_Divide_float(1, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2);
            float _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2;
            Unity_Multiply_float_float(_Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2, _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2);
            float _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1;
            Unity_Absolute_float(_Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2, _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1);
            float _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0 = _CoverHardness;
            float _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2;
            Unity_Power_float(_Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2);
            float _Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0 = _Cover_Min_Height;
            float _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1;
            Unity_OneMinus_float(_Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0, _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1);
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_A_4 = 0;
            float _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2;
            Unity_Add_float(_OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1, _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2);
            float _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, 1, _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2);
            float _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3;
            Unity_Clamp_float(_Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2, 0, 1, _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3);
            float _Property_5da709b259ac268bb134d927bcffa4b8_Out_0 = _Cover_Min_Height_Blending;
            float _Add_c322347d9ddbcd83ba52983e9316c387_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Property_5da709b259ac268bb134d927bcffa4b8_Out_0, _Add_c322347d9ddbcd83ba52983e9316c387_Out_2);
            float _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2;
            Unity_Divide_float(_Add_c322347d9ddbcd83ba52983e9316c387_Out_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2);
            float _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1;
            Unity_OneMinus_float(_Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2, _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1);
            float _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2;
            Unity_Add_float(_OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1, -0.5, _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2);
            float _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3;
            Unity_Clamp_float(_Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2, 0, 1, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3);
            float _Add_674fcef023d728848510150af810a103_Out_2;
            Unity_Add_float(_Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3, _Add_674fcef023d728848510150af810a103_Out_2);
            float _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3;
            Unity_Clamp_float(_Add_674fcef023d728848510150af810a103_Out_2, 0, 1, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3);
            float _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2;
            Unity_Multiply_float_float(_Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2);
            float _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2;
            Unity_Multiply_float_float(_Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2);
            float3 _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2, (_Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2.xxx), _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3);
            float3x3 Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1 = normalize(mul(Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent, _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3.xyz).xyz);
            float _Split_600a9d271d96798a94ab28118977defd_R_1 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[0];
            float _Split_600a9d271d96798a94ab28118977defd_G_2 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[1];
            float _Split_600a9d271d96798a94ab28118977defd_B_3 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[2];
            float _Split_600a9d271d96798a94ab28118977defd_A_4 = 0;
            float _Multiply_2e5b010626435f8492a2690396ced19d_Out_2;
            Unity_Multiply_float_float(_Split_600a9d271d96798a94ab28118977defd_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_2e5b010626435f8492a2690396ced19d_Out_2);
            float _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2;
            Unity_Multiply_float_float(_Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2);
            float _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2;
            Unity_Multiply_float_float(_Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2);
            float _Multiply_05614e740451f18f8301586390aa5a0a_Out_2;
            Unity_Multiply_float_float(_Multiply_2e5b010626435f8492a2690396ced19d_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2, _Multiply_05614e740451f18f8301586390aa5a0a_Out_2);
            UnityTexture2D _Property_a14f2476a35d208b988233c852f919ef_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6858a0e821f26a8d87846d325e9bd170;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.uv0 = IN.uv0;
            float4 _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a14f2476a35d208b988233c852f919ef_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_6858a0e821f26a8d87846d325e9bd170, _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2);
            float _Split_16313c20ccdeaa86a639068877a69a2f_R_1 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[0];
            float _Split_16313c20ccdeaa86a639068877a69a2f_G_2 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[1];
            float _Split_16313c20ccdeaa86a639068877a69a2f_B_3 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[2];
            float _Split_16313c20ccdeaa86a639068877a69a2f_A_4 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[3];
            float _Property_673896519f419589938b37e782b90141_Out_0 = _CoverHeightMapMin;
            float _Property_c35906332422438da3b19f45cbd5ac17_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0 = float2(_Property_673896519f419589938b37e782b90141_Out_0, _Property_c35906332422438da3b19f45cbd5ac17_Out_0);
            float _Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0 = _CoverHeightMapOffset;
            float2 _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2;
            Unity_Add_float2(_Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0, (_Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0.xx), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2);
            float _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_B_3, float2 (0, 1), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3);
            float _Multiply_0093be0fd848498b89a0fa282608e715_Out_2;
            Unity_Multiply_float_float(_Multiply_05614e740451f18f8301586390aa5a0a_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2);
            float _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2;
            Unity_Multiply_float_float(_Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2, _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2);
            float _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1;
            Unity_Saturate_float(_Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1);
            float _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2;
            Unity_Multiply_float_float(_Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1, _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2);
            float _Clamp_c95f5515948375878df6581a36d8b203_Out_3;
            Unity_Clamp_float(_Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2, 0, 1, _Clamp_c95f5515948375878df6581a36d8b203_Out_3);
            float _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3;
            Unity_Branch_float(_Property_9ff69c54111eb2859f741d093f22298f_Out_0, _Clamp_c95f5515948375878df6581a36d8b203_Out_3, _Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3);
            float4 _Lerp_87882219e20a6d818c0de017d739125f_Out_3;
            Unity_Lerp_float4(_Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxxx), _Lerp_87882219e20a6d818c0de017d739125f_Out_3);
            UnityTexture2D _Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d26fd10040332c89b94151832fa36c95;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.uv0 = IN.uv0;
            float4 _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_d26fd10040332c89b94151832fa36c95, _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2);
            float _Split_c8dcaee88e16428ab476271a494e0946_R_1 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[0];
            float _Split_c8dcaee88e16428ab476271a494e0946_G_2 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[1];
            float _Split_c8dcaee88e16428ab476271a494e0946_B_3 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[2];
            float _Split_c8dcaee88e16428ab476271a494e0946_A_4 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[3];
            float _Split_81540eba4304c9878d445ae2aad30a44_R_1 = IN.VertexColor[0];
            float _Split_81540eba4304c9878d445ae2aad30a44_G_2 = IN.VertexColor[1];
            float _Split_81540eba4304c9878d445ae2aad30a44_B_3 = IN.VertexColor[2];
            float _Split_81540eba4304c9878d445ae2aad30a44_A_4 = IN.VertexColor[3];
            float _OneMinus_106edffa8269d28e944c403917c0be93_Out_1;
            Unity_OneMinus_float(_Split_81540eba4304c9878d445ae2aad30a44_R_1, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1);
            float _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3;
            Unity_Lerp_float(0, _Split_c8dcaee88e16428ab476271a494e0946_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3);
            float _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2;
            Unity_Multiply_float_float(_Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3, _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0, _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2);
            float _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1;
            Unity_Absolute_float(_Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2, _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1);
            float _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2;
            Unity_Power_float(_Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1, _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0, _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2);
            float _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3;
            Unity_Lerp_float(0, _Split_16313c20ccdeaa86a639068877a69a2f_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3);
            float _Property_cc11b329366008849094e720bdbaad9e_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2;
            Unity_Multiply_float_float(_Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3, _Property_cc11b329366008849094e720bdbaad9e_Out_0, _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2);
            float _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1;
            Unity_Absolute_float(_Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2, _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1);
            float _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_d2f191850ca06f829281d27846b9292a_Out_2;
            Unity_Power_float(_Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1, _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0, _Power_d2f191850ca06f829281d27846b9292a_Out_2);
            float _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3;
            Unity_Lerp_float(_Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2, _Power_d2f191850ca06f829281d27846b9292a_Out_2, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3, _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3);
            float4 _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0, _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2);
            UnityTexture2D _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0 = IN.uv0;
            float2 _Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0 = _NoiseSpeed;
            float2 _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2;
            Unity_Multiply_float2_float2(_Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0, (IN.TimeParameters.x.xx), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2);
            float2 _Add_46357740be2d5a86b5151c5767993e4e_Out_2;
            Unity_Add_float2((_UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0.xy), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2, _Add_46357740be2d5a86b5151c5767993e4e_Out_2);
            float4 _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_46357740be2d5a86b5151c5767993e4e_Out_2));
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_R_4 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.r;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_G_5 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.g;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_B_6 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.b;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.a;
            float2 _Multiply_a2232bab274ab88289a3628364da60c7_Out_2;
            Unity_Multiply_float2_float2(_Add_46357740be2d5a86b5151c5767993e4e_Out_2, float2(-1.2, -0.9), _Multiply_a2232bab274ab88289a3628364da60c7_Out_2);
            float2 _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2;
            Unity_Add_float2(_Multiply_a2232bab274ab88289a3628364da60c7_Out_2, float2(0.5, 0.5), _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2);
            float4 _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2));
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_R_4 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.r;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_G_5 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.g;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_B_6 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.b;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.a;
            float _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2;
            Unity_Minimum_float(_SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7, _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7, _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2);
            float _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1;
            Unity_Absolute_float(_Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2, _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1);
            float _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0 = _EmissionNoisePower;
            float _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2;
            Unity_Power_float(_Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1, _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0, _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2);
            float _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2;
            Unity_Multiply_float_float(_Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2, 20, _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2);
            float _Clamp_943869501048178fbb848b437df184e8_Out_3;
            Unity_Clamp_float(_Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2, 0.05, 1.2, _Clamp_943869501048178fbb848b437df184e8_Out_3);
            float4 _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2;
            Unity_Multiply_float4_float4(_Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2, (_Clamp_943869501048178fbb848b437df184e8_Out_3.xxxx), _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2);
            float4 _Property_1734859c1389ab848dc4063320d66a5d_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_486692dad4d34a8c8410b4771efbf96b_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d60a055f00d779808337e9d909827806_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_486692dad4d34a8c8410b4771efbf96b_Out_0, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2);
            float3 _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3);
            float3 _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1);
            float _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2;
            Unity_DotProduct_float3(_Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1, _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2);
            float _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1;
            Unity_Saturate_float(_DotProduct_845cf97598838e8198e9075e45be98c8_Out_2, _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1);
            float _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1;
            Unity_OneMinus_float(_Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1, _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1);
            float _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1;
            Unity_Absolute_float(_OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1, _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1);
            float _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2;
            Unity_Power_float(_Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1, 10, _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2);
            float4 _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2;
            Unity_Multiply_float4_float4(_Property_1734859c1389ab848dc4063320d66a5d_Out_0, (_Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2.xxxx), _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2);
            float _Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0 = _RimLightPower;
            float4 _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2;
            Unity_Multiply_float4_float4(_Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2, (_Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2);
            float4 _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2);
            float4 _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2;
            Unity_Add_float4(_Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2, _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2);
            float4 _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3;
            Unity_Clamp_float4(_Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, float4(0, 0, 0, 0), _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3);
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_R_1 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[0];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_G_2 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[1];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_B_3 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[2];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[3];
            float _Property_06c41396a31ba582877d3a10387f69e6_Out_0 = _BaseMetallic;
            float _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2;
            Unity_Multiply_float_float(_Split_c8dcaee88e16428ab476271a494e0946_R_1, _Property_06c41396a31ba582877d3a10387f69e6_Out_0, _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2);
            float _Property_2dbdbebc756fb1819344efcc68c07d00_Out_0 = _BaseAORemapMin;
            float _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0 = _BaseAORemapMax;
            float2 _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0 = float2(_Property_2dbdbebc756fb1819344efcc68c07d00_Out_0, _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0);
            float _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3;
            Unity_Remap_float(_Split_c8dcaee88e16428ab476271a494e0946_G_2, float2 (0, 1), _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3);
            float3 _Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0 = float3(_Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3, 0);
            float _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0 = _CoverMetallic;
            float _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2;
            Unity_Multiply_float_float(_Split_16313c20ccdeaa86a639068877a69a2f_R_1, _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0, _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2);
            float _Property_2696a3815c73848db1c5516a77ad7e3e_Out_0 = _CoverAORemapMin;
            float _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0 = _CoverAORemapMax;
            float2 _Vector2_6f054e667fb031849116087b7663e8de_Out_0 = float2(_Property_2696a3815c73848db1c5516a77ad7e3e_Out_0, _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0);
            float _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_G_2, float2 (0, 1), _Vector2_6f054e667fb031849116087b7663e8de_Out_0, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3);
            float3 _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0 = float3(_Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3, 0);
            float3 _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3;
            Unity_Lerp_float3(_Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0, _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3);
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[0];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[1];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_B_3 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[2];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_A_4 = 0;
            surface.BaseColor = (_Lerp_87882219e20a6d818c0de017d739125f_Out_3.xyz);
            surface.Emission = (_Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4;
            surface.Occlusion = _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2;
            surface.NormalTS = _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            surface.Metallic = _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "SceneSelectionPass"
            Tags
            {
                "LightMode" = "SceneSelectionPass"
            }
        
            // Render State
            Cull Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma editor_sync_compilation
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SCENESELECTIONPASS 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _CoverMaskA_TexelSize;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float _CoverUsePlanarUV;
        float4 _CoverTilingOffset;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float _CoverEmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float4 _Noise_TexelSize;
        float2 _NoiseTiling;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_CoverMaskA);
        SAMPLER(sampler_CoverMaskA);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Lava_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options renderinglayer procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float
        {
        };
        
        void SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(float3 Vector3_314C8600, Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63;
            float3 _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1;
            SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(IN.ObjectSpacePosition, _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63, _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1);
            description.Position = _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_e4c53213449c7682b60df6ae54f219f0_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_115fcc827510f38798b214d835c27637_Out_0 = _BaseTilingOffset;
            float _Property_d83b8f290862b285bbe2f157190e1315_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.uv0 = IN.uv0;
            float4 _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_e4c53213449c7682b60df6ae54f219f0_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2);
            float4 _Property_13c79aaf332e20868551d934a2cb7112_Out_0 = _BaseColor;
            float4 _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2, _Property_13c79aaf332e20868551d934a2cb7112_Out_0, _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2);
            UnityTexture2D _Property_b561c414493a8f8299227a27e437f045_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0 = _DetailTilingOffset;
            float _Split_cda27505033cfc8eaf60fe914f0949b9_R_1 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[0];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_G_2 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[1];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_B_3 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[2];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_A_4 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[3];
            float2 _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_R_1, _Split_cda27505033cfc8eaf60fe914f0949b9_G_2);
            float2 _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_B_3, _Split_cda27505033cfc8eaf60fe914f0949b9_A_4);
            float2 _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0, _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0, _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3);
            float4 _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0 = SAMPLE_TEXTURE2D(_Property_b561c414493a8f8299227a27e437f045_Out_0.tex, _Property_b561c414493a8f8299227a27e437f045_Out_0.samplerstate, _Property_b561c414493a8f8299227a27e437f045_Out_0.GetTransformedUV(_TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3));
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.r;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.g;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.b;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.a;
            float _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4, 2, _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2);
            float _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2;
            Unity_Add_float(_Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2, -1, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2);
            float _Property_02e7dd176dc59f8a9a62453677916b24_Out_0 = _DetailAlbedoScale;
            float _Multiply_fd406247e3137a8b8777918477740653_Out_2;
            Unity_Multiply_float_float(_Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Property_02e7dd176dc59f8a9a62453677916b24_Out_0, _Multiply_fd406247e3137a8b8777918477740653_Out_2);
            float _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1;
            Unity_Saturate_float(_Multiply_fd406247e3137a8b8777918477740653_Out_2, _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1);
            float _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1;
            Unity_Absolute_float(_Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73;
            float3 _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(_Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1);
            float _Split_1a45181d77ac838a90665f3132f6a4ef_R_1 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[0];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_G_2 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[1];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_B_3 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[2];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_A_4 = 0;
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_R_1 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[0];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_G_2 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[1];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_B_3 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[2];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[3];
            float _Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0 = float2(_Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0, _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0);
            float _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3;
            Unity_Remap_float(_Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4, float2 (0, 1), _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0, _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3);
            float _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6, 2, _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2);
            float _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2;
            Unity_Add_float(_Multiply_93138f23185e4d83b6825f8212653c3e_Out_2, -1, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2);
            float _Property_dadcc7446e5d388e9a6730406295f93a_Out_0 = _DetailSmoothnessScale;
            float _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2;
            Unity_Multiply_float_float(_Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Property_dadcc7446e5d388e9a6730406295f93a_Out_0, _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2);
            float _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1;
            Unity_Saturate_float(_Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2, _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1);
            float _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1;
            Unity_Absolute_float(_Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7;
            float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1);
            float _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1);
            float4 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4;
            float3 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5;
            float2 _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6;
            Unity_Combine_float(_Split_1a45181d77ac838a90665f3132f6a4ef_R_1, _Split_1a45181d77ac838a90665f3132f6a4ef_G_2, _Split_1a45181d77ac838a90665f3132f6a4ef_B_3, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5, _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6);
            UnityTexture2D _Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0 = _CoverTilingOffset;
            float _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.uv0 = IN.uv0;
            float4 _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2);
            float4 _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0 = _CoverBaseColor;
            float4 _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2, _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0, _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2);
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[0];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[1];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[2];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_A_4 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[3];
            float _Split_7bf3828fa790d989ac06f803f35a2027_R_1 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[0];
            float _Split_7bf3828fa790d989ac06f803f35a2027_G_2 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[1];
            float _Split_7bf3828fa790d989ac06f803f35a2027_B_3 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[2];
            float _Split_7bf3828fa790d989ac06f803f35a2027_A_4 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[3];
            float _Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0 = float2(_Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0, _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0);
            float _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3;
            Unity_Remap_float(_Split_7bf3828fa790d989ac06f803f35a2027_A_4, float2 (0, 1), _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3);
            float4 _Combine_750b21380a24ad809d449001e091b966_RGBA_4;
            float3 _Combine_750b21380a24ad809d449001e091b966_RGB_5;
            float2 _Combine_750b21380a24ad809d449001e091b966_RG_6;
            Unity_Combine_float(_Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1, _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2, _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGB_5, _Combine_750b21380a24ad809d449001e091b966_RG_6);
            float _Property_9ff69c54111eb2859f741d093f22298f_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskA);
            float4 _UV_045cea9e82354980a778f44d92578382_Out_0 = IN.uv0;
            float4 _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0 = SAMPLE_TEXTURE2D(_Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.tex, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.samplerstate, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.GetTransformedUV((_UV_045cea9e82354980a778f44d92578382_Out_0.xy)));
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_R_4 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.r;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_G_5 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.g;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_B_6 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.b;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.a;
            float _Property_4e8240836843df81941cdf6cf2cdd638_Out_0 = _CoverMaskPower;
            float _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7, _Property_4e8240836843df81941cdf6cf2cdd638_Out_0, _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2);
            float _Clamp_030a7c32684c258084338456eaddc77a_Out_3;
            Unity_Clamp_float(_Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2, 0, 1, _Clamp_030a7c32684c258084338456eaddc77a_Out_3);
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_R_1 = IN.VertexColor[0];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2 = IN.VertexColor[1];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_B_3 = IN.VertexColor[2];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_A_4 = IN.VertexColor[3];
            float2 _Vector2_65060e9a9f687a89b68e32dc876be645_Out_0 = float2(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7, _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5);
            float2 _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2;
            Unity_Multiply_float2_float2(_Vector2_65060e9a9f687a89b68e32dc876be645_Out_0, float2(2, 2), _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2);
            float2 _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2;
            Unity_Add_float2(_Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2, float2(-1, -1), _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2);
            float _Property_08b99582093b36869beb5ea3d18e765d_Out_0 = _DetailNormalScale;
            float2 _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2;
            Unity_Multiply_float2_float2(_Add_98b310e19c5fa5899c39cc45969c15ea_Out_2, (_Property_08b99582093b36869beb5ea3d18e765d_Out_0.xx), _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2);
            float _Split_26c1e73f8436c78ebdae5b51365a072b_R_1 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[0];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_G_2 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[1];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_B_3 = 0;
            float _Split_26c1e73f8436c78ebdae5b51365a072b_A_4 = 0;
            float _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2;
            Unity_DotProduct_float2(_Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2);
            float _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1;
            Unity_Saturate_float(_DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2, _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1);
            float _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1;
            Unity_OneMinus_float(_Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1, _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1);
            float _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1;
            Unity_SquareRoot_float(_OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            float3 _Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0 = float3(_Split_26c1e73f8436c78ebdae5b51365a072b_R_1, _Split_26c1e73f8436c78ebdae5b51365a072b_G_2, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            UnityTexture2D _Property_2cc39234d3d334899f94126a216a50fc_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.uv0 = IN.uv0;
            float4 _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_2cc39234d3d334899f94126a216a50fc_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2);
            float _Property_020d569f63e9a2849e23988ff74eb005_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2.xyz), _Property_020d569f63e9a2849e23988ff74eb005_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2);
            float3 _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2;
            Unity_NormalBlend_float(_Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2, _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2);
            UnityTexture2D _Property_a383045772822c87acd099bb4cd6c478_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_79abde32a0223a89907c9f09efac8db7;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.uv0 = IN.uv0;
            float4 _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_a383045772822c87acd099bb4cd6c478_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNMn_79abde32a0223a89907c9f09efac8db7, _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2);
            float _Property_c688e246111fd881820a97415e14d8a3_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_c688e246111fd881820a97415e14d8a3_Out_0, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2);
            float _Split_8cadce726725318fbacd47f436a8231d_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8cadce726725318fbacd47f436a8231d_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8cadce726725318fbacd47f436a8231d_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8cadce726725318fbacd47f436a8231d_A_4 = 0;
            float _Property_ce4e5954a0b7ff8c819fa53963327595_Out_0 = _Cover_Amount;
            float _Property_384059e6344fb98a85eccad78dd82f36_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2;
            Unity_Subtract_float(4, _Property_384059e6344fb98a85eccad78dd82f36_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2);
            float _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2;
            Unity_Divide_float(_Property_ce4e5954a0b7ff8c819fa53963327595_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2);
            float _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1;
            Unity_Absolute_float(_Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2, _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1);
            float _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2;
            Unity_Power_float(_Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2);
            float _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3;
            Unity_Clamp_float(_Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2, 0, 2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3);
            float _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2;
            Unity_Multiply_float_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2);
            float _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1;
            Unity_Saturate_float(_Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2, _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1);
            float _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3;
            Unity_Clamp_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, 0, 0.9999, _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3);
            float _Property_9babc76177853482826cae0163ffe988_Out_0 = _Cover_Max_Angle;
            float _Divide_3b22550205905d8da5870f9db56e44ff_Out_2;
            Unity_Divide_float(_Property_9babc76177853482826cae0163ffe988_Out_0, 45, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2);
            float _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1;
            Unity_OneMinus_float(_Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1);
            float _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2;
            Unity_Subtract_float(_Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1, _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2);
            float _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3;
            Unity_Clamp_float(_Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2, 0, 2, _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3);
            float _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2;
            Unity_Divide_float(1, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2);
            float _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2;
            Unity_Multiply_float_float(_Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2, _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2);
            float _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1;
            Unity_Absolute_float(_Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2, _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1);
            float _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0 = _CoverHardness;
            float _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2;
            Unity_Power_float(_Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2);
            float _Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0 = _Cover_Min_Height;
            float _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1;
            Unity_OneMinus_float(_Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0, _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1);
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_A_4 = 0;
            float _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2;
            Unity_Add_float(_OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1, _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2);
            float _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, 1, _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2);
            float _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3;
            Unity_Clamp_float(_Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2, 0, 1, _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3);
            float _Property_5da709b259ac268bb134d927bcffa4b8_Out_0 = _Cover_Min_Height_Blending;
            float _Add_c322347d9ddbcd83ba52983e9316c387_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Property_5da709b259ac268bb134d927bcffa4b8_Out_0, _Add_c322347d9ddbcd83ba52983e9316c387_Out_2);
            float _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2;
            Unity_Divide_float(_Add_c322347d9ddbcd83ba52983e9316c387_Out_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2);
            float _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1;
            Unity_OneMinus_float(_Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2, _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1);
            float _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2;
            Unity_Add_float(_OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1, -0.5, _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2);
            float _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3;
            Unity_Clamp_float(_Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2, 0, 1, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3);
            float _Add_674fcef023d728848510150af810a103_Out_2;
            Unity_Add_float(_Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3, _Add_674fcef023d728848510150af810a103_Out_2);
            float _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3;
            Unity_Clamp_float(_Add_674fcef023d728848510150af810a103_Out_2, 0, 1, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3);
            float _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2;
            Unity_Multiply_float_float(_Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2);
            float _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2;
            Unity_Multiply_float_float(_Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2);
            float3 _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2, (_Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2.xxx), _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3);
            float3x3 Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1 = normalize(mul(Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent, _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3.xyz).xyz);
            float _Split_600a9d271d96798a94ab28118977defd_R_1 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[0];
            float _Split_600a9d271d96798a94ab28118977defd_G_2 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[1];
            float _Split_600a9d271d96798a94ab28118977defd_B_3 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[2];
            float _Split_600a9d271d96798a94ab28118977defd_A_4 = 0;
            float _Multiply_2e5b010626435f8492a2690396ced19d_Out_2;
            Unity_Multiply_float_float(_Split_600a9d271d96798a94ab28118977defd_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_2e5b010626435f8492a2690396ced19d_Out_2);
            float _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2;
            Unity_Multiply_float_float(_Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2);
            float _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2;
            Unity_Multiply_float_float(_Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2);
            float _Multiply_05614e740451f18f8301586390aa5a0a_Out_2;
            Unity_Multiply_float_float(_Multiply_2e5b010626435f8492a2690396ced19d_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2, _Multiply_05614e740451f18f8301586390aa5a0a_Out_2);
            UnityTexture2D _Property_a14f2476a35d208b988233c852f919ef_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6858a0e821f26a8d87846d325e9bd170;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.uv0 = IN.uv0;
            float4 _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a14f2476a35d208b988233c852f919ef_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_6858a0e821f26a8d87846d325e9bd170, _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2);
            float _Split_16313c20ccdeaa86a639068877a69a2f_R_1 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[0];
            float _Split_16313c20ccdeaa86a639068877a69a2f_G_2 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[1];
            float _Split_16313c20ccdeaa86a639068877a69a2f_B_3 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[2];
            float _Split_16313c20ccdeaa86a639068877a69a2f_A_4 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[3];
            float _Property_673896519f419589938b37e782b90141_Out_0 = _CoverHeightMapMin;
            float _Property_c35906332422438da3b19f45cbd5ac17_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0 = float2(_Property_673896519f419589938b37e782b90141_Out_0, _Property_c35906332422438da3b19f45cbd5ac17_Out_0);
            float _Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0 = _CoverHeightMapOffset;
            float2 _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2;
            Unity_Add_float2(_Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0, (_Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0.xx), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2);
            float _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_B_3, float2 (0, 1), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3);
            float _Multiply_0093be0fd848498b89a0fa282608e715_Out_2;
            Unity_Multiply_float_float(_Multiply_05614e740451f18f8301586390aa5a0a_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2);
            float _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2;
            Unity_Multiply_float_float(_Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2, _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2);
            float _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1;
            Unity_Saturate_float(_Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1);
            float _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2;
            Unity_Multiply_float_float(_Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1, _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2);
            float _Clamp_c95f5515948375878df6581a36d8b203_Out_3;
            Unity_Clamp_float(_Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2, 0, 1, _Clamp_c95f5515948375878df6581a36d8b203_Out_3);
            float _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3;
            Unity_Branch_float(_Property_9ff69c54111eb2859f741d093f22298f_Out_0, _Clamp_c95f5515948375878df6581a36d8b203_Out_3, _Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3);
            float4 _Lerp_87882219e20a6d818c0de017d739125f_Out_3;
            Unity_Lerp_float4(_Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxxx), _Lerp_87882219e20a6d818c0de017d739125f_Out_3);
            UnityTexture2D _Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d26fd10040332c89b94151832fa36c95;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.uv0 = IN.uv0;
            float4 _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_d26fd10040332c89b94151832fa36c95, _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2);
            float _Split_c8dcaee88e16428ab476271a494e0946_R_1 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[0];
            float _Split_c8dcaee88e16428ab476271a494e0946_G_2 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[1];
            float _Split_c8dcaee88e16428ab476271a494e0946_B_3 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[2];
            float _Split_c8dcaee88e16428ab476271a494e0946_A_4 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[3];
            float _Split_81540eba4304c9878d445ae2aad30a44_R_1 = IN.VertexColor[0];
            float _Split_81540eba4304c9878d445ae2aad30a44_G_2 = IN.VertexColor[1];
            float _Split_81540eba4304c9878d445ae2aad30a44_B_3 = IN.VertexColor[2];
            float _Split_81540eba4304c9878d445ae2aad30a44_A_4 = IN.VertexColor[3];
            float _OneMinus_106edffa8269d28e944c403917c0be93_Out_1;
            Unity_OneMinus_float(_Split_81540eba4304c9878d445ae2aad30a44_R_1, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1);
            float _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3;
            Unity_Lerp_float(0, _Split_c8dcaee88e16428ab476271a494e0946_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3);
            float _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2;
            Unity_Multiply_float_float(_Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3, _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0, _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2);
            float _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1;
            Unity_Absolute_float(_Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2, _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1);
            float _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2;
            Unity_Power_float(_Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1, _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0, _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2);
            float _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3;
            Unity_Lerp_float(0, _Split_16313c20ccdeaa86a639068877a69a2f_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3);
            float _Property_cc11b329366008849094e720bdbaad9e_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2;
            Unity_Multiply_float_float(_Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3, _Property_cc11b329366008849094e720bdbaad9e_Out_0, _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2);
            float _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1;
            Unity_Absolute_float(_Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2, _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1);
            float _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_d2f191850ca06f829281d27846b9292a_Out_2;
            Unity_Power_float(_Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1, _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0, _Power_d2f191850ca06f829281d27846b9292a_Out_2);
            float _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3;
            Unity_Lerp_float(_Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2, _Power_d2f191850ca06f829281d27846b9292a_Out_2, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3, _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3);
            float4 _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0, _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2);
            UnityTexture2D _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0 = IN.uv0;
            float2 _Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0 = _NoiseSpeed;
            float2 _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2;
            Unity_Multiply_float2_float2(_Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0, (IN.TimeParameters.x.xx), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2);
            float2 _Add_46357740be2d5a86b5151c5767993e4e_Out_2;
            Unity_Add_float2((_UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0.xy), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2, _Add_46357740be2d5a86b5151c5767993e4e_Out_2);
            float4 _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_46357740be2d5a86b5151c5767993e4e_Out_2));
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_R_4 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.r;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_G_5 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.g;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_B_6 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.b;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.a;
            float2 _Multiply_a2232bab274ab88289a3628364da60c7_Out_2;
            Unity_Multiply_float2_float2(_Add_46357740be2d5a86b5151c5767993e4e_Out_2, float2(-1.2, -0.9), _Multiply_a2232bab274ab88289a3628364da60c7_Out_2);
            float2 _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2;
            Unity_Add_float2(_Multiply_a2232bab274ab88289a3628364da60c7_Out_2, float2(0.5, 0.5), _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2);
            float4 _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2));
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_R_4 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.r;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_G_5 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.g;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_B_6 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.b;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.a;
            float _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2;
            Unity_Minimum_float(_SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7, _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7, _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2);
            float _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1;
            Unity_Absolute_float(_Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2, _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1);
            float _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0 = _EmissionNoisePower;
            float _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2;
            Unity_Power_float(_Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1, _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0, _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2);
            float _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2;
            Unity_Multiply_float_float(_Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2, 20, _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2);
            float _Clamp_943869501048178fbb848b437df184e8_Out_3;
            Unity_Clamp_float(_Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2, 0.05, 1.2, _Clamp_943869501048178fbb848b437df184e8_Out_3);
            float4 _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2;
            Unity_Multiply_float4_float4(_Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2, (_Clamp_943869501048178fbb848b437df184e8_Out_3.xxxx), _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2);
            float4 _Property_1734859c1389ab848dc4063320d66a5d_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_486692dad4d34a8c8410b4771efbf96b_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d60a055f00d779808337e9d909827806_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_486692dad4d34a8c8410b4771efbf96b_Out_0, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2);
            float3 _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3);
            float3 _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1);
            float _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2;
            Unity_DotProduct_float3(_Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1, _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2);
            float _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1;
            Unity_Saturate_float(_DotProduct_845cf97598838e8198e9075e45be98c8_Out_2, _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1);
            float _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1;
            Unity_OneMinus_float(_Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1, _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1);
            float _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1;
            Unity_Absolute_float(_OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1, _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1);
            float _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2;
            Unity_Power_float(_Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1, 10, _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2);
            float4 _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2;
            Unity_Multiply_float4_float4(_Property_1734859c1389ab848dc4063320d66a5d_Out_0, (_Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2.xxxx), _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2);
            float _Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0 = _RimLightPower;
            float4 _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2;
            Unity_Multiply_float4_float4(_Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2, (_Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2);
            float4 _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2);
            float4 _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2;
            Unity_Add_float4(_Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2, _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2);
            float4 _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3;
            Unity_Clamp_float4(_Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, float4(0, 0, 0, 0), _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3);
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_R_1 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[0];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_G_2 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[1];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_B_3 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[2];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[3];
            float _Property_06c41396a31ba582877d3a10387f69e6_Out_0 = _BaseMetallic;
            float _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2;
            Unity_Multiply_float_float(_Split_c8dcaee88e16428ab476271a494e0946_R_1, _Property_06c41396a31ba582877d3a10387f69e6_Out_0, _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2);
            float _Property_2dbdbebc756fb1819344efcc68c07d00_Out_0 = _BaseAORemapMin;
            float _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0 = _BaseAORemapMax;
            float2 _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0 = float2(_Property_2dbdbebc756fb1819344efcc68c07d00_Out_0, _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0);
            float _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3;
            Unity_Remap_float(_Split_c8dcaee88e16428ab476271a494e0946_G_2, float2 (0, 1), _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3);
            float3 _Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0 = float3(_Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3, 0);
            float _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0 = _CoverMetallic;
            float _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2;
            Unity_Multiply_float_float(_Split_16313c20ccdeaa86a639068877a69a2f_R_1, _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0, _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2);
            float _Property_2696a3815c73848db1c5516a77ad7e3e_Out_0 = _CoverAORemapMin;
            float _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0 = _CoverAORemapMax;
            float2 _Vector2_6f054e667fb031849116087b7663e8de_Out_0 = float2(_Property_2696a3815c73848db1c5516a77ad7e3e_Out_0, _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0);
            float _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_G_2, float2 (0, 1), _Vector2_6f054e667fb031849116087b7663e8de_Out_0, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3);
            float3 _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0 = float3(_Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3, 0);
            float3 _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3;
            Unity_Lerp_float3(_Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0, _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3);
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[0];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[1];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_B_3 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[2];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_A_4 = 0;
            surface.BaseColor = (_Lerp_87882219e20a6d818c0de017d739125f_Out_3.xyz);
            surface.Emission = (_Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4;
            surface.Occlusion = _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2;
            surface.NormalTS = _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            surface.Metallic = _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "MotionVectors"
            Tags
            {
                "LightMode" = "MotionVectors"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskMV]
        Ref [_StencilRefMV]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma multi_compile _ WRITE_NORMAL_BUFFER
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ WRITE_DECAL_BUFFER
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_MOTION_VECTORS
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _CoverMaskA_TexelSize;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float _CoverUsePlanarUV;
        float4 _CoverTilingOffset;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float _CoverEmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float4 _Noise_TexelSize;
        float2 _NoiseTiling;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_CoverMaskA);
        SAMPLER(sampler_CoverMaskA);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Lava_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv1 : TEXCOORD1;
             float4 uv2 : TEXCOORD2;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
             float4 interp6 : INTERP6;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.texCoord1;
            output.interp5.xyzw =  input.texCoord2;
            output.interp6.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.texCoord1 = input.interp4.xyzw;
            output.texCoord2 = input.interp5.xyzw;
            output.color = input.interp6.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options renderinglayer procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float
        {
        };
        
        void SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(float3 Vector3_314C8600, Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63;
            float3 _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1;
            SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(IN.ObjectSpacePosition, _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63, _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1);
            description.Position = _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_e4c53213449c7682b60df6ae54f219f0_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_115fcc827510f38798b214d835c27637_Out_0 = _BaseTilingOffset;
            float _Property_d83b8f290862b285bbe2f157190e1315_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.uv0 = IN.uv0;
            float4 _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_e4c53213449c7682b60df6ae54f219f0_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2);
            float4 _Property_13c79aaf332e20868551d934a2cb7112_Out_0 = _BaseColor;
            float4 _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2, _Property_13c79aaf332e20868551d934a2cb7112_Out_0, _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2);
            UnityTexture2D _Property_b561c414493a8f8299227a27e437f045_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0 = _DetailTilingOffset;
            float _Split_cda27505033cfc8eaf60fe914f0949b9_R_1 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[0];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_G_2 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[1];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_B_3 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[2];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_A_4 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[3];
            float2 _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_R_1, _Split_cda27505033cfc8eaf60fe914f0949b9_G_2);
            float2 _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_B_3, _Split_cda27505033cfc8eaf60fe914f0949b9_A_4);
            float2 _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0, _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0, _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3);
            float4 _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0 = SAMPLE_TEXTURE2D(_Property_b561c414493a8f8299227a27e437f045_Out_0.tex, _Property_b561c414493a8f8299227a27e437f045_Out_0.samplerstate, _Property_b561c414493a8f8299227a27e437f045_Out_0.GetTransformedUV(_TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3));
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.r;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.g;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.b;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.a;
            float _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4, 2, _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2);
            float _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2;
            Unity_Add_float(_Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2, -1, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2);
            float _Property_02e7dd176dc59f8a9a62453677916b24_Out_0 = _DetailAlbedoScale;
            float _Multiply_fd406247e3137a8b8777918477740653_Out_2;
            Unity_Multiply_float_float(_Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Property_02e7dd176dc59f8a9a62453677916b24_Out_0, _Multiply_fd406247e3137a8b8777918477740653_Out_2);
            float _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1;
            Unity_Saturate_float(_Multiply_fd406247e3137a8b8777918477740653_Out_2, _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1);
            float _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1;
            Unity_Absolute_float(_Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73;
            float3 _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(_Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1);
            float _Split_1a45181d77ac838a90665f3132f6a4ef_R_1 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[0];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_G_2 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[1];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_B_3 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[2];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_A_4 = 0;
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_R_1 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[0];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_G_2 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[1];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_B_3 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[2];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[3];
            float _Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0 = float2(_Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0, _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0);
            float _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3;
            Unity_Remap_float(_Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4, float2 (0, 1), _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0, _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3);
            float _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6, 2, _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2);
            float _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2;
            Unity_Add_float(_Multiply_93138f23185e4d83b6825f8212653c3e_Out_2, -1, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2);
            float _Property_dadcc7446e5d388e9a6730406295f93a_Out_0 = _DetailSmoothnessScale;
            float _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2;
            Unity_Multiply_float_float(_Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Property_dadcc7446e5d388e9a6730406295f93a_Out_0, _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2);
            float _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1;
            Unity_Saturate_float(_Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2, _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1);
            float _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1;
            Unity_Absolute_float(_Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7;
            float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1);
            float _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1);
            float4 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4;
            float3 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5;
            float2 _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6;
            Unity_Combine_float(_Split_1a45181d77ac838a90665f3132f6a4ef_R_1, _Split_1a45181d77ac838a90665f3132f6a4ef_G_2, _Split_1a45181d77ac838a90665f3132f6a4ef_B_3, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5, _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6);
            UnityTexture2D _Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0 = _CoverTilingOffset;
            float _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.uv0 = IN.uv0;
            float4 _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2);
            float4 _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0 = _CoverBaseColor;
            float4 _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2, _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0, _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2);
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[0];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[1];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[2];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_A_4 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[3];
            float _Split_7bf3828fa790d989ac06f803f35a2027_R_1 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[0];
            float _Split_7bf3828fa790d989ac06f803f35a2027_G_2 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[1];
            float _Split_7bf3828fa790d989ac06f803f35a2027_B_3 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[2];
            float _Split_7bf3828fa790d989ac06f803f35a2027_A_4 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[3];
            float _Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0 = float2(_Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0, _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0);
            float _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3;
            Unity_Remap_float(_Split_7bf3828fa790d989ac06f803f35a2027_A_4, float2 (0, 1), _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3);
            float4 _Combine_750b21380a24ad809d449001e091b966_RGBA_4;
            float3 _Combine_750b21380a24ad809d449001e091b966_RGB_5;
            float2 _Combine_750b21380a24ad809d449001e091b966_RG_6;
            Unity_Combine_float(_Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1, _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2, _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGB_5, _Combine_750b21380a24ad809d449001e091b966_RG_6);
            float _Property_9ff69c54111eb2859f741d093f22298f_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskA);
            float4 _UV_045cea9e82354980a778f44d92578382_Out_0 = IN.uv0;
            float4 _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0 = SAMPLE_TEXTURE2D(_Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.tex, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.samplerstate, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.GetTransformedUV((_UV_045cea9e82354980a778f44d92578382_Out_0.xy)));
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_R_4 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.r;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_G_5 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.g;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_B_6 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.b;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.a;
            float _Property_4e8240836843df81941cdf6cf2cdd638_Out_0 = _CoverMaskPower;
            float _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7, _Property_4e8240836843df81941cdf6cf2cdd638_Out_0, _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2);
            float _Clamp_030a7c32684c258084338456eaddc77a_Out_3;
            Unity_Clamp_float(_Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2, 0, 1, _Clamp_030a7c32684c258084338456eaddc77a_Out_3);
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_R_1 = IN.VertexColor[0];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2 = IN.VertexColor[1];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_B_3 = IN.VertexColor[2];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_A_4 = IN.VertexColor[3];
            float2 _Vector2_65060e9a9f687a89b68e32dc876be645_Out_0 = float2(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7, _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5);
            float2 _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2;
            Unity_Multiply_float2_float2(_Vector2_65060e9a9f687a89b68e32dc876be645_Out_0, float2(2, 2), _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2);
            float2 _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2;
            Unity_Add_float2(_Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2, float2(-1, -1), _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2);
            float _Property_08b99582093b36869beb5ea3d18e765d_Out_0 = _DetailNormalScale;
            float2 _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2;
            Unity_Multiply_float2_float2(_Add_98b310e19c5fa5899c39cc45969c15ea_Out_2, (_Property_08b99582093b36869beb5ea3d18e765d_Out_0.xx), _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2);
            float _Split_26c1e73f8436c78ebdae5b51365a072b_R_1 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[0];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_G_2 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[1];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_B_3 = 0;
            float _Split_26c1e73f8436c78ebdae5b51365a072b_A_4 = 0;
            float _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2;
            Unity_DotProduct_float2(_Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2);
            float _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1;
            Unity_Saturate_float(_DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2, _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1);
            float _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1;
            Unity_OneMinus_float(_Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1, _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1);
            float _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1;
            Unity_SquareRoot_float(_OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            float3 _Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0 = float3(_Split_26c1e73f8436c78ebdae5b51365a072b_R_1, _Split_26c1e73f8436c78ebdae5b51365a072b_G_2, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            UnityTexture2D _Property_2cc39234d3d334899f94126a216a50fc_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.uv0 = IN.uv0;
            float4 _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_2cc39234d3d334899f94126a216a50fc_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2);
            float _Property_020d569f63e9a2849e23988ff74eb005_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2.xyz), _Property_020d569f63e9a2849e23988ff74eb005_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2);
            float3 _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2;
            Unity_NormalBlend_float(_Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2, _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2);
            UnityTexture2D _Property_a383045772822c87acd099bb4cd6c478_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_79abde32a0223a89907c9f09efac8db7;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.uv0 = IN.uv0;
            float4 _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_a383045772822c87acd099bb4cd6c478_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNMn_79abde32a0223a89907c9f09efac8db7, _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2);
            float _Property_c688e246111fd881820a97415e14d8a3_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_c688e246111fd881820a97415e14d8a3_Out_0, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2);
            float _Split_8cadce726725318fbacd47f436a8231d_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8cadce726725318fbacd47f436a8231d_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8cadce726725318fbacd47f436a8231d_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8cadce726725318fbacd47f436a8231d_A_4 = 0;
            float _Property_ce4e5954a0b7ff8c819fa53963327595_Out_0 = _Cover_Amount;
            float _Property_384059e6344fb98a85eccad78dd82f36_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2;
            Unity_Subtract_float(4, _Property_384059e6344fb98a85eccad78dd82f36_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2);
            float _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2;
            Unity_Divide_float(_Property_ce4e5954a0b7ff8c819fa53963327595_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2);
            float _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1;
            Unity_Absolute_float(_Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2, _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1);
            float _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2;
            Unity_Power_float(_Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2);
            float _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3;
            Unity_Clamp_float(_Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2, 0, 2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3);
            float _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2;
            Unity_Multiply_float_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2);
            float _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1;
            Unity_Saturate_float(_Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2, _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1);
            float _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3;
            Unity_Clamp_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, 0, 0.9999, _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3);
            float _Property_9babc76177853482826cae0163ffe988_Out_0 = _Cover_Max_Angle;
            float _Divide_3b22550205905d8da5870f9db56e44ff_Out_2;
            Unity_Divide_float(_Property_9babc76177853482826cae0163ffe988_Out_0, 45, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2);
            float _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1;
            Unity_OneMinus_float(_Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1);
            float _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2;
            Unity_Subtract_float(_Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1, _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2);
            float _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3;
            Unity_Clamp_float(_Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2, 0, 2, _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3);
            float _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2;
            Unity_Divide_float(1, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2);
            float _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2;
            Unity_Multiply_float_float(_Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2, _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2);
            float _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1;
            Unity_Absolute_float(_Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2, _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1);
            float _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0 = _CoverHardness;
            float _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2;
            Unity_Power_float(_Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2);
            float _Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0 = _Cover_Min_Height;
            float _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1;
            Unity_OneMinus_float(_Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0, _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1);
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_A_4 = 0;
            float _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2;
            Unity_Add_float(_OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1, _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2);
            float _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, 1, _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2);
            float _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3;
            Unity_Clamp_float(_Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2, 0, 1, _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3);
            float _Property_5da709b259ac268bb134d927bcffa4b8_Out_0 = _Cover_Min_Height_Blending;
            float _Add_c322347d9ddbcd83ba52983e9316c387_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Property_5da709b259ac268bb134d927bcffa4b8_Out_0, _Add_c322347d9ddbcd83ba52983e9316c387_Out_2);
            float _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2;
            Unity_Divide_float(_Add_c322347d9ddbcd83ba52983e9316c387_Out_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2);
            float _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1;
            Unity_OneMinus_float(_Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2, _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1);
            float _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2;
            Unity_Add_float(_OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1, -0.5, _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2);
            float _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3;
            Unity_Clamp_float(_Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2, 0, 1, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3);
            float _Add_674fcef023d728848510150af810a103_Out_2;
            Unity_Add_float(_Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3, _Add_674fcef023d728848510150af810a103_Out_2);
            float _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3;
            Unity_Clamp_float(_Add_674fcef023d728848510150af810a103_Out_2, 0, 1, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3);
            float _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2;
            Unity_Multiply_float_float(_Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2);
            float _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2;
            Unity_Multiply_float_float(_Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2);
            float3 _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2, (_Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2.xxx), _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3);
            float3x3 Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1 = normalize(mul(Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent, _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3.xyz).xyz);
            float _Split_600a9d271d96798a94ab28118977defd_R_1 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[0];
            float _Split_600a9d271d96798a94ab28118977defd_G_2 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[1];
            float _Split_600a9d271d96798a94ab28118977defd_B_3 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[2];
            float _Split_600a9d271d96798a94ab28118977defd_A_4 = 0;
            float _Multiply_2e5b010626435f8492a2690396ced19d_Out_2;
            Unity_Multiply_float_float(_Split_600a9d271d96798a94ab28118977defd_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_2e5b010626435f8492a2690396ced19d_Out_2);
            float _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2;
            Unity_Multiply_float_float(_Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2);
            float _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2;
            Unity_Multiply_float_float(_Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2);
            float _Multiply_05614e740451f18f8301586390aa5a0a_Out_2;
            Unity_Multiply_float_float(_Multiply_2e5b010626435f8492a2690396ced19d_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2, _Multiply_05614e740451f18f8301586390aa5a0a_Out_2);
            UnityTexture2D _Property_a14f2476a35d208b988233c852f919ef_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6858a0e821f26a8d87846d325e9bd170;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.uv0 = IN.uv0;
            float4 _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a14f2476a35d208b988233c852f919ef_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_6858a0e821f26a8d87846d325e9bd170, _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2);
            float _Split_16313c20ccdeaa86a639068877a69a2f_R_1 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[0];
            float _Split_16313c20ccdeaa86a639068877a69a2f_G_2 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[1];
            float _Split_16313c20ccdeaa86a639068877a69a2f_B_3 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[2];
            float _Split_16313c20ccdeaa86a639068877a69a2f_A_4 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[3];
            float _Property_673896519f419589938b37e782b90141_Out_0 = _CoverHeightMapMin;
            float _Property_c35906332422438da3b19f45cbd5ac17_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0 = float2(_Property_673896519f419589938b37e782b90141_Out_0, _Property_c35906332422438da3b19f45cbd5ac17_Out_0);
            float _Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0 = _CoverHeightMapOffset;
            float2 _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2;
            Unity_Add_float2(_Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0, (_Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0.xx), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2);
            float _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_B_3, float2 (0, 1), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3);
            float _Multiply_0093be0fd848498b89a0fa282608e715_Out_2;
            Unity_Multiply_float_float(_Multiply_05614e740451f18f8301586390aa5a0a_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2);
            float _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2;
            Unity_Multiply_float_float(_Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2, _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2);
            float _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1;
            Unity_Saturate_float(_Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1);
            float _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2;
            Unity_Multiply_float_float(_Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1, _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2);
            float _Clamp_c95f5515948375878df6581a36d8b203_Out_3;
            Unity_Clamp_float(_Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2, 0, 1, _Clamp_c95f5515948375878df6581a36d8b203_Out_3);
            float _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3;
            Unity_Branch_float(_Property_9ff69c54111eb2859f741d093f22298f_Out_0, _Clamp_c95f5515948375878df6581a36d8b203_Out_3, _Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3);
            float4 _Lerp_87882219e20a6d818c0de017d739125f_Out_3;
            Unity_Lerp_float4(_Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxxx), _Lerp_87882219e20a6d818c0de017d739125f_Out_3);
            UnityTexture2D _Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d26fd10040332c89b94151832fa36c95;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.uv0 = IN.uv0;
            float4 _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_d26fd10040332c89b94151832fa36c95, _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2);
            float _Split_c8dcaee88e16428ab476271a494e0946_R_1 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[0];
            float _Split_c8dcaee88e16428ab476271a494e0946_G_2 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[1];
            float _Split_c8dcaee88e16428ab476271a494e0946_B_3 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[2];
            float _Split_c8dcaee88e16428ab476271a494e0946_A_4 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[3];
            float _Split_81540eba4304c9878d445ae2aad30a44_R_1 = IN.VertexColor[0];
            float _Split_81540eba4304c9878d445ae2aad30a44_G_2 = IN.VertexColor[1];
            float _Split_81540eba4304c9878d445ae2aad30a44_B_3 = IN.VertexColor[2];
            float _Split_81540eba4304c9878d445ae2aad30a44_A_4 = IN.VertexColor[3];
            float _OneMinus_106edffa8269d28e944c403917c0be93_Out_1;
            Unity_OneMinus_float(_Split_81540eba4304c9878d445ae2aad30a44_R_1, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1);
            float _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3;
            Unity_Lerp_float(0, _Split_c8dcaee88e16428ab476271a494e0946_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3);
            float _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2;
            Unity_Multiply_float_float(_Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3, _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0, _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2);
            float _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1;
            Unity_Absolute_float(_Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2, _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1);
            float _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2;
            Unity_Power_float(_Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1, _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0, _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2);
            float _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3;
            Unity_Lerp_float(0, _Split_16313c20ccdeaa86a639068877a69a2f_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3);
            float _Property_cc11b329366008849094e720bdbaad9e_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2;
            Unity_Multiply_float_float(_Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3, _Property_cc11b329366008849094e720bdbaad9e_Out_0, _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2);
            float _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1;
            Unity_Absolute_float(_Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2, _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1);
            float _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_d2f191850ca06f829281d27846b9292a_Out_2;
            Unity_Power_float(_Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1, _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0, _Power_d2f191850ca06f829281d27846b9292a_Out_2);
            float _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3;
            Unity_Lerp_float(_Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2, _Power_d2f191850ca06f829281d27846b9292a_Out_2, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3, _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3);
            float4 _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0, _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2);
            UnityTexture2D _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0 = IN.uv0;
            float2 _Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0 = _NoiseSpeed;
            float2 _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2;
            Unity_Multiply_float2_float2(_Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0, (IN.TimeParameters.x.xx), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2);
            float2 _Add_46357740be2d5a86b5151c5767993e4e_Out_2;
            Unity_Add_float2((_UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0.xy), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2, _Add_46357740be2d5a86b5151c5767993e4e_Out_2);
            float4 _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_46357740be2d5a86b5151c5767993e4e_Out_2));
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_R_4 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.r;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_G_5 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.g;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_B_6 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.b;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.a;
            float2 _Multiply_a2232bab274ab88289a3628364da60c7_Out_2;
            Unity_Multiply_float2_float2(_Add_46357740be2d5a86b5151c5767993e4e_Out_2, float2(-1.2, -0.9), _Multiply_a2232bab274ab88289a3628364da60c7_Out_2);
            float2 _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2;
            Unity_Add_float2(_Multiply_a2232bab274ab88289a3628364da60c7_Out_2, float2(0.5, 0.5), _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2);
            float4 _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2));
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_R_4 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.r;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_G_5 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.g;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_B_6 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.b;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.a;
            float _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2;
            Unity_Minimum_float(_SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7, _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7, _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2);
            float _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1;
            Unity_Absolute_float(_Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2, _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1);
            float _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0 = _EmissionNoisePower;
            float _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2;
            Unity_Power_float(_Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1, _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0, _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2);
            float _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2;
            Unity_Multiply_float_float(_Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2, 20, _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2);
            float _Clamp_943869501048178fbb848b437df184e8_Out_3;
            Unity_Clamp_float(_Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2, 0.05, 1.2, _Clamp_943869501048178fbb848b437df184e8_Out_3);
            float4 _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2;
            Unity_Multiply_float4_float4(_Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2, (_Clamp_943869501048178fbb848b437df184e8_Out_3.xxxx), _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2);
            float4 _Property_1734859c1389ab848dc4063320d66a5d_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_486692dad4d34a8c8410b4771efbf96b_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d60a055f00d779808337e9d909827806_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_486692dad4d34a8c8410b4771efbf96b_Out_0, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2);
            float3 _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3);
            float3 _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1);
            float _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2;
            Unity_DotProduct_float3(_Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1, _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2);
            float _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1;
            Unity_Saturate_float(_DotProduct_845cf97598838e8198e9075e45be98c8_Out_2, _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1);
            float _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1;
            Unity_OneMinus_float(_Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1, _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1);
            float _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1;
            Unity_Absolute_float(_OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1, _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1);
            float _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2;
            Unity_Power_float(_Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1, 10, _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2);
            float4 _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2;
            Unity_Multiply_float4_float4(_Property_1734859c1389ab848dc4063320d66a5d_Out_0, (_Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2.xxxx), _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2);
            float _Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0 = _RimLightPower;
            float4 _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2;
            Unity_Multiply_float4_float4(_Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2, (_Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2);
            float4 _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2);
            float4 _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2;
            Unity_Add_float4(_Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2, _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2);
            float4 _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3;
            Unity_Clamp_float4(_Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, float4(0, 0, 0, 0), _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3);
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_R_1 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[0];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_G_2 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[1];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_B_3 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[2];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[3];
            float _Property_06c41396a31ba582877d3a10387f69e6_Out_0 = _BaseMetallic;
            float _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2;
            Unity_Multiply_float_float(_Split_c8dcaee88e16428ab476271a494e0946_R_1, _Property_06c41396a31ba582877d3a10387f69e6_Out_0, _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2);
            float _Property_2dbdbebc756fb1819344efcc68c07d00_Out_0 = _BaseAORemapMin;
            float _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0 = _BaseAORemapMax;
            float2 _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0 = float2(_Property_2dbdbebc756fb1819344efcc68c07d00_Out_0, _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0);
            float _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3;
            Unity_Remap_float(_Split_c8dcaee88e16428ab476271a494e0946_G_2, float2 (0, 1), _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3);
            float3 _Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0 = float3(_Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3, 0);
            float _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0 = _CoverMetallic;
            float _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2;
            Unity_Multiply_float_float(_Split_16313c20ccdeaa86a639068877a69a2f_R_1, _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0, _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2);
            float _Property_2696a3815c73848db1c5516a77ad7e3e_Out_0 = _CoverAORemapMin;
            float _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0 = _CoverAORemapMax;
            float2 _Vector2_6f054e667fb031849116087b7663e8de_Out_0 = float2(_Property_2696a3815c73848db1c5516a77ad7e3e_Out_0, _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0);
            float _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_G_2, float2 (0, 1), _Vector2_6f054e667fb031849116087b7663e8de_Out_0, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3);
            float3 _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0 = float3(_Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3, 0);
            float3 _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3;
            Unity_Lerp_float3(_Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0, _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3);
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[0];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[1];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_B_3 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[2];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_A_4 = 0;
            surface.BaseColor = (_Lerp_87882219e20a6d818c0de017d739125f_Out_3.xyz);
            surface.Emission = (_Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4;
            surface.Occlusion = _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2;
            surface.NormalTS = _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            surface.Metallic = _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord1 =                  input.texCoord1;
            output.texCoord2 =                  input.texCoord2;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassMotionVectors.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "TransparentDepthPrepass"
            Tags
            {
                "LightMode" = "TransparentDepthPrepass"
            }
        
            // Render State
            Cull [_CullMode]
        Blend One Zero
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskDepth]
        Ref [_StencilRefDepth]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_TRANSPARENT_DEPTH_PREPASS
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _CoverMaskA_TexelSize;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float _CoverUsePlanarUV;
        float4 _CoverTilingOffset;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float _CoverEmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float4 _Noise_TexelSize;
        float2 _NoiseTiling;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_CoverMaskA);
        SAMPLER(sampler_CoverMaskA);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Lava_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options renderinglayer procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float
        {
        };
        
        void SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(float3 Vector3_314C8600, Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63;
            float3 _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1;
            SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(IN.ObjectSpacePosition, _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63, _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1);
            description.Position = _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float Alpha;
            float3 NormalTS;
            float Smoothness;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_b561c414493a8f8299227a27e437f045_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0 = _DetailTilingOffset;
            float _Split_cda27505033cfc8eaf60fe914f0949b9_R_1 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[0];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_G_2 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[1];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_B_3 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[2];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_A_4 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[3];
            float2 _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_R_1, _Split_cda27505033cfc8eaf60fe914f0949b9_G_2);
            float2 _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_B_3, _Split_cda27505033cfc8eaf60fe914f0949b9_A_4);
            float2 _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0, _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0, _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3);
            float4 _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0 = SAMPLE_TEXTURE2D(_Property_b561c414493a8f8299227a27e437f045_Out_0.tex, _Property_b561c414493a8f8299227a27e437f045_Out_0.samplerstate, _Property_b561c414493a8f8299227a27e437f045_Out_0.GetTransformedUV(_TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3));
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.r;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.g;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.b;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.a;
            float2 _Vector2_65060e9a9f687a89b68e32dc876be645_Out_0 = float2(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7, _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5);
            float2 _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2;
            Unity_Multiply_float2_float2(_Vector2_65060e9a9f687a89b68e32dc876be645_Out_0, float2(2, 2), _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2);
            float2 _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2;
            Unity_Add_float2(_Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2, float2(-1, -1), _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2);
            float _Property_08b99582093b36869beb5ea3d18e765d_Out_0 = _DetailNormalScale;
            float2 _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2;
            Unity_Multiply_float2_float2(_Add_98b310e19c5fa5899c39cc45969c15ea_Out_2, (_Property_08b99582093b36869beb5ea3d18e765d_Out_0.xx), _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2);
            float _Split_26c1e73f8436c78ebdae5b51365a072b_R_1 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[0];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_G_2 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[1];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_B_3 = 0;
            float _Split_26c1e73f8436c78ebdae5b51365a072b_A_4 = 0;
            float _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2;
            Unity_DotProduct_float2(_Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2);
            float _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1;
            Unity_Saturate_float(_DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2, _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1);
            float _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1;
            Unity_OneMinus_float(_Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1, _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1);
            float _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1;
            Unity_SquareRoot_float(_OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            float3 _Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0 = float3(_Split_26c1e73f8436c78ebdae5b51365a072b_R_1, _Split_26c1e73f8436c78ebdae5b51365a072b_G_2, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            UnityTexture2D _Property_2cc39234d3d334899f94126a216a50fc_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            float4 _Property_115fcc827510f38798b214d835c27637_Out_0 = _BaseTilingOffset;
            float _Property_d83b8f290862b285bbe2f157190e1315_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.uv0 = IN.uv0;
            float4 _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_2cc39234d3d334899f94126a216a50fc_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2);
            float _Property_020d569f63e9a2849e23988ff74eb005_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2.xyz), _Property_020d569f63e9a2849e23988ff74eb005_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2);
            float3 _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2;
            Unity_NormalBlend_float(_Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2, _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2);
            UnityTexture2D _Property_a383045772822c87acd099bb4cd6c478_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            float4 _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0 = _CoverTilingOffset;
            float _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_79abde32a0223a89907c9f09efac8db7;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.uv0 = IN.uv0;
            float4 _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_a383045772822c87acd099bb4cd6c478_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNMn_79abde32a0223a89907c9f09efac8db7, _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2);
            float _Property_486692dad4d34a8c8410b4771efbf96b_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d60a055f00d779808337e9d909827806_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_486692dad4d34a8c8410b4771efbf96b_Out_0, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2);
            float _Property_9ff69c54111eb2859f741d093f22298f_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskA);
            float4 _UV_045cea9e82354980a778f44d92578382_Out_0 = IN.uv0;
            float4 _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0 = SAMPLE_TEXTURE2D(_Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.tex, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.samplerstate, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.GetTransformedUV((_UV_045cea9e82354980a778f44d92578382_Out_0.xy)));
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_R_4 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.r;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_G_5 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.g;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_B_6 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.b;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.a;
            float _Property_4e8240836843df81941cdf6cf2cdd638_Out_0 = _CoverMaskPower;
            float _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7, _Property_4e8240836843df81941cdf6cf2cdd638_Out_0, _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2);
            float _Clamp_030a7c32684c258084338456eaddc77a_Out_3;
            Unity_Clamp_float(_Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2, 0, 1, _Clamp_030a7c32684c258084338456eaddc77a_Out_3);
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_R_1 = IN.VertexColor[0];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2 = IN.VertexColor[1];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_B_3 = IN.VertexColor[2];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_A_4 = IN.VertexColor[3];
            float _Property_c688e246111fd881820a97415e14d8a3_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_c688e246111fd881820a97415e14d8a3_Out_0, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2);
            float _Split_8cadce726725318fbacd47f436a8231d_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8cadce726725318fbacd47f436a8231d_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8cadce726725318fbacd47f436a8231d_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8cadce726725318fbacd47f436a8231d_A_4 = 0;
            float _Property_ce4e5954a0b7ff8c819fa53963327595_Out_0 = _Cover_Amount;
            float _Property_384059e6344fb98a85eccad78dd82f36_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2;
            Unity_Subtract_float(4, _Property_384059e6344fb98a85eccad78dd82f36_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2);
            float _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2;
            Unity_Divide_float(_Property_ce4e5954a0b7ff8c819fa53963327595_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2);
            float _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1;
            Unity_Absolute_float(_Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2, _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1);
            float _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2;
            Unity_Power_float(_Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2);
            float _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3;
            Unity_Clamp_float(_Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2, 0, 2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3);
            float _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2;
            Unity_Multiply_float_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2);
            float _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1;
            Unity_Saturate_float(_Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2, _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1);
            float _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3;
            Unity_Clamp_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, 0, 0.9999, _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3);
            float _Property_9babc76177853482826cae0163ffe988_Out_0 = _Cover_Max_Angle;
            float _Divide_3b22550205905d8da5870f9db56e44ff_Out_2;
            Unity_Divide_float(_Property_9babc76177853482826cae0163ffe988_Out_0, 45, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2);
            float _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1;
            Unity_OneMinus_float(_Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1);
            float _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2;
            Unity_Subtract_float(_Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1, _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2);
            float _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3;
            Unity_Clamp_float(_Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2, 0, 2, _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3);
            float _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2;
            Unity_Divide_float(1, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2);
            float _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2;
            Unity_Multiply_float_float(_Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2, _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2);
            float _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1;
            Unity_Absolute_float(_Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2, _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1);
            float _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0 = _CoverHardness;
            float _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2;
            Unity_Power_float(_Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2);
            float _Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0 = _Cover_Min_Height;
            float _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1;
            Unity_OneMinus_float(_Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0, _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1);
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_A_4 = 0;
            float _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2;
            Unity_Add_float(_OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1, _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2);
            float _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, 1, _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2);
            float _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3;
            Unity_Clamp_float(_Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2, 0, 1, _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3);
            float _Property_5da709b259ac268bb134d927bcffa4b8_Out_0 = _Cover_Min_Height_Blending;
            float _Add_c322347d9ddbcd83ba52983e9316c387_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Property_5da709b259ac268bb134d927bcffa4b8_Out_0, _Add_c322347d9ddbcd83ba52983e9316c387_Out_2);
            float _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2;
            Unity_Divide_float(_Add_c322347d9ddbcd83ba52983e9316c387_Out_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2);
            float _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1;
            Unity_OneMinus_float(_Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2, _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1);
            float _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2;
            Unity_Add_float(_OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1, -0.5, _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2);
            float _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3;
            Unity_Clamp_float(_Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2, 0, 1, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3);
            float _Add_674fcef023d728848510150af810a103_Out_2;
            Unity_Add_float(_Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3, _Add_674fcef023d728848510150af810a103_Out_2);
            float _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3;
            Unity_Clamp_float(_Add_674fcef023d728848510150af810a103_Out_2, 0, 1, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3);
            float _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2;
            Unity_Multiply_float_float(_Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2);
            float _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2;
            Unity_Multiply_float_float(_Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2);
            float3 _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2, (_Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2.xxx), _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3);
            float3x3 Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1 = normalize(mul(Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent, _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3.xyz).xyz);
            float _Split_600a9d271d96798a94ab28118977defd_R_1 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[0];
            float _Split_600a9d271d96798a94ab28118977defd_G_2 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[1];
            float _Split_600a9d271d96798a94ab28118977defd_B_3 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[2];
            float _Split_600a9d271d96798a94ab28118977defd_A_4 = 0;
            float _Multiply_2e5b010626435f8492a2690396ced19d_Out_2;
            Unity_Multiply_float_float(_Split_600a9d271d96798a94ab28118977defd_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_2e5b010626435f8492a2690396ced19d_Out_2);
            float _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2;
            Unity_Multiply_float_float(_Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2);
            float _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2;
            Unity_Multiply_float_float(_Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2);
            float _Multiply_05614e740451f18f8301586390aa5a0a_Out_2;
            Unity_Multiply_float_float(_Multiply_2e5b010626435f8492a2690396ced19d_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2, _Multiply_05614e740451f18f8301586390aa5a0a_Out_2);
            UnityTexture2D _Property_a14f2476a35d208b988233c852f919ef_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6858a0e821f26a8d87846d325e9bd170;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.uv0 = IN.uv0;
            float4 _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a14f2476a35d208b988233c852f919ef_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_6858a0e821f26a8d87846d325e9bd170, _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2);
            float _Split_16313c20ccdeaa86a639068877a69a2f_R_1 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[0];
            float _Split_16313c20ccdeaa86a639068877a69a2f_G_2 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[1];
            float _Split_16313c20ccdeaa86a639068877a69a2f_B_3 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[2];
            float _Split_16313c20ccdeaa86a639068877a69a2f_A_4 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[3];
            float _Property_673896519f419589938b37e782b90141_Out_0 = _CoverHeightMapMin;
            float _Property_c35906332422438da3b19f45cbd5ac17_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0 = float2(_Property_673896519f419589938b37e782b90141_Out_0, _Property_c35906332422438da3b19f45cbd5ac17_Out_0);
            float _Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0 = _CoverHeightMapOffset;
            float2 _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2;
            Unity_Add_float2(_Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0, (_Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0.xx), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2);
            float _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_B_3, float2 (0, 1), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3);
            float _Multiply_0093be0fd848498b89a0fa282608e715_Out_2;
            Unity_Multiply_float_float(_Multiply_05614e740451f18f8301586390aa5a0a_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2);
            float _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2;
            Unity_Multiply_float_float(_Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2, _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2);
            float _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1;
            Unity_Saturate_float(_Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1);
            float _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2;
            Unity_Multiply_float_float(_Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1, _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2);
            float _Clamp_c95f5515948375878df6581a36d8b203_Out_3;
            Unity_Clamp_float(_Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2, 0, 1, _Clamp_c95f5515948375878df6581a36d8b203_Out_3);
            float _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3;
            Unity_Branch_float(_Property_9ff69c54111eb2859f741d093f22298f_Out_0, _Clamp_c95f5515948375878df6581a36d8b203_Out_3, _Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3);
            float3 _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3);
            UnityTexture2D _Property_e4c53213449c7682b60df6ae54f219f0_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.uv0 = IN.uv0;
            float4 _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_e4c53213449c7682b60df6ae54f219f0_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2);
            float4 _Property_13c79aaf332e20868551d934a2cb7112_Out_0 = _BaseColor;
            float4 _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2, _Property_13c79aaf332e20868551d934a2cb7112_Out_0, _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2);
            float _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4, 2, _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2);
            float _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2;
            Unity_Add_float(_Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2, -1, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2);
            float _Property_02e7dd176dc59f8a9a62453677916b24_Out_0 = _DetailAlbedoScale;
            float _Multiply_fd406247e3137a8b8777918477740653_Out_2;
            Unity_Multiply_float_float(_Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Property_02e7dd176dc59f8a9a62453677916b24_Out_0, _Multiply_fd406247e3137a8b8777918477740653_Out_2);
            float _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1;
            Unity_Saturate_float(_Multiply_fd406247e3137a8b8777918477740653_Out_2, _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1);
            float _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1;
            Unity_Absolute_float(_Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73;
            float3 _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(_Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1);
            float _Split_1a45181d77ac838a90665f3132f6a4ef_R_1 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[0];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_G_2 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[1];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_B_3 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[2];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_A_4 = 0;
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_R_1 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[0];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_G_2 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[1];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_B_3 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[2];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[3];
            float _Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0 = float2(_Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0, _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0);
            float _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3;
            Unity_Remap_float(_Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4, float2 (0, 1), _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0, _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3);
            float _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6, 2, _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2);
            float _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2;
            Unity_Add_float(_Multiply_93138f23185e4d83b6825f8212653c3e_Out_2, -1, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2);
            float _Property_dadcc7446e5d388e9a6730406295f93a_Out_0 = _DetailSmoothnessScale;
            float _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2;
            Unity_Multiply_float_float(_Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Property_dadcc7446e5d388e9a6730406295f93a_Out_0, _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2);
            float _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1;
            Unity_Saturate_float(_Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2, _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1);
            float _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1;
            Unity_Absolute_float(_Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7;
            float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1);
            float _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1);
            float4 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4;
            float3 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5;
            float2 _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6;
            Unity_Combine_float(_Split_1a45181d77ac838a90665f3132f6a4ef_R_1, _Split_1a45181d77ac838a90665f3132f6a4ef_G_2, _Split_1a45181d77ac838a90665f3132f6a4ef_B_3, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5, _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6);
            UnityTexture2D _Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.uv0 = IN.uv0;
            float4 _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2);
            float4 _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0 = _CoverBaseColor;
            float4 _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2, _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0, _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2);
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[0];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[1];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[2];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_A_4 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[3];
            float _Split_7bf3828fa790d989ac06f803f35a2027_R_1 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[0];
            float _Split_7bf3828fa790d989ac06f803f35a2027_G_2 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[1];
            float _Split_7bf3828fa790d989ac06f803f35a2027_B_3 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[2];
            float _Split_7bf3828fa790d989ac06f803f35a2027_A_4 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[3];
            float _Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0 = float2(_Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0, _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0);
            float _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3;
            Unity_Remap_float(_Split_7bf3828fa790d989ac06f803f35a2027_A_4, float2 (0, 1), _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3);
            float4 _Combine_750b21380a24ad809d449001e091b966_RGBA_4;
            float3 _Combine_750b21380a24ad809d449001e091b966_RGB_5;
            float2 _Combine_750b21380a24ad809d449001e091b966_RG_6;
            Unity_Combine_float(_Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1, _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2, _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGB_5, _Combine_750b21380a24ad809d449001e091b966_RG_6);
            float4 _Lerp_87882219e20a6d818c0de017d739125f_Out_3;
            Unity_Lerp_float4(_Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxxx), _Lerp_87882219e20a6d818c0de017d739125f_Out_3);
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_R_1 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[0];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_G_2 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[1];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_B_3 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[2];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[3];
            surface.Alpha = 1;
            surface.NormalTS = _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            surface.Smoothness = _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "FullScreenDebug"
            Tags
            {
                "LightMode" = "FullScreenDebug"
            }
        
            // Render State
            Cull [_CullMode]
        ZTest LEqual
        ZWrite Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_FULL_SCREEN_DEBUG
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _CoverMaskA_TexelSize;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float _CoverUsePlanarUV;
        float4 _CoverTilingOffset;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float _CoverEmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float4 _Noise_TexelSize;
        float2 _NoiseTiling;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_CoverMaskA);
        SAMPLER(sampler_CoverMaskA);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Lava_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options renderinglayer procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float
        {
        };
        
        void SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(float3 Vector3_314C8600, Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63;
            float3 _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1;
            SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(IN.ObjectSpacePosition, _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63, _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1);
            description.Position = _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_e4c53213449c7682b60df6ae54f219f0_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_115fcc827510f38798b214d835c27637_Out_0 = _BaseTilingOffset;
            float _Property_d83b8f290862b285bbe2f157190e1315_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.uv0 = IN.uv0;
            float4 _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_e4c53213449c7682b60df6ae54f219f0_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2);
            float4 _Property_13c79aaf332e20868551d934a2cb7112_Out_0 = _BaseColor;
            float4 _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2, _Property_13c79aaf332e20868551d934a2cb7112_Out_0, _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2);
            UnityTexture2D _Property_b561c414493a8f8299227a27e437f045_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0 = _DetailTilingOffset;
            float _Split_cda27505033cfc8eaf60fe914f0949b9_R_1 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[0];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_G_2 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[1];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_B_3 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[2];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_A_4 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[3];
            float2 _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_R_1, _Split_cda27505033cfc8eaf60fe914f0949b9_G_2);
            float2 _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_B_3, _Split_cda27505033cfc8eaf60fe914f0949b9_A_4);
            float2 _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0, _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0, _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3);
            float4 _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0 = SAMPLE_TEXTURE2D(_Property_b561c414493a8f8299227a27e437f045_Out_0.tex, _Property_b561c414493a8f8299227a27e437f045_Out_0.samplerstate, _Property_b561c414493a8f8299227a27e437f045_Out_0.GetTransformedUV(_TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3));
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.r;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.g;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.b;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.a;
            float _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4, 2, _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2);
            float _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2;
            Unity_Add_float(_Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2, -1, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2);
            float _Property_02e7dd176dc59f8a9a62453677916b24_Out_0 = _DetailAlbedoScale;
            float _Multiply_fd406247e3137a8b8777918477740653_Out_2;
            Unity_Multiply_float_float(_Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Property_02e7dd176dc59f8a9a62453677916b24_Out_0, _Multiply_fd406247e3137a8b8777918477740653_Out_2);
            float _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1;
            Unity_Saturate_float(_Multiply_fd406247e3137a8b8777918477740653_Out_2, _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1);
            float _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1;
            Unity_Absolute_float(_Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73;
            float3 _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(_Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1);
            float _Split_1a45181d77ac838a90665f3132f6a4ef_R_1 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[0];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_G_2 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[1];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_B_3 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[2];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_A_4 = 0;
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_R_1 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[0];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_G_2 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[1];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_B_3 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[2];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[3];
            float _Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0 = float2(_Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0, _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0);
            float _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3;
            Unity_Remap_float(_Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4, float2 (0, 1), _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0, _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3);
            float _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6, 2, _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2);
            float _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2;
            Unity_Add_float(_Multiply_93138f23185e4d83b6825f8212653c3e_Out_2, -1, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2);
            float _Property_dadcc7446e5d388e9a6730406295f93a_Out_0 = _DetailSmoothnessScale;
            float _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2;
            Unity_Multiply_float_float(_Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Property_dadcc7446e5d388e9a6730406295f93a_Out_0, _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2);
            float _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1;
            Unity_Saturate_float(_Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2, _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1);
            float _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1;
            Unity_Absolute_float(_Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7;
            float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1);
            float _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1);
            float4 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4;
            float3 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5;
            float2 _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6;
            Unity_Combine_float(_Split_1a45181d77ac838a90665f3132f6a4ef_R_1, _Split_1a45181d77ac838a90665f3132f6a4ef_G_2, _Split_1a45181d77ac838a90665f3132f6a4ef_B_3, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5, _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6);
            UnityTexture2D _Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0 = _CoverTilingOffset;
            float _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.uv0 = IN.uv0;
            float4 _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2);
            float4 _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0 = _CoverBaseColor;
            float4 _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2, _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0, _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2);
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[0];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[1];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[2];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_A_4 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[3];
            float _Split_7bf3828fa790d989ac06f803f35a2027_R_1 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[0];
            float _Split_7bf3828fa790d989ac06f803f35a2027_G_2 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[1];
            float _Split_7bf3828fa790d989ac06f803f35a2027_B_3 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[2];
            float _Split_7bf3828fa790d989ac06f803f35a2027_A_4 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[3];
            float _Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0 = float2(_Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0, _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0);
            float _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3;
            Unity_Remap_float(_Split_7bf3828fa790d989ac06f803f35a2027_A_4, float2 (0, 1), _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3);
            float4 _Combine_750b21380a24ad809d449001e091b966_RGBA_4;
            float3 _Combine_750b21380a24ad809d449001e091b966_RGB_5;
            float2 _Combine_750b21380a24ad809d449001e091b966_RG_6;
            Unity_Combine_float(_Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1, _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2, _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGB_5, _Combine_750b21380a24ad809d449001e091b966_RG_6);
            float _Property_9ff69c54111eb2859f741d093f22298f_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskA);
            float4 _UV_045cea9e82354980a778f44d92578382_Out_0 = IN.uv0;
            float4 _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0 = SAMPLE_TEXTURE2D(_Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.tex, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.samplerstate, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.GetTransformedUV((_UV_045cea9e82354980a778f44d92578382_Out_0.xy)));
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_R_4 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.r;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_G_5 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.g;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_B_6 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.b;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.a;
            float _Property_4e8240836843df81941cdf6cf2cdd638_Out_0 = _CoverMaskPower;
            float _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7, _Property_4e8240836843df81941cdf6cf2cdd638_Out_0, _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2);
            float _Clamp_030a7c32684c258084338456eaddc77a_Out_3;
            Unity_Clamp_float(_Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2, 0, 1, _Clamp_030a7c32684c258084338456eaddc77a_Out_3);
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_R_1 = IN.VertexColor[0];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2 = IN.VertexColor[1];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_B_3 = IN.VertexColor[2];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_A_4 = IN.VertexColor[3];
            float2 _Vector2_65060e9a9f687a89b68e32dc876be645_Out_0 = float2(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7, _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5);
            float2 _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2;
            Unity_Multiply_float2_float2(_Vector2_65060e9a9f687a89b68e32dc876be645_Out_0, float2(2, 2), _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2);
            float2 _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2;
            Unity_Add_float2(_Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2, float2(-1, -1), _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2);
            float _Property_08b99582093b36869beb5ea3d18e765d_Out_0 = _DetailNormalScale;
            float2 _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2;
            Unity_Multiply_float2_float2(_Add_98b310e19c5fa5899c39cc45969c15ea_Out_2, (_Property_08b99582093b36869beb5ea3d18e765d_Out_0.xx), _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2);
            float _Split_26c1e73f8436c78ebdae5b51365a072b_R_1 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[0];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_G_2 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[1];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_B_3 = 0;
            float _Split_26c1e73f8436c78ebdae5b51365a072b_A_4 = 0;
            float _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2;
            Unity_DotProduct_float2(_Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2);
            float _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1;
            Unity_Saturate_float(_DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2, _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1);
            float _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1;
            Unity_OneMinus_float(_Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1, _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1);
            float _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1;
            Unity_SquareRoot_float(_OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            float3 _Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0 = float3(_Split_26c1e73f8436c78ebdae5b51365a072b_R_1, _Split_26c1e73f8436c78ebdae5b51365a072b_G_2, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            UnityTexture2D _Property_2cc39234d3d334899f94126a216a50fc_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.uv0 = IN.uv0;
            float4 _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_2cc39234d3d334899f94126a216a50fc_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2);
            float _Property_020d569f63e9a2849e23988ff74eb005_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2.xyz), _Property_020d569f63e9a2849e23988ff74eb005_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2);
            float3 _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2;
            Unity_NormalBlend_float(_Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2, _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2);
            UnityTexture2D _Property_a383045772822c87acd099bb4cd6c478_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_79abde32a0223a89907c9f09efac8db7;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.uv0 = IN.uv0;
            float4 _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_a383045772822c87acd099bb4cd6c478_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNMn_79abde32a0223a89907c9f09efac8db7, _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2);
            float _Property_c688e246111fd881820a97415e14d8a3_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_c688e246111fd881820a97415e14d8a3_Out_0, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2);
            float _Split_8cadce726725318fbacd47f436a8231d_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8cadce726725318fbacd47f436a8231d_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8cadce726725318fbacd47f436a8231d_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8cadce726725318fbacd47f436a8231d_A_4 = 0;
            float _Property_ce4e5954a0b7ff8c819fa53963327595_Out_0 = _Cover_Amount;
            float _Property_384059e6344fb98a85eccad78dd82f36_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2;
            Unity_Subtract_float(4, _Property_384059e6344fb98a85eccad78dd82f36_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2);
            float _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2;
            Unity_Divide_float(_Property_ce4e5954a0b7ff8c819fa53963327595_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2);
            float _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1;
            Unity_Absolute_float(_Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2, _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1);
            float _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2;
            Unity_Power_float(_Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2);
            float _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3;
            Unity_Clamp_float(_Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2, 0, 2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3);
            float _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2;
            Unity_Multiply_float_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2);
            float _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1;
            Unity_Saturate_float(_Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2, _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1);
            float _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3;
            Unity_Clamp_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, 0, 0.9999, _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3);
            float _Property_9babc76177853482826cae0163ffe988_Out_0 = _Cover_Max_Angle;
            float _Divide_3b22550205905d8da5870f9db56e44ff_Out_2;
            Unity_Divide_float(_Property_9babc76177853482826cae0163ffe988_Out_0, 45, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2);
            float _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1;
            Unity_OneMinus_float(_Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1);
            float _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2;
            Unity_Subtract_float(_Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1, _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2);
            float _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3;
            Unity_Clamp_float(_Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2, 0, 2, _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3);
            float _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2;
            Unity_Divide_float(1, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2);
            float _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2;
            Unity_Multiply_float_float(_Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2, _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2);
            float _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1;
            Unity_Absolute_float(_Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2, _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1);
            float _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0 = _CoverHardness;
            float _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2;
            Unity_Power_float(_Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2);
            float _Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0 = _Cover_Min_Height;
            float _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1;
            Unity_OneMinus_float(_Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0, _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1);
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_A_4 = 0;
            float _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2;
            Unity_Add_float(_OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1, _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2);
            float _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, 1, _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2);
            float _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3;
            Unity_Clamp_float(_Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2, 0, 1, _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3);
            float _Property_5da709b259ac268bb134d927bcffa4b8_Out_0 = _Cover_Min_Height_Blending;
            float _Add_c322347d9ddbcd83ba52983e9316c387_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Property_5da709b259ac268bb134d927bcffa4b8_Out_0, _Add_c322347d9ddbcd83ba52983e9316c387_Out_2);
            float _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2;
            Unity_Divide_float(_Add_c322347d9ddbcd83ba52983e9316c387_Out_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2);
            float _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1;
            Unity_OneMinus_float(_Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2, _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1);
            float _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2;
            Unity_Add_float(_OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1, -0.5, _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2);
            float _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3;
            Unity_Clamp_float(_Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2, 0, 1, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3);
            float _Add_674fcef023d728848510150af810a103_Out_2;
            Unity_Add_float(_Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3, _Add_674fcef023d728848510150af810a103_Out_2);
            float _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3;
            Unity_Clamp_float(_Add_674fcef023d728848510150af810a103_Out_2, 0, 1, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3);
            float _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2;
            Unity_Multiply_float_float(_Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2);
            float _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2;
            Unity_Multiply_float_float(_Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2);
            float3 _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2, (_Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2.xxx), _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3);
            float3x3 Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1 = normalize(mul(Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent, _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3.xyz).xyz);
            float _Split_600a9d271d96798a94ab28118977defd_R_1 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[0];
            float _Split_600a9d271d96798a94ab28118977defd_G_2 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[1];
            float _Split_600a9d271d96798a94ab28118977defd_B_3 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[2];
            float _Split_600a9d271d96798a94ab28118977defd_A_4 = 0;
            float _Multiply_2e5b010626435f8492a2690396ced19d_Out_2;
            Unity_Multiply_float_float(_Split_600a9d271d96798a94ab28118977defd_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_2e5b010626435f8492a2690396ced19d_Out_2);
            float _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2;
            Unity_Multiply_float_float(_Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2);
            float _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2;
            Unity_Multiply_float_float(_Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2);
            float _Multiply_05614e740451f18f8301586390aa5a0a_Out_2;
            Unity_Multiply_float_float(_Multiply_2e5b010626435f8492a2690396ced19d_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2, _Multiply_05614e740451f18f8301586390aa5a0a_Out_2);
            UnityTexture2D _Property_a14f2476a35d208b988233c852f919ef_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6858a0e821f26a8d87846d325e9bd170;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.uv0 = IN.uv0;
            float4 _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a14f2476a35d208b988233c852f919ef_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_6858a0e821f26a8d87846d325e9bd170, _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2);
            float _Split_16313c20ccdeaa86a639068877a69a2f_R_1 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[0];
            float _Split_16313c20ccdeaa86a639068877a69a2f_G_2 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[1];
            float _Split_16313c20ccdeaa86a639068877a69a2f_B_3 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[2];
            float _Split_16313c20ccdeaa86a639068877a69a2f_A_4 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[3];
            float _Property_673896519f419589938b37e782b90141_Out_0 = _CoverHeightMapMin;
            float _Property_c35906332422438da3b19f45cbd5ac17_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0 = float2(_Property_673896519f419589938b37e782b90141_Out_0, _Property_c35906332422438da3b19f45cbd5ac17_Out_0);
            float _Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0 = _CoverHeightMapOffset;
            float2 _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2;
            Unity_Add_float2(_Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0, (_Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0.xx), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2);
            float _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_B_3, float2 (0, 1), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3);
            float _Multiply_0093be0fd848498b89a0fa282608e715_Out_2;
            Unity_Multiply_float_float(_Multiply_05614e740451f18f8301586390aa5a0a_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2);
            float _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2;
            Unity_Multiply_float_float(_Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2, _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2);
            float _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1;
            Unity_Saturate_float(_Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1);
            float _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2;
            Unity_Multiply_float_float(_Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1, _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2);
            float _Clamp_c95f5515948375878df6581a36d8b203_Out_3;
            Unity_Clamp_float(_Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2, 0, 1, _Clamp_c95f5515948375878df6581a36d8b203_Out_3);
            float _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3;
            Unity_Branch_float(_Property_9ff69c54111eb2859f741d093f22298f_Out_0, _Clamp_c95f5515948375878df6581a36d8b203_Out_3, _Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3);
            float4 _Lerp_87882219e20a6d818c0de017d739125f_Out_3;
            Unity_Lerp_float4(_Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxxx), _Lerp_87882219e20a6d818c0de017d739125f_Out_3);
            UnityTexture2D _Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d26fd10040332c89b94151832fa36c95;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.uv0 = IN.uv0;
            float4 _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_d26fd10040332c89b94151832fa36c95, _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2);
            float _Split_c8dcaee88e16428ab476271a494e0946_R_1 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[0];
            float _Split_c8dcaee88e16428ab476271a494e0946_G_2 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[1];
            float _Split_c8dcaee88e16428ab476271a494e0946_B_3 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[2];
            float _Split_c8dcaee88e16428ab476271a494e0946_A_4 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[3];
            float _Split_81540eba4304c9878d445ae2aad30a44_R_1 = IN.VertexColor[0];
            float _Split_81540eba4304c9878d445ae2aad30a44_G_2 = IN.VertexColor[1];
            float _Split_81540eba4304c9878d445ae2aad30a44_B_3 = IN.VertexColor[2];
            float _Split_81540eba4304c9878d445ae2aad30a44_A_4 = IN.VertexColor[3];
            float _OneMinus_106edffa8269d28e944c403917c0be93_Out_1;
            Unity_OneMinus_float(_Split_81540eba4304c9878d445ae2aad30a44_R_1, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1);
            float _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3;
            Unity_Lerp_float(0, _Split_c8dcaee88e16428ab476271a494e0946_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3);
            float _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2;
            Unity_Multiply_float_float(_Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3, _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0, _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2);
            float _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1;
            Unity_Absolute_float(_Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2, _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1);
            float _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2;
            Unity_Power_float(_Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1, _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0, _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2);
            float _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3;
            Unity_Lerp_float(0, _Split_16313c20ccdeaa86a639068877a69a2f_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3);
            float _Property_cc11b329366008849094e720bdbaad9e_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2;
            Unity_Multiply_float_float(_Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3, _Property_cc11b329366008849094e720bdbaad9e_Out_0, _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2);
            float _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1;
            Unity_Absolute_float(_Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2, _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1);
            float _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_d2f191850ca06f829281d27846b9292a_Out_2;
            Unity_Power_float(_Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1, _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0, _Power_d2f191850ca06f829281d27846b9292a_Out_2);
            float _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3;
            Unity_Lerp_float(_Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2, _Power_d2f191850ca06f829281d27846b9292a_Out_2, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3, _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3);
            float4 _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0, _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2);
            UnityTexture2D _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0 = IN.uv0;
            float2 _Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0 = _NoiseSpeed;
            float2 _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2;
            Unity_Multiply_float2_float2(_Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0, (IN.TimeParameters.x.xx), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2);
            float2 _Add_46357740be2d5a86b5151c5767993e4e_Out_2;
            Unity_Add_float2((_UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0.xy), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2, _Add_46357740be2d5a86b5151c5767993e4e_Out_2);
            float4 _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_46357740be2d5a86b5151c5767993e4e_Out_2));
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_R_4 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.r;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_G_5 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.g;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_B_6 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.b;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.a;
            float2 _Multiply_a2232bab274ab88289a3628364da60c7_Out_2;
            Unity_Multiply_float2_float2(_Add_46357740be2d5a86b5151c5767993e4e_Out_2, float2(-1.2, -0.9), _Multiply_a2232bab274ab88289a3628364da60c7_Out_2);
            float2 _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2;
            Unity_Add_float2(_Multiply_a2232bab274ab88289a3628364da60c7_Out_2, float2(0.5, 0.5), _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2);
            float4 _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2));
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_R_4 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.r;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_G_5 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.g;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_B_6 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.b;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.a;
            float _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2;
            Unity_Minimum_float(_SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7, _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7, _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2);
            float _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1;
            Unity_Absolute_float(_Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2, _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1);
            float _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0 = _EmissionNoisePower;
            float _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2;
            Unity_Power_float(_Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1, _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0, _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2);
            float _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2;
            Unity_Multiply_float_float(_Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2, 20, _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2);
            float _Clamp_943869501048178fbb848b437df184e8_Out_3;
            Unity_Clamp_float(_Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2, 0.05, 1.2, _Clamp_943869501048178fbb848b437df184e8_Out_3);
            float4 _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2;
            Unity_Multiply_float4_float4(_Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2, (_Clamp_943869501048178fbb848b437df184e8_Out_3.xxxx), _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2);
            float4 _Property_1734859c1389ab848dc4063320d66a5d_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_486692dad4d34a8c8410b4771efbf96b_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d60a055f00d779808337e9d909827806_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_486692dad4d34a8c8410b4771efbf96b_Out_0, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2);
            float3 _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3);
            float3 _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1);
            float _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2;
            Unity_DotProduct_float3(_Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1, _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2);
            float _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1;
            Unity_Saturate_float(_DotProduct_845cf97598838e8198e9075e45be98c8_Out_2, _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1);
            float _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1;
            Unity_OneMinus_float(_Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1, _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1);
            float _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1;
            Unity_Absolute_float(_OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1, _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1);
            float _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2;
            Unity_Power_float(_Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1, 10, _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2);
            float4 _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2;
            Unity_Multiply_float4_float4(_Property_1734859c1389ab848dc4063320d66a5d_Out_0, (_Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2.xxxx), _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2);
            float _Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0 = _RimLightPower;
            float4 _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2;
            Unity_Multiply_float4_float4(_Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2, (_Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2);
            float4 _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2);
            float4 _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2;
            Unity_Add_float4(_Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2, _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2);
            float4 _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3;
            Unity_Clamp_float4(_Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, float4(0, 0, 0, 0), _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3);
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_R_1 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[0];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_G_2 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[1];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_B_3 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[2];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[3];
            float _Property_06c41396a31ba582877d3a10387f69e6_Out_0 = _BaseMetallic;
            float _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2;
            Unity_Multiply_float_float(_Split_c8dcaee88e16428ab476271a494e0946_R_1, _Property_06c41396a31ba582877d3a10387f69e6_Out_0, _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2);
            float _Property_2dbdbebc756fb1819344efcc68c07d00_Out_0 = _BaseAORemapMin;
            float _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0 = _BaseAORemapMax;
            float2 _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0 = float2(_Property_2dbdbebc756fb1819344efcc68c07d00_Out_0, _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0);
            float _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3;
            Unity_Remap_float(_Split_c8dcaee88e16428ab476271a494e0946_G_2, float2 (0, 1), _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3);
            float3 _Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0 = float3(_Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3, 0);
            float _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0 = _CoverMetallic;
            float _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2;
            Unity_Multiply_float_float(_Split_16313c20ccdeaa86a639068877a69a2f_R_1, _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0, _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2);
            float _Property_2696a3815c73848db1c5516a77ad7e3e_Out_0 = _CoverAORemapMin;
            float _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0 = _CoverAORemapMax;
            float2 _Vector2_6f054e667fb031849116087b7663e8de_Out_0 = float2(_Property_2696a3815c73848db1c5516a77ad7e3e_Out_0, _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0);
            float _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_G_2, float2 (0, 1), _Vector2_6f054e667fb031849116087b7663e8de_Out_0, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3);
            float3 _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0 = float3(_Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3, 0);
            float3 _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3;
            Unity_Lerp_float3(_Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0, _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3);
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[0];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[1];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_B_3 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[2];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_A_4 = 0;
            surface.BaseColor = (_Lerp_87882219e20a6d818c0de017d739125f_Out_3.xyz);
            surface.Emission = (_Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4;
            surface.Occlusion = _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2;
            surface.NormalTS = _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            surface.Metallic = _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassFullScreenDebug.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "DepthOnly"
            Tags
            {
                "LightMode" = "DepthOnly"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskDepth]
        Ref [_StencilRefDepth]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma multi_compile _ WRITE_NORMAL_BUFFER
        #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ WRITE_DECAL_BUFFER
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _CoverMaskA_TexelSize;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float _CoverUsePlanarUV;
        float4 _CoverTilingOffset;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float _CoverEmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float4 _Noise_TexelSize;
        float2 _NoiseTiling;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_CoverMaskA);
        SAMPLER(sampler_CoverMaskA);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Lava_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options renderinglayer procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float
        {
        };
        
        void SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(float3 Vector3_314C8600, Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63;
            float3 _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1;
            SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(IN.ObjectSpacePosition, _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63, _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1);
            description.Position = _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_e4c53213449c7682b60df6ae54f219f0_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_115fcc827510f38798b214d835c27637_Out_0 = _BaseTilingOffset;
            float _Property_d83b8f290862b285bbe2f157190e1315_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.uv0 = IN.uv0;
            float4 _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_e4c53213449c7682b60df6ae54f219f0_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2);
            float4 _Property_13c79aaf332e20868551d934a2cb7112_Out_0 = _BaseColor;
            float4 _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2, _Property_13c79aaf332e20868551d934a2cb7112_Out_0, _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2);
            UnityTexture2D _Property_b561c414493a8f8299227a27e437f045_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0 = _DetailTilingOffset;
            float _Split_cda27505033cfc8eaf60fe914f0949b9_R_1 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[0];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_G_2 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[1];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_B_3 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[2];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_A_4 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[3];
            float2 _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_R_1, _Split_cda27505033cfc8eaf60fe914f0949b9_G_2);
            float2 _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_B_3, _Split_cda27505033cfc8eaf60fe914f0949b9_A_4);
            float2 _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0, _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0, _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3);
            float4 _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0 = SAMPLE_TEXTURE2D(_Property_b561c414493a8f8299227a27e437f045_Out_0.tex, _Property_b561c414493a8f8299227a27e437f045_Out_0.samplerstate, _Property_b561c414493a8f8299227a27e437f045_Out_0.GetTransformedUV(_TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3));
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.r;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.g;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.b;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.a;
            float _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4, 2, _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2);
            float _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2;
            Unity_Add_float(_Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2, -1, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2);
            float _Property_02e7dd176dc59f8a9a62453677916b24_Out_0 = _DetailAlbedoScale;
            float _Multiply_fd406247e3137a8b8777918477740653_Out_2;
            Unity_Multiply_float_float(_Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Property_02e7dd176dc59f8a9a62453677916b24_Out_0, _Multiply_fd406247e3137a8b8777918477740653_Out_2);
            float _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1;
            Unity_Saturate_float(_Multiply_fd406247e3137a8b8777918477740653_Out_2, _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1);
            float _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1;
            Unity_Absolute_float(_Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73;
            float3 _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(_Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1);
            float _Split_1a45181d77ac838a90665f3132f6a4ef_R_1 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[0];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_G_2 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[1];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_B_3 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[2];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_A_4 = 0;
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_R_1 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[0];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_G_2 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[1];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_B_3 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[2];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[3];
            float _Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0 = float2(_Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0, _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0);
            float _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3;
            Unity_Remap_float(_Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4, float2 (0, 1), _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0, _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3);
            float _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6, 2, _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2);
            float _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2;
            Unity_Add_float(_Multiply_93138f23185e4d83b6825f8212653c3e_Out_2, -1, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2);
            float _Property_dadcc7446e5d388e9a6730406295f93a_Out_0 = _DetailSmoothnessScale;
            float _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2;
            Unity_Multiply_float_float(_Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Property_dadcc7446e5d388e9a6730406295f93a_Out_0, _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2);
            float _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1;
            Unity_Saturate_float(_Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2, _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1);
            float _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1;
            Unity_Absolute_float(_Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7;
            float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1);
            float _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1);
            float4 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4;
            float3 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5;
            float2 _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6;
            Unity_Combine_float(_Split_1a45181d77ac838a90665f3132f6a4ef_R_1, _Split_1a45181d77ac838a90665f3132f6a4ef_G_2, _Split_1a45181d77ac838a90665f3132f6a4ef_B_3, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5, _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6);
            UnityTexture2D _Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0 = _CoverTilingOffset;
            float _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.uv0 = IN.uv0;
            float4 _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2);
            float4 _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0 = _CoverBaseColor;
            float4 _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2, _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0, _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2);
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[0];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[1];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[2];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_A_4 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[3];
            float _Split_7bf3828fa790d989ac06f803f35a2027_R_1 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[0];
            float _Split_7bf3828fa790d989ac06f803f35a2027_G_2 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[1];
            float _Split_7bf3828fa790d989ac06f803f35a2027_B_3 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[2];
            float _Split_7bf3828fa790d989ac06f803f35a2027_A_4 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[3];
            float _Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0 = float2(_Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0, _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0);
            float _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3;
            Unity_Remap_float(_Split_7bf3828fa790d989ac06f803f35a2027_A_4, float2 (0, 1), _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3);
            float4 _Combine_750b21380a24ad809d449001e091b966_RGBA_4;
            float3 _Combine_750b21380a24ad809d449001e091b966_RGB_5;
            float2 _Combine_750b21380a24ad809d449001e091b966_RG_6;
            Unity_Combine_float(_Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1, _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2, _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGB_5, _Combine_750b21380a24ad809d449001e091b966_RG_6);
            float _Property_9ff69c54111eb2859f741d093f22298f_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskA);
            float4 _UV_045cea9e82354980a778f44d92578382_Out_0 = IN.uv0;
            float4 _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0 = SAMPLE_TEXTURE2D(_Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.tex, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.samplerstate, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.GetTransformedUV((_UV_045cea9e82354980a778f44d92578382_Out_0.xy)));
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_R_4 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.r;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_G_5 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.g;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_B_6 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.b;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.a;
            float _Property_4e8240836843df81941cdf6cf2cdd638_Out_0 = _CoverMaskPower;
            float _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7, _Property_4e8240836843df81941cdf6cf2cdd638_Out_0, _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2);
            float _Clamp_030a7c32684c258084338456eaddc77a_Out_3;
            Unity_Clamp_float(_Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2, 0, 1, _Clamp_030a7c32684c258084338456eaddc77a_Out_3);
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_R_1 = IN.VertexColor[0];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2 = IN.VertexColor[1];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_B_3 = IN.VertexColor[2];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_A_4 = IN.VertexColor[3];
            float2 _Vector2_65060e9a9f687a89b68e32dc876be645_Out_0 = float2(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7, _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5);
            float2 _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2;
            Unity_Multiply_float2_float2(_Vector2_65060e9a9f687a89b68e32dc876be645_Out_0, float2(2, 2), _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2);
            float2 _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2;
            Unity_Add_float2(_Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2, float2(-1, -1), _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2);
            float _Property_08b99582093b36869beb5ea3d18e765d_Out_0 = _DetailNormalScale;
            float2 _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2;
            Unity_Multiply_float2_float2(_Add_98b310e19c5fa5899c39cc45969c15ea_Out_2, (_Property_08b99582093b36869beb5ea3d18e765d_Out_0.xx), _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2);
            float _Split_26c1e73f8436c78ebdae5b51365a072b_R_1 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[0];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_G_2 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[1];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_B_3 = 0;
            float _Split_26c1e73f8436c78ebdae5b51365a072b_A_4 = 0;
            float _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2;
            Unity_DotProduct_float2(_Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2);
            float _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1;
            Unity_Saturate_float(_DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2, _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1);
            float _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1;
            Unity_OneMinus_float(_Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1, _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1);
            float _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1;
            Unity_SquareRoot_float(_OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            float3 _Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0 = float3(_Split_26c1e73f8436c78ebdae5b51365a072b_R_1, _Split_26c1e73f8436c78ebdae5b51365a072b_G_2, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            UnityTexture2D _Property_2cc39234d3d334899f94126a216a50fc_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.uv0 = IN.uv0;
            float4 _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_2cc39234d3d334899f94126a216a50fc_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2);
            float _Property_020d569f63e9a2849e23988ff74eb005_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2.xyz), _Property_020d569f63e9a2849e23988ff74eb005_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2);
            float3 _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2;
            Unity_NormalBlend_float(_Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2, _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2);
            UnityTexture2D _Property_a383045772822c87acd099bb4cd6c478_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_79abde32a0223a89907c9f09efac8db7;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.uv0 = IN.uv0;
            float4 _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_a383045772822c87acd099bb4cd6c478_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNMn_79abde32a0223a89907c9f09efac8db7, _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2);
            float _Property_c688e246111fd881820a97415e14d8a3_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_c688e246111fd881820a97415e14d8a3_Out_0, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2);
            float _Split_8cadce726725318fbacd47f436a8231d_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8cadce726725318fbacd47f436a8231d_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8cadce726725318fbacd47f436a8231d_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8cadce726725318fbacd47f436a8231d_A_4 = 0;
            float _Property_ce4e5954a0b7ff8c819fa53963327595_Out_0 = _Cover_Amount;
            float _Property_384059e6344fb98a85eccad78dd82f36_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2;
            Unity_Subtract_float(4, _Property_384059e6344fb98a85eccad78dd82f36_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2);
            float _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2;
            Unity_Divide_float(_Property_ce4e5954a0b7ff8c819fa53963327595_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2);
            float _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1;
            Unity_Absolute_float(_Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2, _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1);
            float _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2;
            Unity_Power_float(_Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2);
            float _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3;
            Unity_Clamp_float(_Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2, 0, 2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3);
            float _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2;
            Unity_Multiply_float_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2);
            float _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1;
            Unity_Saturate_float(_Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2, _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1);
            float _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3;
            Unity_Clamp_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, 0, 0.9999, _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3);
            float _Property_9babc76177853482826cae0163ffe988_Out_0 = _Cover_Max_Angle;
            float _Divide_3b22550205905d8da5870f9db56e44ff_Out_2;
            Unity_Divide_float(_Property_9babc76177853482826cae0163ffe988_Out_0, 45, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2);
            float _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1;
            Unity_OneMinus_float(_Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1);
            float _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2;
            Unity_Subtract_float(_Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1, _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2);
            float _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3;
            Unity_Clamp_float(_Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2, 0, 2, _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3);
            float _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2;
            Unity_Divide_float(1, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2);
            float _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2;
            Unity_Multiply_float_float(_Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2, _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2);
            float _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1;
            Unity_Absolute_float(_Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2, _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1);
            float _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0 = _CoverHardness;
            float _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2;
            Unity_Power_float(_Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2);
            float _Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0 = _Cover_Min_Height;
            float _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1;
            Unity_OneMinus_float(_Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0, _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1);
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_A_4 = 0;
            float _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2;
            Unity_Add_float(_OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1, _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2);
            float _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, 1, _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2);
            float _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3;
            Unity_Clamp_float(_Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2, 0, 1, _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3);
            float _Property_5da709b259ac268bb134d927bcffa4b8_Out_0 = _Cover_Min_Height_Blending;
            float _Add_c322347d9ddbcd83ba52983e9316c387_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Property_5da709b259ac268bb134d927bcffa4b8_Out_0, _Add_c322347d9ddbcd83ba52983e9316c387_Out_2);
            float _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2;
            Unity_Divide_float(_Add_c322347d9ddbcd83ba52983e9316c387_Out_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2);
            float _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1;
            Unity_OneMinus_float(_Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2, _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1);
            float _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2;
            Unity_Add_float(_OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1, -0.5, _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2);
            float _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3;
            Unity_Clamp_float(_Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2, 0, 1, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3);
            float _Add_674fcef023d728848510150af810a103_Out_2;
            Unity_Add_float(_Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3, _Add_674fcef023d728848510150af810a103_Out_2);
            float _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3;
            Unity_Clamp_float(_Add_674fcef023d728848510150af810a103_Out_2, 0, 1, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3);
            float _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2;
            Unity_Multiply_float_float(_Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2);
            float _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2;
            Unity_Multiply_float_float(_Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2);
            float3 _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2, (_Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2.xxx), _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3);
            float3x3 Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1 = normalize(mul(Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent, _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3.xyz).xyz);
            float _Split_600a9d271d96798a94ab28118977defd_R_1 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[0];
            float _Split_600a9d271d96798a94ab28118977defd_G_2 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[1];
            float _Split_600a9d271d96798a94ab28118977defd_B_3 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[2];
            float _Split_600a9d271d96798a94ab28118977defd_A_4 = 0;
            float _Multiply_2e5b010626435f8492a2690396ced19d_Out_2;
            Unity_Multiply_float_float(_Split_600a9d271d96798a94ab28118977defd_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_2e5b010626435f8492a2690396ced19d_Out_2);
            float _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2;
            Unity_Multiply_float_float(_Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2);
            float _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2;
            Unity_Multiply_float_float(_Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2);
            float _Multiply_05614e740451f18f8301586390aa5a0a_Out_2;
            Unity_Multiply_float_float(_Multiply_2e5b010626435f8492a2690396ced19d_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2, _Multiply_05614e740451f18f8301586390aa5a0a_Out_2);
            UnityTexture2D _Property_a14f2476a35d208b988233c852f919ef_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6858a0e821f26a8d87846d325e9bd170;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.uv0 = IN.uv0;
            float4 _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a14f2476a35d208b988233c852f919ef_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_6858a0e821f26a8d87846d325e9bd170, _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2);
            float _Split_16313c20ccdeaa86a639068877a69a2f_R_1 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[0];
            float _Split_16313c20ccdeaa86a639068877a69a2f_G_2 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[1];
            float _Split_16313c20ccdeaa86a639068877a69a2f_B_3 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[2];
            float _Split_16313c20ccdeaa86a639068877a69a2f_A_4 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[3];
            float _Property_673896519f419589938b37e782b90141_Out_0 = _CoverHeightMapMin;
            float _Property_c35906332422438da3b19f45cbd5ac17_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0 = float2(_Property_673896519f419589938b37e782b90141_Out_0, _Property_c35906332422438da3b19f45cbd5ac17_Out_0);
            float _Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0 = _CoverHeightMapOffset;
            float2 _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2;
            Unity_Add_float2(_Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0, (_Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0.xx), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2);
            float _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_B_3, float2 (0, 1), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3);
            float _Multiply_0093be0fd848498b89a0fa282608e715_Out_2;
            Unity_Multiply_float_float(_Multiply_05614e740451f18f8301586390aa5a0a_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2);
            float _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2;
            Unity_Multiply_float_float(_Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2, _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2);
            float _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1;
            Unity_Saturate_float(_Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1);
            float _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2;
            Unity_Multiply_float_float(_Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1, _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2);
            float _Clamp_c95f5515948375878df6581a36d8b203_Out_3;
            Unity_Clamp_float(_Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2, 0, 1, _Clamp_c95f5515948375878df6581a36d8b203_Out_3);
            float _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3;
            Unity_Branch_float(_Property_9ff69c54111eb2859f741d093f22298f_Out_0, _Clamp_c95f5515948375878df6581a36d8b203_Out_3, _Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3);
            float4 _Lerp_87882219e20a6d818c0de017d739125f_Out_3;
            Unity_Lerp_float4(_Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxxx), _Lerp_87882219e20a6d818c0de017d739125f_Out_3);
            UnityTexture2D _Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d26fd10040332c89b94151832fa36c95;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.uv0 = IN.uv0;
            float4 _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_d26fd10040332c89b94151832fa36c95, _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2);
            float _Split_c8dcaee88e16428ab476271a494e0946_R_1 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[0];
            float _Split_c8dcaee88e16428ab476271a494e0946_G_2 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[1];
            float _Split_c8dcaee88e16428ab476271a494e0946_B_3 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[2];
            float _Split_c8dcaee88e16428ab476271a494e0946_A_4 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[3];
            float _Split_81540eba4304c9878d445ae2aad30a44_R_1 = IN.VertexColor[0];
            float _Split_81540eba4304c9878d445ae2aad30a44_G_2 = IN.VertexColor[1];
            float _Split_81540eba4304c9878d445ae2aad30a44_B_3 = IN.VertexColor[2];
            float _Split_81540eba4304c9878d445ae2aad30a44_A_4 = IN.VertexColor[3];
            float _OneMinus_106edffa8269d28e944c403917c0be93_Out_1;
            Unity_OneMinus_float(_Split_81540eba4304c9878d445ae2aad30a44_R_1, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1);
            float _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3;
            Unity_Lerp_float(0, _Split_c8dcaee88e16428ab476271a494e0946_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3);
            float _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2;
            Unity_Multiply_float_float(_Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3, _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0, _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2);
            float _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1;
            Unity_Absolute_float(_Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2, _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1);
            float _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2;
            Unity_Power_float(_Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1, _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0, _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2);
            float _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3;
            Unity_Lerp_float(0, _Split_16313c20ccdeaa86a639068877a69a2f_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3);
            float _Property_cc11b329366008849094e720bdbaad9e_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2;
            Unity_Multiply_float_float(_Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3, _Property_cc11b329366008849094e720bdbaad9e_Out_0, _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2);
            float _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1;
            Unity_Absolute_float(_Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2, _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1);
            float _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_d2f191850ca06f829281d27846b9292a_Out_2;
            Unity_Power_float(_Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1, _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0, _Power_d2f191850ca06f829281d27846b9292a_Out_2);
            float _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3;
            Unity_Lerp_float(_Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2, _Power_d2f191850ca06f829281d27846b9292a_Out_2, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3, _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3);
            float4 _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0, _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2);
            UnityTexture2D _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0 = IN.uv0;
            float2 _Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0 = _NoiseSpeed;
            float2 _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2;
            Unity_Multiply_float2_float2(_Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0, (IN.TimeParameters.x.xx), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2);
            float2 _Add_46357740be2d5a86b5151c5767993e4e_Out_2;
            Unity_Add_float2((_UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0.xy), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2, _Add_46357740be2d5a86b5151c5767993e4e_Out_2);
            float4 _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_46357740be2d5a86b5151c5767993e4e_Out_2));
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_R_4 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.r;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_G_5 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.g;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_B_6 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.b;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.a;
            float2 _Multiply_a2232bab274ab88289a3628364da60c7_Out_2;
            Unity_Multiply_float2_float2(_Add_46357740be2d5a86b5151c5767993e4e_Out_2, float2(-1.2, -0.9), _Multiply_a2232bab274ab88289a3628364da60c7_Out_2);
            float2 _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2;
            Unity_Add_float2(_Multiply_a2232bab274ab88289a3628364da60c7_Out_2, float2(0.5, 0.5), _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2);
            float4 _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2));
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_R_4 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.r;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_G_5 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.g;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_B_6 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.b;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.a;
            float _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2;
            Unity_Minimum_float(_SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7, _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7, _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2);
            float _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1;
            Unity_Absolute_float(_Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2, _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1);
            float _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0 = _EmissionNoisePower;
            float _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2;
            Unity_Power_float(_Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1, _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0, _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2);
            float _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2;
            Unity_Multiply_float_float(_Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2, 20, _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2);
            float _Clamp_943869501048178fbb848b437df184e8_Out_3;
            Unity_Clamp_float(_Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2, 0.05, 1.2, _Clamp_943869501048178fbb848b437df184e8_Out_3);
            float4 _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2;
            Unity_Multiply_float4_float4(_Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2, (_Clamp_943869501048178fbb848b437df184e8_Out_3.xxxx), _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2);
            float4 _Property_1734859c1389ab848dc4063320d66a5d_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_486692dad4d34a8c8410b4771efbf96b_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d60a055f00d779808337e9d909827806_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_486692dad4d34a8c8410b4771efbf96b_Out_0, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2);
            float3 _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3);
            float3 _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1);
            float _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2;
            Unity_DotProduct_float3(_Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1, _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2);
            float _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1;
            Unity_Saturate_float(_DotProduct_845cf97598838e8198e9075e45be98c8_Out_2, _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1);
            float _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1;
            Unity_OneMinus_float(_Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1, _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1);
            float _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1;
            Unity_Absolute_float(_OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1, _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1);
            float _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2;
            Unity_Power_float(_Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1, 10, _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2);
            float4 _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2;
            Unity_Multiply_float4_float4(_Property_1734859c1389ab848dc4063320d66a5d_Out_0, (_Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2.xxxx), _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2);
            float _Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0 = _RimLightPower;
            float4 _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2;
            Unity_Multiply_float4_float4(_Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2, (_Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2);
            float4 _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2);
            float4 _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2;
            Unity_Add_float4(_Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2, _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2);
            float4 _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3;
            Unity_Clamp_float4(_Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, float4(0, 0, 0, 0), _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3);
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_R_1 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[0];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_G_2 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[1];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_B_3 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[2];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[3];
            float _Property_06c41396a31ba582877d3a10387f69e6_Out_0 = _BaseMetallic;
            float _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2;
            Unity_Multiply_float_float(_Split_c8dcaee88e16428ab476271a494e0946_R_1, _Property_06c41396a31ba582877d3a10387f69e6_Out_0, _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2);
            float _Property_2dbdbebc756fb1819344efcc68c07d00_Out_0 = _BaseAORemapMin;
            float _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0 = _BaseAORemapMax;
            float2 _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0 = float2(_Property_2dbdbebc756fb1819344efcc68c07d00_Out_0, _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0);
            float _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3;
            Unity_Remap_float(_Split_c8dcaee88e16428ab476271a494e0946_G_2, float2 (0, 1), _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3);
            float3 _Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0 = float3(_Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3, 0);
            float _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0 = _CoverMetallic;
            float _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2;
            Unity_Multiply_float_float(_Split_16313c20ccdeaa86a639068877a69a2f_R_1, _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0, _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2);
            float _Property_2696a3815c73848db1c5516a77ad7e3e_Out_0 = _CoverAORemapMin;
            float _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0 = _CoverAORemapMax;
            float2 _Vector2_6f054e667fb031849116087b7663e8de_Out_0 = float2(_Property_2696a3815c73848db1c5516a77ad7e3e_Out_0, _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0);
            float _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_G_2, float2 (0, 1), _Vector2_6f054e667fb031849116087b7663e8de_Out_0, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3);
            float3 _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0 = float3(_Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3, 0);
            float3 _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3;
            Unity_Lerp_float3(_Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0, _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3);
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[0];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[1];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_B_3 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[2];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_A_4 = 0;
            surface.BaseColor = (_Lerp_87882219e20a6d818c0de017d739125f_Out_3.xyz);
            surface.Emission = (_Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4;
            surface.Occlusion = _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2;
            surface.NormalTS = _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            surface.Metallic = _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "GBuffer"
            Tags
            {
                "LightMode" = "GBuffer"
            }
        
            // Render State
            Cull [_CullMode]
        ZTest [_ZTestGBuffer]
        Stencil
        {
        WriteMask [_StencilWriteMaskGBuffer]
        Ref [_StencilRefGBuffer]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma multi_compile_fragment _ LIGHT_LAYERS
        #pragma multi_compile_raytracing _ LIGHT_LAYERS
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
        #pragma multi_compile_raytracing _ SHADOWS_SHADOWMASK
        #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
        #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_GBUFFER
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _CoverMaskA_TexelSize;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float _CoverUsePlanarUV;
        float4 _CoverTilingOffset;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float _CoverEmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float4 _Noise_TexelSize;
        float2 _NoiseTiling;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_CoverMaskA);
        SAMPLER(sampler_CoverMaskA);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Lava_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv1 : TEXCOORD1;
             float4 uv2 : TEXCOORD2;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
             float4 interp6 : INTERP6;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.texCoord1;
            output.interp5.xyzw =  input.texCoord2;
            output.interp6.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.texCoord1 = input.interp4.xyzw;
            output.texCoord2 = input.interp5.xyzw;
            output.color = input.interp6.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options renderinglayer procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float
        {
        };
        
        void SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(float3 Vector3_314C8600, Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63;
            float3 _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1;
            SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(IN.ObjectSpacePosition, _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63, _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1);
            description.Position = _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
            float4 VTPackedFeedback;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_e4c53213449c7682b60df6ae54f219f0_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_115fcc827510f38798b214d835c27637_Out_0 = _BaseTilingOffset;
            float _Property_d83b8f290862b285bbe2f157190e1315_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.uv0 = IN.uv0;
            float4 _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_e4c53213449c7682b60df6ae54f219f0_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2);
            float4 _Property_13c79aaf332e20868551d934a2cb7112_Out_0 = _BaseColor;
            float4 _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2, _Property_13c79aaf332e20868551d934a2cb7112_Out_0, _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2);
            UnityTexture2D _Property_b561c414493a8f8299227a27e437f045_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0 = _DetailTilingOffset;
            float _Split_cda27505033cfc8eaf60fe914f0949b9_R_1 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[0];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_G_2 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[1];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_B_3 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[2];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_A_4 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[3];
            float2 _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_R_1, _Split_cda27505033cfc8eaf60fe914f0949b9_G_2);
            float2 _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_B_3, _Split_cda27505033cfc8eaf60fe914f0949b9_A_4);
            float2 _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0, _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0, _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3);
            float4 _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0 = SAMPLE_TEXTURE2D(_Property_b561c414493a8f8299227a27e437f045_Out_0.tex, _Property_b561c414493a8f8299227a27e437f045_Out_0.samplerstate, _Property_b561c414493a8f8299227a27e437f045_Out_0.GetTransformedUV(_TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3));
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.r;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.g;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.b;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.a;
            float _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4, 2, _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2);
            float _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2;
            Unity_Add_float(_Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2, -1, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2);
            float _Property_02e7dd176dc59f8a9a62453677916b24_Out_0 = _DetailAlbedoScale;
            float _Multiply_fd406247e3137a8b8777918477740653_Out_2;
            Unity_Multiply_float_float(_Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Property_02e7dd176dc59f8a9a62453677916b24_Out_0, _Multiply_fd406247e3137a8b8777918477740653_Out_2);
            float _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1;
            Unity_Saturate_float(_Multiply_fd406247e3137a8b8777918477740653_Out_2, _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1);
            float _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1;
            Unity_Absolute_float(_Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73;
            float3 _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(_Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1);
            float _Split_1a45181d77ac838a90665f3132f6a4ef_R_1 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[0];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_G_2 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[1];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_B_3 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[2];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_A_4 = 0;
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_R_1 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[0];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_G_2 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[1];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_B_3 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[2];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[3];
            float _Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0 = float2(_Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0, _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0);
            float _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3;
            Unity_Remap_float(_Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4, float2 (0, 1), _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0, _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3);
            float _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6, 2, _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2);
            float _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2;
            Unity_Add_float(_Multiply_93138f23185e4d83b6825f8212653c3e_Out_2, -1, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2);
            float _Property_dadcc7446e5d388e9a6730406295f93a_Out_0 = _DetailSmoothnessScale;
            float _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2;
            Unity_Multiply_float_float(_Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Property_dadcc7446e5d388e9a6730406295f93a_Out_0, _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2);
            float _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1;
            Unity_Saturate_float(_Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2, _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1);
            float _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1;
            Unity_Absolute_float(_Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7;
            float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1);
            float _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1);
            float4 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4;
            float3 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5;
            float2 _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6;
            Unity_Combine_float(_Split_1a45181d77ac838a90665f3132f6a4ef_R_1, _Split_1a45181d77ac838a90665f3132f6a4ef_G_2, _Split_1a45181d77ac838a90665f3132f6a4ef_B_3, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5, _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6);
            UnityTexture2D _Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0 = _CoverTilingOffset;
            float _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.uv0 = IN.uv0;
            float4 _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2);
            float4 _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0 = _CoverBaseColor;
            float4 _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2, _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0, _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2);
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[0];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[1];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[2];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_A_4 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[3];
            float _Split_7bf3828fa790d989ac06f803f35a2027_R_1 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[0];
            float _Split_7bf3828fa790d989ac06f803f35a2027_G_2 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[1];
            float _Split_7bf3828fa790d989ac06f803f35a2027_B_3 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[2];
            float _Split_7bf3828fa790d989ac06f803f35a2027_A_4 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[3];
            float _Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0 = float2(_Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0, _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0);
            float _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3;
            Unity_Remap_float(_Split_7bf3828fa790d989ac06f803f35a2027_A_4, float2 (0, 1), _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3);
            float4 _Combine_750b21380a24ad809d449001e091b966_RGBA_4;
            float3 _Combine_750b21380a24ad809d449001e091b966_RGB_5;
            float2 _Combine_750b21380a24ad809d449001e091b966_RG_6;
            Unity_Combine_float(_Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1, _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2, _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGB_5, _Combine_750b21380a24ad809d449001e091b966_RG_6);
            float _Property_9ff69c54111eb2859f741d093f22298f_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskA);
            float4 _UV_045cea9e82354980a778f44d92578382_Out_0 = IN.uv0;
            float4 _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0 = SAMPLE_TEXTURE2D(_Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.tex, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.samplerstate, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.GetTransformedUV((_UV_045cea9e82354980a778f44d92578382_Out_0.xy)));
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_R_4 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.r;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_G_5 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.g;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_B_6 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.b;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.a;
            float _Property_4e8240836843df81941cdf6cf2cdd638_Out_0 = _CoverMaskPower;
            float _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7, _Property_4e8240836843df81941cdf6cf2cdd638_Out_0, _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2);
            float _Clamp_030a7c32684c258084338456eaddc77a_Out_3;
            Unity_Clamp_float(_Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2, 0, 1, _Clamp_030a7c32684c258084338456eaddc77a_Out_3);
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_R_1 = IN.VertexColor[0];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2 = IN.VertexColor[1];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_B_3 = IN.VertexColor[2];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_A_4 = IN.VertexColor[3];
            float2 _Vector2_65060e9a9f687a89b68e32dc876be645_Out_0 = float2(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7, _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5);
            float2 _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2;
            Unity_Multiply_float2_float2(_Vector2_65060e9a9f687a89b68e32dc876be645_Out_0, float2(2, 2), _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2);
            float2 _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2;
            Unity_Add_float2(_Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2, float2(-1, -1), _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2);
            float _Property_08b99582093b36869beb5ea3d18e765d_Out_0 = _DetailNormalScale;
            float2 _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2;
            Unity_Multiply_float2_float2(_Add_98b310e19c5fa5899c39cc45969c15ea_Out_2, (_Property_08b99582093b36869beb5ea3d18e765d_Out_0.xx), _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2);
            float _Split_26c1e73f8436c78ebdae5b51365a072b_R_1 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[0];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_G_2 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[1];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_B_3 = 0;
            float _Split_26c1e73f8436c78ebdae5b51365a072b_A_4 = 0;
            float _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2;
            Unity_DotProduct_float2(_Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2);
            float _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1;
            Unity_Saturate_float(_DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2, _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1);
            float _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1;
            Unity_OneMinus_float(_Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1, _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1);
            float _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1;
            Unity_SquareRoot_float(_OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            float3 _Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0 = float3(_Split_26c1e73f8436c78ebdae5b51365a072b_R_1, _Split_26c1e73f8436c78ebdae5b51365a072b_G_2, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            UnityTexture2D _Property_2cc39234d3d334899f94126a216a50fc_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.uv0 = IN.uv0;
            float4 _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_2cc39234d3d334899f94126a216a50fc_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2);
            float _Property_020d569f63e9a2849e23988ff74eb005_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2.xyz), _Property_020d569f63e9a2849e23988ff74eb005_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2);
            float3 _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2;
            Unity_NormalBlend_float(_Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2, _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2);
            UnityTexture2D _Property_a383045772822c87acd099bb4cd6c478_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_79abde32a0223a89907c9f09efac8db7;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.uv0 = IN.uv0;
            float4 _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_a383045772822c87acd099bb4cd6c478_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNMn_79abde32a0223a89907c9f09efac8db7, _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2);
            float _Property_c688e246111fd881820a97415e14d8a3_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_c688e246111fd881820a97415e14d8a3_Out_0, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2);
            float _Split_8cadce726725318fbacd47f436a8231d_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8cadce726725318fbacd47f436a8231d_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8cadce726725318fbacd47f436a8231d_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8cadce726725318fbacd47f436a8231d_A_4 = 0;
            float _Property_ce4e5954a0b7ff8c819fa53963327595_Out_0 = _Cover_Amount;
            float _Property_384059e6344fb98a85eccad78dd82f36_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2;
            Unity_Subtract_float(4, _Property_384059e6344fb98a85eccad78dd82f36_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2);
            float _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2;
            Unity_Divide_float(_Property_ce4e5954a0b7ff8c819fa53963327595_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2);
            float _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1;
            Unity_Absolute_float(_Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2, _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1);
            float _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2;
            Unity_Power_float(_Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2);
            float _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3;
            Unity_Clamp_float(_Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2, 0, 2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3);
            float _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2;
            Unity_Multiply_float_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2);
            float _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1;
            Unity_Saturate_float(_Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2, _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1);
            float _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3;
            Unity_Clamp_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, 0, 0.9999, _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3);
            float _Property_9babc76177853482826cae0163ffe988_Out_0 = _Cover_Max_Angle;
            float _Divide_3b22550205905d8da5870f9db56e44ff_Out_2;
            Unity_Divide_float(_Property_9babc76177853482826cae0163ffe988_Out_0, 45, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2);
            float _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1;
            Unity_OneMinus_float(_Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1);
            float _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2;
            Unity_Subtract_float(_Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1, _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2);
            float _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3;
            Unity_Clamp_float(_Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2, 0, 2, _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3);
            float _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2;
            Unity_Divide_float(1, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2);
            float _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2;
            Unity_Multiply_float_float(_Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2, _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2);
            float _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1;
            Unity_Absolute_float(_Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2, _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1);
            float _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0 = _CoverHardness;
            float _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2;
            Unity_Power_float(_Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2);
            float _Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0 = _Cover_Min_Height;
            float _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1;
            Unity_OneMinus_float(_Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0, _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1);
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_A_4 = 0;
            float _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2;
            Unity_Add_float(_OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1, _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2);
            float _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, 1, _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2);
            float _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3;
            Unity_Clamp_float(_Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2, 0, 1, _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3);
            float _Property_5da709b259ac268bb134d927bcffa4b8_Out_0 = _Cover_Min_Height_Blending;
            float _Add_c322347d9ddbcd83ba52983e9316c387_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Property_5da709b259ac268bb134d927bcffa4b8_Out_0, _Add_c322347d9ddbcd83ba52983e9316c387_Out_2);
            float _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2;
            Unity_Divide_float(_Add_c322347d9ddbcd83ba52983e9316c387_Out_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2);
            float _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1;
            Unity_OneMinus_float(_Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2, _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1);
            float _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2;
            Unity_Add_float(_OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1, -0.5, _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2);
            float _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3;
            Unity_Clamp_float(_Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2, 0, 1, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3);
            float _Add_674fcef023d728848510150af810a103_Out_2;
            Unity_Add_float(_Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3, _Add_674fcef023d728848510150af810a103_Out_2);
            float _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3;
            Unity_Clamp_float(_Add_674fcef023d728848510150af810a103_Out_2, 0, 1, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3);
            float _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2;
            Unity_Multiply_float_float(_Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2);
            float _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2;
            Unity_Multiply_float_float(_Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2);
            float3 _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2, (_Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2.xxx), _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3);
            float3x3 Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1 = normalize(mul(Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent, _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3.xyz).xyz);
            float _Split_600a9d271d96798a94ab28118977defd_R_1 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[0];
            float _Split_600a9d271d96798a94ab28118977defd_G_2 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[1];
            float _Split_600a9d271d96798a94ab28118977defd_B_3 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[2];
            float _Split_600a9d271d96798a94ab28118977defd_A_4 = 0;
            float _Multiply_2e5b010626435f8492a2690396ced19d_Out_2;
            Unity_Multiply_float_float(_Split_600a9d271d96798a94ab28118977defd_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_2e5b010626435f8492a2690396ced19d_Out_2);
            float _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2;
            Unity_Multiply_float_float(_Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2);
            float _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2;
            Unity_Multiply_float_float(_Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2);
            float _Multiply_05614e740451f18f8301586390aa5a0a_Out_2;
            Unity_Multiply_float_float(_Multiply_2e5b010626435f8492a2690396ced19d_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2, _Multiply_05614e740451f18f8301586390aa5a0a_Out_2);
            UnityTexture2D _Property_a14f2476a35d208b988233c852f919ef_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6858a0e821f26a8d87846d325e9bd170;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.uv0 = IN.uv0;
            float4 _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a14f2476a35d208b988233c852f919ef_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_6858a0e821f26a8d87846d325e9bd170, _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2);
            float _Split_16313c20ccdeaa86a639068877a69a2f_R_1 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[0];
            float _Split_16313c20ccdeaa86a639068877a69a2f_G_2 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[1];
            float _Split_16313c20ccdeaa86a639068877a69a2f_B_3 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[2];
            float _Split_16313c20ccdeaa86a639068877a69a2f_A_4 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[3];
            float _Property_673896519f419589938b37e782b90141_Out_0 = _CoverHeightMapMin;
            float _Property_c35906332422438da3b19f45cbd5ac17_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0 = float2(_Property_673896519f419589938b37e782b90141_Out_0, _Property_c35906332422438da3b19f45cbd5ac17_Out_0);
            float _Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0 = _CoverHeightMapOffset;
            float2 _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2;
            Unity_Add_float2(_Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0, (_Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0.xx), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2);
            float _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_B_3, float2 (0, 1), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3);
            float _Multiply_0093be0fd848498b89a0fa282608e715_Out_2;
            Unity_Multiply_float_float(_Multiply_05614e740451f18f8301586390aa5a0a_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2);
            float _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2;
            Unity_Multiply_float_float(_Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2, _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2);
            float _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1;
            Unity_Saturate_float(_Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1);
            float _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2;
            Unity_Multiply_float_float(_Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1, _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2);
            float _Clamp_c95f5515948375878df6581a36d8b203_Out_3;
            Unity_Clamp_float(_Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2, 0, 1, _Clamp_c95f5515948375878df6581a36d8b203_Out_3);
            float _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3;
            Unity_Branch_float(_Property_9ff69c54111eb2859f741d093f22298f_Out_0, _Clamp_c95f5515948375878df6581a36d8b203_Out_3, _Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3);
            float4 _Lerp_87882219e20a6d818c0de017d739125f_Out_3;
            Unity_Lerp_float4(_Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxxx), _Lerp_87882219e20a6d818c0de017d739125f_Out_3);
            UnityTexture2D _Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d26fd10040332c89b94151832fa36c95;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.uv0 = IN.uv0;
            float4 _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_d26fd10040332c89b94151832fa36c95, _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2);
            float _Split_c8dcaee88e16428ab476271a494e0946_R_1 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[0];
            float _Split_c8dcaee88e16428ab476271a494e0946_G_2 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[1];
            float _Split_c8dcaee88e16428ab476271a494e0946_B_3 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[2];
            float _Split_c8dcaee88e16428ab476271a494e0946_A_4 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[3];
            float _Split_81540eba4304c9878d445ae2aad30a44_R_1 = IN.VertexColor[0];
            float _Split_81540eba4304c9878d445ae2aad30a44_G_2 = IN.VertexColor[1];
            float _Split_81540eba4304c9878d445ae2aad30a44_B_3 = IN.VertexColor[2];
            float _Split_81540eba4304c9878d445ae2aad30a44_A_4 = IN.VertexColor[3];
            float _OneMinus_106edffa8269d28e944c403917c0be93_Out_1;
            Unity_OneMinus_float(_Split_81540eba4304c9878d445ae2aad30a44_R_1, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1);
            float _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3;
            Unity_Lerp_float(0, _Split_c8dcaee88e16428ab476271a494e0946_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3);
            float _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2;
            Unity_Multiply_float_float(_Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3, _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0, _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2);
            float _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1;
            Unity_Absolute_float(_Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2, _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1);
            float _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2;
            Unity_Power_float(_Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1, _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0, _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2);
            float _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3;
            Unity_Lerp_float(0, _Split_16313c20ccdeaa86a639068877a69a2f_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3);
            float _Property_cc11b329366008849094e720bdbaad9e_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2;
            Unity_Multiply_float_float(_Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3, _Property_cc11b329366008849094e720bdbaad9e_Out_0, _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2);
            float _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1;
            Unity_Absolute_float(_Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2, _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1);
            float _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_d2f191850ca06f829281d27846b9292a_Out_2;
            Unity_Power_float(_Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1, _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0, _Power_d2f191850ca06f829281d27846b9292a_Out_2);
            float _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3;
            Unity_Lerp_float(_Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2, _Power_d2f191850ca06f829281d27846b9292a_Out_2, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3, _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3);
            float4 _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0, _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2);
            UnityTexture2D _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0 = IN.uv0;
            float2 _Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0 = _NoiseSpeed;
            float2 _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2;
            Unity_Multiply_float2_float2(_Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0, (IN.TimeParameters.x.xx), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2);
            float2 _Add_46357740be2d5a86b5151c5767993e4e_Out_2;
            Unity_Add_float2((_UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0.xy), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2, _Add_46357740be2d5a86b5151c5767993e4e_Out_2);
            float4 _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_46357740be2d5a86b5151c5767993e4e_Out_2));
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_R_4 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.r;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_G_5 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.g;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_B_6 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.b;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.a;
            float2 _Multiply_a2232bab274ab88289a3628364da60c7_Out_2;
            Unity_Multiply_float2_float2(_Add_46357740be2d5a86b5151c5767993e4e_Out_2, float2(-1.2, -0.9), _Multiply_a2232bab274ab88289a3628364da60c7_Out_2);
            float2 _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2;
            Unity_Add_float2(_Multiply_a2232bab274ab88289a3628364da60c7_Out_2, float2(0.5, 0.5), _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2);
            float4 _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2));
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_R_4 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.r;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_G_5 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.g;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_B_6 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.b;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.a;
            float _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2;
            Unity_Minimum_float(_SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7, _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7, _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2);
            float _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1;
            Unity_Absolute_float(_Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2, _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1);
            float _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0 = _EmissionNoisePower;
            float _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2;
            Unity_Power_float(_Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1, _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0, _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2);
            float _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2;
            Unity_Multiply_float_float(_Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2, 20, _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2);
            float _Clamp_943869501048178fbb848b437df184e8_Out_3;
            Unity_Clamp_float(_Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2, 0.05, 1.2, _Clamp_943869501048178fbb848b437df184e8_Out_3);
            float4 _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2;
            Unity_Multiply_float4_float4(_Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2, (_Clamp_943869501048178fbb848b437df184e8_Out_3.xxxx), _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2);
            float4 _Property_1734859c1389ab848dc4063320d66a5d_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_486692dad4d34a8c8410b4771efbf96b_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d60a055f00d779808337e9d909827806_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_486692dad4d34a8c8410b4771efbf96b_Out_0, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2);
            float3 _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3);
            float3 _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1);
            float _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2;
            Unity_DotProduct_float3(_Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1, _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2);
            float _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1;
            Unity_Saturate_float(_DotProduct_845cf97598838e8198e9075e45be98c8_Out_2, _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1);
            float _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1;
            Unity_OneMinus_float(_Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1, _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1);
            float _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1;
            Unity_Absolute_float(_OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1, _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1);
            float _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2;
            Unity_Power_float(_Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1, 10, _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2);
            float4 _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2;
            Unity_Multiply_float4_float4(_Property_1734859c1389ab848dc4063320d66a5d_Out_0, (_Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2.xxxx), _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2);
            float _Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0 = _RimLightPower;
            float4 _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2;
            Unity_Multiply_float4_float4(_Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2, (_Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2);
            float4 _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2);
            float4 _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2;
            Unity_Add_float4(_Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2, _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2);
            float4 _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3;
            Unity_Clamp_float4(_Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, float4(0, 0, 0, 0), _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3);
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_R_1 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[0];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_G_2 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[1];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_B_3 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[2];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[3];
            float _Property_06c41396a31ba582877d3a10387f69e6_Out_0 = _BaseMetallic;
            float _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2;
            Unity_Multiply_float_float(_Split_c8dcaee88e16428ab476271a494e0946_R_1, _Property_06c41396a31ba582877d3a10387f69e6_Out_0, _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2);
            float _Property_2dbdbebc756fb1819344efcc68c07d00_Out_0 = _BaseAORemapMin;
            float _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0 = _BaseAORemapMax;
            float2 _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0 = float2(_Property_2dbdbebc756fb1819344efcc68c07d00_Out_0, _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0);
            float _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3;
            Unity_Remap_float(_Split_c8dcaee88e16428ab476271a494e0946_G_2, float2 (0, 1), _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3);
            float3 _Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0 = float3(_Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3, 0);
            float _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0 = _CoverMetallic;
            float _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2;
            Unity_Multiply_float_float(_Split_16313c20ccdeaa86a639068877a69a2f_R_1, _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0, _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2);
            float _Property_2696a3815c73848db1c5516a77ad7e3e_Out_0 = _CoverAORemapMin;
            float _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0 = _CoverAORemapMax;
            float2 _Vector2_6f054e667fb031849116087b7663e8de_Out_0 = float2(_Property_2696a3815c73848db1c5516a77ad7e3e_Out_0, _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0);
            float _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_G_2, float2 (0, 1), _Vector2_6f054e667fb031849116087b7663e8de_Out_0, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3);
            float3 _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0 = float3(_Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3, 0);
            float3 _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3;
            Unity_Lerp_float3(_Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0, _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3);
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[0];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[1];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_B_3 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[2];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_A_4 = 0;
            surface.BaseColor = (_Lerp_87882219e20a6d818c0de017d739125f_Out_3.xyz);
            surface.Emission = (_Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4;
            surface.Occlusion = _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2;
            surface.NormalTS = _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            surface.Metallic = _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1;
            {
                surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
            }
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord1 =                  input.texCoord1;
            output.texCoord2 =                  input.texCoord2;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassGBuffer.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "Forward"
            Tags
            {
                "LightMode" = "Forward"
            }
        
            // Render State
            Cull [_CullModeForward]
        Blend [_SrcBlend] [_DstBlend], [_AlphaSrcBlend] [_AlphaDstBlend]
        ZTest [_ZTestDepthEqualForOpaque]
        ZWrite [_ZWrite]
        ColorMask [_ColorMaskTransparentVelOne] 1
        ColorMask [_ColorMaskTransparentVelTwo] 2
        Stencil
        {
        WriteMask [_StencilWriteMask]
        Ref [_StencilRef]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
        #pragma multi_compile_raytracing _ SHADOWS_SHADOWMASK
        #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
        #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
        #pragma multi_compile_fragment SHADOW_LOW SHADOW_MEDIUM SHADOW_HIGH SHADOW_VERY_HIGH
        #pragma multi_compile_fragment SCREEN_SPACE_SHADOWS_OFF SCREEN_SPACE_SHADOWS_ON
        #pragma multi_compile_fragment USE_FPTL_LIGHTLIST USE_CLUSTERED_LIGHTLIST
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_FORWARD
        #define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING 1
        #define HAS_LIGHTLOOP 1
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SHADER_LIT 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _CoverMaskA_TexelSize;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float _CoverUsePlanarUV;
        float4 _CoverTilingOffset;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float _CoverEmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float4 _Noise_TexelSize;
        float2 _NoiseTiling;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_CoverMaskA);
        SAMPLER(sampler_CoverMaskA);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Lava_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv1 : TEXCOORD1;
             float4 uv2 : TEXCOORD2;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
             float4 interp6 : INTERP6;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.texCoord1;
            output.interp5.xyzw =  input.texCoord2;
            output.interp6.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.texCoord1 = input.interp4.xyzw;
            output.texCoord2 = input.interp5.xyzw;
            output.color = input.interp6.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options renderinglayer procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float
        {
        };
        
        void SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(float3 Vector3_314C8600, Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63;
            float3 _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1;
            SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(IN.ObjectSpacePosition, _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63, _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1);
            description.Position = _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
            float4 VTPackedFeedback;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_e4c53213449c7682b60df6ae54f219f0_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_115fcc827510f38798b214d835c27637_Out_0 = _BaseTilingOffset;
            float _Property_d83b8f290862b285bbe2f157190e1315_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.uv0 = IN.uv0;
            float4 _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_e4c53213449c7682b60df6ae54f219f0_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2);
            float4 _Property_13c79aaf332e20868551d934a2cb7112_Out_0 = _BaseColor;
            float4 _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2, _Property_13c79aaf332e20868551d934a2cb7112_Out_0, _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2);
            UnityTexture2D _Property_b561c414493a8f8299227a27e437f045_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0 = _DetailTilingOffset;
            float _Split_cda27505033cfc8eaf60fe914f0949b9_R_1 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[0];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_G_2 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[1];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_B_3 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[2];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_A_4 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[3];
            float2 _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_R_1, _Split_cda27505033cfc8eaf60fe914f0949b9_G_2);
            float2 _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_B_3, _Split_cda27505033cfc8eaf60fe914f0949b9_A_4);
            float2 _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0, _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0, _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3);
            float4 _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0 = SAMPLE_TEXTURE2D(_Property_b561c414493a8f8299227a27e437f045_Out_0.tex, _Property_b561c414493a8f8299227a27e437f045_Out_0.samplerstate, _Property_b561c414493a8f8299227a27e437f045_Out_0.GetTransformedUV(_TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3));
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.r;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.g;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.b;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.a;
            float _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4, 2, _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2);
            float _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2;
            Unity_Add_float(_Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2, -1, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2);
            float _Property_02e7dd176dc59f8a9a62453677916b24_Out_0 = _DetailAlbedoScale;
            float _Multiply_fd406247e3137a8b8777918477740653_Out_2;
            Unity_Multiply_float_float(_Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Property_02e7dd176dc59f8a9a62453677916b24_Out_0, _Multiply_fd406247e3137a8b8777918477740653_Out_2);
            float _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1;
            Unity_Saturate_float(_Multiply_fd406247e3137a8b8777918477740653_Out_2, _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1);
            float _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1;
            Unity_Absolute_float(_Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73;
            float3 _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(_Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1);
            float _Split_1a45181d77ac838a90665f3132f6a4ef_R_1 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[0];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_G_2 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[1];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_B_3 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[2];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_A_4 = 0;
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_R_1 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[0];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_G_2 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[1];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_B_3 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[2];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[3];
            float _Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0 = float2(_Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0, _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0);
            float _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3;
            Unity_Remap_float(_Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4, float2 (0, 1), _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0, _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3);
            float _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6, 2, _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2);
            float _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2;
            Unity_Add_float(_Multiply_93138f23185e4d83b6825f8212653c3e_Out_2, -1, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2);
            float _Property_dadcc7446e5d388e9a6730406295f93a_Out_0 = _DetailSmoothnessScale;
            float _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2;
            Unity_Multiply_float_float(_Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Property_dadcc7446e5d388e9a6730406295f93a_Out_0, _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2);
            float _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1;
            Unity_Saturate_float(_Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2, _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1);
            float _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1;
            Unity_Absolute_float(_Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7;
            float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1);
            float _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1);
            float4 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4;
            float3 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5;
            float2 _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6;
            Unity_Combine_float(_Split_1a45181d77ac838a90665f3132f6a4ef_R_1, _Split_1a45181d77ac838a90665f3132f6a4ef_G_2, _Split_1a45181d77ac838a90665f3132f6a4ef_B_3, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5, _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6);
            UnityTexture2D _Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0 = _CoverTilingOffset;
            float _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.uv0 = IN.uv0;
            float4 _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2);
            float4 _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0 = _CoverBaseColor;
            float4 _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2, _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0, _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2);
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[0];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[1];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[2];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_A_4 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[3];
            float _Split_7bf3828fa790d989ac06f803f35a2027_R_1 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[0];
            float _Split_7bf3828fa790d989ac06f803f35a2027_G_2 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[1];
            float _Split_7bf3828fa790d989ac06f803f35a2027_B_3 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[2];
            float _Split_7bf3828fa790d989ac06f803f35a2027_A_4 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[3];
            float _Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0 = float2(_Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0, _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0);
            float _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3;
            Unity_Remap_float(_Split_7bf3828fa790d989ac06f803f35a2027_A_4, float2 (0, 1), _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3);
            float4 _Combine_750b21380a24ad809d449001e091b966_RGBA_4;
            float3 _Combine_750b21380a24ad809d449001e091b966_RGB_5;
            float2 _Combine_750b21380a24ad809d449001e091b966_RG_6;
            Unity_Combine_float(_Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1, _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2, _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGB_5, _Combine_750b21380a24ad809d449001e091b966_RG_6);
            float _Property_9ff69c54111eb2859f741d093f22298f_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskA);
            float4 _UV_045cea9e82354980a778f44d92578382_Out_0 = IN.uv0;
            float4 _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0 = SAMPLE_TEXTURE2D(_Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.tex, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.samplerstate, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.GetTransformedUV((_UV_045cea9e82354980a778f44d92578382_Out_0.xy)));
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_R_4 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.r;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_G_5 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.g;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_B_6 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.b;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.a;
            float _Property_4e8240836843df81941cdf6cf2cdd638_Out_0 = _CoverMaskPower;
            float _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7, _Property_4e8240836843df81941cdf6cf2cdd638_Out_0, _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2);
            float _Clamp_030a7c32684c258084338456eaddc77a_Out_3;
            Unity_Clamp_float(_Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2, 0, 1, _Clamp_030a7c32684c258084338456eaddc77a_Out_3);
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_R_1 = IN.VertexColor[0];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2 = IN.VertexColor[1];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_B_3 = IN.VertexColor[2];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_A_4 = IN.VertexColor[3];
            float2 _Vector2_65060e9a9f687a89b68e32dc876be645_Out_0 = float2(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7, _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5);
            float2 _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2;
            Unity_Multiply_float2_float2(_Vector2_65060e9a9f687a89b68e32dc876be645_Out_0, float2(2, 2), _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2);
            float2 _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2;
            Unity_Add_float2(_Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2, float2(-1, -1), _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2);
            float _Property_08b99582093b36869beb5ea3d18e765d_Out_0 = _DetailNormalScale;
            float2 _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2;
            Unity_Multiply_float2_float2(_Add_98b310e19c5fa5899c39cc45969c15ea_Out_2, (_Property_08b99582093b36869beb5ea3d18e765d_Out_0.xx), _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2);
            float _Split_26c1e73f8436c78ebdae5b51365a072b_R_1 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[0];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_G_2 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[1];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_B_3 = 0;
            float _Split_26c1e73f8436c78ebdae5b51365a072b_A_4 = 0;
            float _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2;
            Unity_DotProduct_float2(_Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2);
            float _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1;
            Unity_Saturate_float(_DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2, _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1);
            float _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1;
            Unity_OneMinus_float(_Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1, _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1);
            float _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1;
            Unity_SquareRoot_float(_OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            float3 _Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0 = float3(_Split_26c1e73f8436c78ebdae5b51365a072b_R_1, _Split_26c1e73f8436c78ebdae5b51365a072b_G_2, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            UnityTexture2D _Property_2cc39234d3d334899f94126a216a50fc_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.uv0 = IN.uv0;
            float4 _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_2cc39234d3d334899f94126a216a50fc_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2);
            float _Property_020d569f63e9a2849e23988ff74eb005_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2.xyz), _Property_020d569f63e9a2849e23988ff74eb005_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2);
            float3 _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2;
            Unity_NormalBlend_float(_Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2, _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2);
            UnityTexture2D _Property_a383045772822c87acd099bb4cd6c478_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_79abde32a0223a89907c9f09efac8db7;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.uv0 = IN.uv0;
            float4 _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_a383045772822c87acd099bb4cd6c478_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNMn_79abde32a0223a89907c9f09efac8db7, _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2);
            float _Property_c688e246111fd881820a97415e14d8a3_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_c688e246111fd881820a97415e14d8a3_Out_0, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2);
            float _Split_8cadce726725318fbacd47f436a8231d_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8cadce726725318fbacd47f436a8231d_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8cadce726725318fbacd47f436a8231d_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8cadce726725318fbacd47f436a8231d_A_4 = 0;
            float _Property_ce4e5954a0b7ff8c819fa53963327595_Out_0 = _Cover_Amount;
            float _Property_384059e6344fb98a85eccad78dd82f36_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2;
            Unity_Subtract_float(4, _Property_384059e6344fb98a85eccad78dd82f36_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2);
            float _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2;
            Unity_Divide_float(_Property_ce4e5954a0b7ff8c819fa53963327595_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2);
            float _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1;
            Unity_Absolute_float(_Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2, _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1);
            float _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2;
            Unity_Power_float(_Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2);
            float _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3;
            Unity_Clamp_float(_Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2, 0, 2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3);
            float _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2;
            Unity_Multiply_float_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2);
            float _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1;
            Unity_Saturate_float(_Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2, _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1);
            float _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3;
            Unity_Clamp_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, 0, 0.9999, _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3);
            float _Property_9babc76177853482826cae0163ffe988_Out_0 = _Cover_Max_Angle;
            float _Divide_3b22550205905d8da5870f9db56e44ff_Out_2;
            Unity_Divide_float(_Property_9babc76177853482826cae0163ffe988_Out_0, 45, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2);
            float _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1;
            Unity_OneMinus_float(_Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1);
            float _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2;
            Unity_Subtract_float(_Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1, _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2);
            float _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3;
            Unity_Clamp_float(_Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2, 0, 2, _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3);
            float _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2;
            Unity_Divide_float(1, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2);
            float _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2;
            Unity_Multiply_float_float(_Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2, _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2);
            float _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1;
            Unity_Absolute_float(_Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2, _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1);
            float _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0 = _CoverHardness;
            float _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2;
            Unity_Power_float(_Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2);
            float _Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0 = _Cover_Min_Height;
            float _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1;
            Unity_OneMinus_float(_Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0, _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1);
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_A_4 = 0;
            float _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2;
            Unity_Add_float(_OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1, _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2);
            float _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, 1, _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2);
            float _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3;
            Unity_Clamp_float(_Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2, 0, 1, _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3);
            float _Property_5da709b259ac268bb134d927bcffa4b8_Out_0 = _Cover_Min_Height_Blending;
            float _Add_c322347d9ddbcd83ba52983e9316c387_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Property_5da709b259ac268bb134d927bcffa4b8_Out_0, _Add_c322347d9ddbcd83ba52983e9316c387_Out_2);
            float _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2;
            Unity_Divide_float(_Add_c322347d9ddbcd83ba52983e9316c387_Out_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2);
            float _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1;
            Unity_OneMinus_float(_Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2, _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1);
            float _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2;
            Unity_Add_float(_OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1, -0.5, _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2);
            float _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3;
            Unity_Clamp_float(_Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2, 0, 1, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3);
            float _Add_674fcef023d728848510150af810a103_Out_2;
            Unity_Add_float(_Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3, _Add_674fcef023d728848510150af810a103_Out_2);
            float _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3;
            Unity_Clamp_float(_Add_674fcef023d728848510150af810a103_Out_2, 0, 1, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3);
            float _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2;
            Unity_Multiply_float_float(_Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2);
            float _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2;
            Unity_Multiply_float_float(_Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2);
            float3 _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2, (_Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2.xxx), _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3);
            float3x3 Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1 = normalize(mul(Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent, _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3.xyz).xyz);
            float _Split_600a9d271d96798a94ab28118977defd_R_1 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[0];
            float _Split_600a9d271d96798a94ab28118977defd_G_2 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[1];
            float _Split_600a9d271d96798a94ab28118977defd_B_3 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[2];
            float _Split_600a9d271d96798a94ab28118977defd_A_4 = 0;
            float _Multiply_2e5b010626435f8492a2690396ced19d_Out_2;
            Unity_Multiply_float_float(_Split_600a9d271d96798a94ab28118977defd_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_2e5b010626435f8492a2690396ced19d_Out_2);
            float _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2;
            Unity_Multiply_float_float(_Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2);
            float _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2;
            Unity_Multiply_float_float(_Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2);
            float _Multiply_05614e740451f18f8301586390aa5a0a_Out_2;
            Unity_Multiply_float_float(_Multiply_2e5b010626435f8492a2690396ced19d_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2, _Multiply_05614e740451f18f8301586390aa5a0a_Out_2);
            UnityTexture2D _Property_a14f2476a35d208b988233c852f919ef_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6858a0e821f26a8d87846d325e9bd170;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.uv0 = IN.uv0;
            float4 _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a14f2476a35d208b988233c852f919ef_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_6858a0e821f26a8d87846d325e9bd170, _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2);
            float _Split_16313c20ccdeaa86a639068877a69a2f_R_1 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[0];
            float _Split_16313c20ccdeaa86a639068877a69a2f_G_2 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[1];
            float _Split_16313c20ccdeaa86a639068877a69a2f_B_3 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[2];
            float _Split_16313c20ccdeaa86a639068877a69a2f_A_4 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[3];
            float _Property_673896519f419589938b37e782b90141_Out_0 = _CoverHeightMapMin;
            float _Property_c35906332422438da3b19f45cbd5ac17_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0 = float2(_Property_673896519f419589938b37e782b90141_Out_0, _Property_c35906332422438da3b19f45cbd5ac17_Out_0);
            float _Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0 = _CoverHeightMapOffset;
            float2 _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2;
            Unity_Add_float2(_Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0, (_Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0.xx), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2);
            float _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_B_3, float2 (0, 1), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3);
            float _Multiply_0093be0fd848498b89a0fa282608e715_Out_2;
            Unity_Multiply_float_float(_Multiply_05614e740451f18f8301586390aa5a0a_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2);
            float _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2;
            Unity_Multiply_float_float(_Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2, _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2);
            float _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1;
            Unity_Saturate_float(_Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1);
            float _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2;
            Unity_Multiply_float_float(_Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1, _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2);
            float _Clamp_c95f5515948375878df6581a36d8b203_Out_3;
            Unity_Clamp_float(_Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2, 0, 1, _Clamp_c95f5515948375878df6581a36d8b203_Out_3);
            float _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3;
            Unity_Branch_float(_Property_9ff69c54111eb2859f741d093f22298f_Out_0, _Clamp_c95f5515948375878df6581a36d8b203_Out_3, _Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3);
            float4 _Lerp_87882219e20a6d818c0de017d739125f_Out_3;
            Unity_Lerp_float4(_Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxxx), _Lerp_87882219e20a6d818c0de017d739125f_Out_3);
            UnityTexture2D _Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d26fd10040332c89b94151832fa36c95;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.uv0 = IN.uv0;
            float4 _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_d26fd10040332c89b94151832fa36c95, _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2);
            float _Split_c8dcaee88e16428ab476271a494e0946_R_1 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[0];
            float _Split_c8dcaee88e16428ab476271a494e0946_G_2 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[1];
            float _Split_c8dcaee88e16428ab476271a494e0946_B_3 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[2];
            float _Split_c8dcaee88e16428ab476271a494e0946_A_4 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[3];
            float _Split_81540eba4304c9878d445ae2aad30a44_R_1 = IN.VertexColor[0];
            float _Split_81540eba4304c9878d445ae2aad30a44_G_2 = IN.VertexColor[1];
            float _Split_81540eba4304c9878d445ae2aad30a44_B_3 = IN.VertexColor[2];
            float _Split_81540eba4304c9878d445ae2aad30a44_A_4 = IN.VertexColor[3];
            float _OneMinus_106edffa8269d28e944c403917c0be93_Out_1;
            Unity_OneMinus_float(_Split_81540eba4304c9878d445ae2aad30a44_R_1, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1);
            float _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3;
            Unity_Lerp_float(0, _Split_c8dcaee88e16428ab476271a494e0946_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3);
            float _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2;
            Unity_Multiply_float_float(_Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3, _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0, _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2);
            float _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1;
            Unity_Absolute_float(_Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2, _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1);
            float _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2;
            Unity_Power_float(_Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1, _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0, _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2);
            float _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3;
            Unity_Lerp_float(0, _Split_16313c20ccdeaa86a639068877a69a2f_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3);
            float _Property_cc11b329366008849094e720bdbaad9e_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2;
            Unity_Multiply_float_float(_Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3, _Property_cc11b329366008849094e720bdbaad9e_Out_0, _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2);
            float _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1;
            Unity_Absolute_float(_Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2, _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1);
            float _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_d2f191850ca06f829281d27846b9292a_Out_2;
            Unity_Power_float(_Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1, _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0, _Power_d2f191850ca06f829281d27846b9292a_Out_2);
            float _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3;
            Unity_Lerp_float(_Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2, _Power_d2f191850ca06f829281d27846b9292a_Out_2, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3, _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3);
            float4 _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0, _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2);
            UnityTexture2D _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0 = IN.uv0;
            float2 _Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0 = _NoiseSpeed;
            float2 _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2;
            Unity_Multiply_float2_float2(_Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0, (IN.TimeParameters.x.xx), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2);
            float2 _Add_46357740be2d5a86b5151c5767993e4e_Out_2;
            Unity_Add_float2((_UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0.xy), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2, _Add_46357740be2d5a86b5151c5767993e4e_Out_2);
            float4 _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_46357740be2d5a86b5151c5767993e4e_Out_2));
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_R_4 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.r;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_G_5 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.g;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_B_6 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.b;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.a;
            float2 _Multiply_a2232bab274ab88289a3628364da60c7_Out_2;
            Unity_Multiply_float2_float2(_Add_46357740be2d5a86b5151c5767993e4e_Out_2, float2(-1.2, -0.9), _Multiply_a2232bab274ab88289a3628364da60c7_Out_2);
            float2 _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2;
            Unity_Add_float2(_Multiply_a2232bab274ab88289a3628364da60c7_Out_2, float2(0.5, 0.5), _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2);
            float4 _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2));
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_R_4 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.r;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_G_5 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.g;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_B_6 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.b;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.a;
            float _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2;
            Unity_Minimum_float(_SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7, _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7, _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2);
            float _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1;
            Unity_Absolute_float(_Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2, _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1);
            float _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0 = _EmissionNoisePower;
            float _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2;
            Unity_Power_float(_Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1, _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0, _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2);
            float _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2;
            Unity_Multiply_float_float(_Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2, 20, _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2);
            float _Clamp_943869501048178fbb848b437df184e8_Out_3;
            Unity_Clamp_float(_Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2, 0.05, 1.2, _Clamp_943869501048178fbb848b437df184e8_Out_3);
            float4 _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2;
            Unity_Multiply_float4_float4(_Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2, (_Clamp_943869501048178fbb848b437df184e8_Out_3.xxxx), _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2);
            float4 _Property_1734859c1389ab848dc4063320d66a5d_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_486692dad4d34a8c8410b4771efbf96b_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d60a055f00d779808337e9d909827806_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_486692dad4d34a8c8410b4771efbf96b_Out_0, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2);
            float3 _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3);
            float3 _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1);
            float _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2;
            Unity_DotProduct_float3(_Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1, _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2);
            float _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1;
            Unity_Saturate_float(_DotProduct_845cf97598838e8198e9075e45be98c8_Out_2, _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1);
            float _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1;
            Unity_OneMinus_float(_Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1, _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1);
            float _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1;
            Unity_Absolute_float(_OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1, _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1);
            float _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2;
            Unity_Power_float(_Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1, 10, _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2);
            float4 _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2;
            Unity_Multiply_float4_float4(_Property_1734859c1389ab848dc4063320d66a5d_Out_0, (_Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2.xxxx), _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2);
            float _Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0 = _RimLightPower;
            float4 _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2;
            Unity_Multiply_float4_float4(_Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2, (_Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2);
            float4 _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2);
            float4 _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2;
            Unity_Add_float4(_Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2, _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2);
            float4 _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3;
            Unity_Clamp_float4(_Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, float4(0, 0, 0, 0), _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3);
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_R_1 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[0];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_G_2 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[1];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_B_3 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[2];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[3];
            float _Property_06c41396a31ba582877d3a10387f69e6_Out_0 = _BaseMetallic;
            float _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2;
            Unity_Multiply_float_float(_Split_c8dcaee88e16428ab476271a494e0946_R_1, _Property_06c41396a31ba582877d3a10387f69e6_Out_0, _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2);
            float _Property_2dbdbebc756fb1819344efcc68c07d00_Out_0 = _BaseAORemapMin;
            float _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0 = _BaseAORemapMax;
            float2 _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0 = float2(_Property_2dbdbebc756fb1819344efcc68c07d00_Out_0, _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0);
            float _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3;
            Unity_Remap_float(_Split_c8dcaee88e16428ab476271a494e0946_G_2, float2 (0, 1), _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3);
            float3 _Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0 = float3(_Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3, 0);
            float _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0 = _CoverMetallic;
            float _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2;
            Unity_Multiply_float_float(_Split_16313c20ccdeaa86a639068877a69a2f_R_1, _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0, _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2);
            float _Property_2696a3815c73848db1c5516a77ad7e3e_Out_0 = _CoverAORemapMin;
            float _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0 = _CoverAORemapMax;
            float2 _Vector2_6f054e667fb031849116087b7663e8de_Out_0 = float2(_Property_2696a3815c73848db1c5516a77ad7e3e_Out_0, _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0);
            float _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_G_2, float2 (0, 1), _Vector2_6f054e667fb031849116087b7663e8de_Out_0, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3);
            float3 _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0 = float3(_Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3, 0);
            float3 _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3;
            Unity_Lerp_float3(_Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0, _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3);
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[0];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[1];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_B_3 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[2];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_A_4 = 0;
            surface.BaseColor = (_Lerp_87882219e20a6d818c0de017d739125f_Out_3.xyz);
            surface.Emission = (_Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4;
            surface.Occlusion = _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2;
            surface.NormalTS = _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            surface.Metallic = _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1;
            {
                surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
            }
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord1 =                  input.texCoord1;
            output.texCoord2 =                  input.texCoord2;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassForward.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "RayTracingPrepass"
            Tags
            {
                "LightMode" = "RayTracingPrepass"
            }
        
            // Render State
            Cull [_CullMode]
        Blend One Zero
        ZWrite On
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_CONSTANT
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _CoverMaskA_TexelSize;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float _CoverUsePlanarUV;
        float4 _CoverTilingOffset;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float _CoverEmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float4 _Noise_TexelSize;
        float2 _NoiseTiling;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_CoverMaskA);
        SAMPLER(sampler_CoverMaskA);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Lava_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options renderinglayer procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float
        {
        };
        
        void SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(float3 Vector3_314C8600, Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63;
            float3 _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1;
            SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(IN.ObjectSpacePosition, _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63, _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1);
            description.Position = _NMLavaVSProIndirect_4b35543d819fbe8dbd3415db10879b63_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_e4c53213449c7682b60df6ae54f219f0_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_115fcc827510f38798b214d835c27637_Out_0 = _BaseTilingOffset;
            float _Property_d83b8f290862b285bbe2f157190e1315_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.uv0 = IN.uv0;
            float4 _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_e4c53213449c7682b60df6ae54f219f0_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2);
            float4 _Property_13c79aaf332e20868551d934a2cb7112_Out_0 = _BaseColor;
            float4 _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2, _Property_13c79aaf332e20868551d934a2cb7112_Out_0, _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2);
            UnityTexture2D _Property_b561c414493a8f8299227a27e437f045_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0 = _DetailTilingOffset;
            float _Split_cda27505033cfc8eaf60fe914f0949b9_R_1 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[0];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_G_2 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[1];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_B_3 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[2];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_A_4 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[3];
            float2 _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_R_1, _Split_cda27505033cfc8eaf60fe914f0949b9_G_2);
            float2 _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_B_3, _Split_cda27505033cfc8eaf60fe914f0949b9_A_4);
            float2 _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0, _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0, _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3);
            float4 _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0 = SAMPLE_TEXTURE2D(_Property_b561c414493a8f8299227a27e437f045_Out_0.tex, _Property_b561c414493a8f8299227a27e437f045_Out_0.samplerstate, _Property_b561c414493a8f8299227a27e437f045_Out_0.GetTransformedUV(_TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3));
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.r;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.g;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.b;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.a;
            float _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4, 2, _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2);
            float _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2;
            Unity_Add_float(_Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2, -1, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2);
            float _Property_02e7dd176dc59f8a9a62453677916b24_Out_0 = _DetailAlbedoScale;
            float _Multiply_fd406247e3137a8b8777918477740653_Out_2;
            Unity_Multiply_float_float(_Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Property_02e7dd176dc59f8a9a62453677916b24_Out_0, _Multiply_fd406247e3137a8b8777918477740653_Out_2);
            float _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1;
            Unity_Saturate_float(_Multiply_fd406247e3137a8b8777918477740653_Out_2, _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1);
            float _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1;
            Unity_Absolute_float(_Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73;
            float3 _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(_Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1);
            float _Split_1a45181d77ac838a90665f3132f6a4ef_R_1 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[0];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_G_2 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[1];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_B_3 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[2];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_A_4 = 0;
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_R_1 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[0];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_G_2 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[1];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_B_3 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[2];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[3];
            float _Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0 = float2(_Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0, _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0);
            float _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3;
            Unity_Remap_float(_Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4, float2 (0, 1), _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0, _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3);
            float _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6, 2, _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2);
            float _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2;
            Unity_Add_float(_Multiply_93138f23185e4d83b6825f8212653c3e_Out_2, -1, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2);
            float _Property_dadcc7446e5d388e9a6730406295f93a_Out_0 = _DetailSmoothnessScale;
            float _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2;
            Unity_Multiply_float_float(_Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Property_dadcc7446e5d388e9a6730406295f93a_Out_0, _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2);
            float _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1;
            Unity_Saturate_float(_Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2, _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1);
            float _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1;
            Unity_Absolute_float(_Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7;
            float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1);
            float _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1);
            float4 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4;
            float3 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5;
            float2 _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6;
            Unity_Combine_float(_Split_1a45181d77ac838a90665f3132f6a4ef_R_1, _Split_1a45181d77ac838a90665f3132f6a4ef_G_2, _Split_1a45181d77ac838a90665f3132f6a4ef_B_3, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5, _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6);
            UnityTexture2D _Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0 = _CoverTilingOffset;
            float _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.uv0 = IN.uv0;
            float4 _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2);
            float4 _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0 = _CoverBaseColor;
            float4 _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2, _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0, _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2);
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[0];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[1];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[2];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_A_4 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[3];
            float _Split_7bf3828fa790d989ac06f803f35a2027_R_1 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[0];
            float _Split_7bf3828fa790d989ac06f803f35a2027_G_2 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[1];
            float _Split_7bf3828fa790d989ac06f803f35a2027_B_3 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[2];
            float _Split_7bf3828fa790d989ac06f803f35a2027_A_4 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[3];
            float _Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0 = float2(_Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0, _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0);
            float _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3;
            Unity_Remap_float(_Split_7bf3828fa790d989ac06f803f35a2027_A_4, float2 (0, 1), _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3);
            float4 _Combine_750b21380a24ad809d449001e091b966_RGBA_4;
            float3 _Combine_750b21380a24ad809d449001e091b966_RGB_5;
            float2 _Combine_750b21380a24ad809d449001e091b966_RG_6;
            Unity_Combine_float(_Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1, _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2, _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGB_5, _Combine_750b21380a24ad809d449001e091b966_RG_6);
            float _Property_9ff69c54111eb2859f741d093f22298f_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskA);
            float4 _UV_045cea9e82354980a778f44d92578382_Out_0 = IN.uv0;
            float4 _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0 = SAMPLE_TEXTURE2D(_Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.tex, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.samplerstate, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.GetTransformedUV((_UV_045cea9e82354980a778f44d92578382_Out_0.xy)));
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_R_4 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.r;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_G_5 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.g;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_B_6 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.b;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.a;
            float _Property_4e8240836843df81941cdf6cf2cdd638_Out_0 = _CoverMaskPower;
            float _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7, _Property_4e8240836843df81941cdf6cf2cdd638_Out_0, _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2);
            float _Clamp_030a7c32684c258084338456eaddc77a_Out_3;
            Unity_Clamp_float(_Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2, 0, 1, _Clamp_030a7c32684c258084338456eaddc77a_Out_3);
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_R_1 = IN.VertexColor[0];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2 = IN.VertexColor[1];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_B_3 = IN.VertexColor[2];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_A_4 = IN.VertexColor[3];
            float2 _Vector2_65060e9a9f687a89b68e32dc876be645_Out_0 = float2(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7, _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5);
            float2 _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2;
            Unity_Multiply_float2_float2(_Vector2_65060e9a9f687a89b68e32dc876be645_Out_0, float2(2, 2), _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2);
            float2 _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2;
            Unity_Add_float2(_Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2, float2(-1, -1), _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2);
            float _Property_08b99582093b36869beb5ea3d18e765d_Out_0 = _DetailNormalScale;
            float2 _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2;
            Unity_Multiply_float2_float2(_Add_98b310e19c5fa5899c39cc45969c15ea_Out_2, (_Property_08b99582093b36869beb5ea3d18e765d_Out_0.xx), _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2);
            float _Split_26c1e73f8436c78ebdae5b51365a072b_R_1 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[0];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_G_2 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[1];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_B_3 = 0;
            float _Split_26c1e73f8436c78ebdae5b51365a072b_A_4 = 0;
            float _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2;
            Unity_DotProduct_float2(_Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2);
            float _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1;
            Unity_Saturate_float(_DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2, _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1);
            float _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1;
            Unity_OneMinus_float(_Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1, _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1);
            float _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1;
            Unity_SquareRoot_float(_OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            float3 _Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0 = float3(_Split_26c1e73f8436c78ebdae5b51365a072b_R_1, _Split_26c1e73f8436c78ebdae5b51365a072b_G_2, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            UnityTexture2D _Property_2cc39234d3d334899f94126a216a50fc_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.uv0 = IN.uv0;
            float4 _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_2cc39234d3d334899f94126a216a50fc_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2);
            float _Property_020d569f63e9a2849e23988ff74eb005_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2.xyz), _Property_020d569f63e9a2849e23988ff74eb005_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2);
            float3 _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2;
            Unity_NormalBlend_float(_Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2, _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2);
            UnityTexture2D _Property_a383045772822c87acd099bb4cd6c478_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_79abde32a0223a89907c9f09efac8db7;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.uv0 = IN.uv0;
            float4 _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_a383045772822c87acd099bb4cd6c478_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNMn_79abde32a0223a89907c9f09efac8db7, _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2);
            float _Property_c688e246111fd881820a97415e14d8a3_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_c688e246111fd881820a97415e14d8a3_Out_0, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2);
            float _Split_8cadce726725318fbacd47f436a8231d_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8cadce726725318fbacd47f436a8231d_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8cadce726725318fbacd47f436a8231d_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8cadce726725318fbacd47f436a8231d_A_4 = 0;
            float _Property_ce4e5954a0b7ff8c819fa53963327595_Out_0 = _Cover_Amount;
            float _Property_384059e6344fb98a85eccad78dd82f36_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2;
            Unity_Subtract_float(4, _Property_384059e6344fb98a85eccad78dd82f36_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2);
            float _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2;
            Unity_Divide_float(_Property_ce4e5954a0b7ff8c819fa53963327595_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2);
            float _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1;
            Unity_Absolute_float(_Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2, _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1);
            float _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2;
            Unity_Power_float(_Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2);
            float _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3;
            Unity_Clamp_float(_Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2, 0, 2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3);
            float _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2;
            Unity_Multiply_float_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2);
            float _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1;
            Unity_Saturate_float(_Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2, _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1);
            float _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3;
            Unity_Clamp_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, 0, 0.9999, _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3);
            float _Property_9babc76177853482826cae0163ffe988_Out_0 = _Cover_Max_Angle;
            float _Divide_3b22550205905d8da5870f9db56e44ff_Out_2;
            Unity_Divide_float(_Property_9babc76177853482826cae0163ffe988_Out_0, 45, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2);
            float _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1;
            Unity_OneMinus_float(_Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1);
            float _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2;
            Unity_Subtract_float(_Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1, _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2);
            float _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3;
            Unity_Clamp_float(_Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2, 0, 2, _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3);
            float _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2;
            Unity_Divide_float(1, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2);
            float _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2;
            Unity_Multiply_float_float(_Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2, _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2);
            float _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1;
            Unity_Absolute_float(_Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2, _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1);
            float _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0 = _CoverHardness;
            float _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2;
            Unity_Power_float(_Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2);
            float _Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0 = _Cover_Min_Height;
            float _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1;
            Unity_OneMinus_float(_Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0, _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1);
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_A_4 = 0;
            float _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2;
            Unity_Add_float(_OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1, _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2);
            float _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, 1, _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2);
            float _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3;
            Unity_Clamp_float(_Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2, 0, 1, _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3);
            float _Property_5da709b259ac268bb134d927bcffa4b8_Out_0 = _Cover_Min_Height_Blending;
            float _Add_c322347d9ddbcd83ba52983e9316c387_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Property_5da709b259ac268bb134d927bcffa4b8_Out_0, _Add_c322347d9ddbcd83ba52983e9316c387_Out_2);
            float _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2;
            Unity_Divide_float(_Add_c322347d9ddbcd83ba52983e9316c387_Out_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2);
            float _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1;
            Unity_OneMinus_float(_Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2, _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1);
            float _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2;
            Unity_Add_float(_OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1, -0.5, _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2);
            float _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3;
            Unity_Clamp_float(_Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2, 0, 1, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3);
            float _Add_674fcef023d728848510150af810a103_Out_2;
            Unity_Add_float(_Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3, _Add_674fcef023d728848510150af810a103_Out_2);
            float _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3;
            Unity_Clamp_float(_Add_674fcef023d728848510150af810a103_Out_2, 0, 1, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3);
            float _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2;
            Unity_Multiply_float_float(_Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2);
            float _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2;
            Unity_Multiply_float_float(_Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2);
            float3 _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2, (_Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2.xxx), _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3);
            float3x3 Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1 = normalize(mul(Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent, _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3.xyz).xyz);
            float _Split_600a9d271d96798a94ab28118977defd_R_1 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[0];
            float _Split_600a9d271d96798a94ab28118977defd_G_2 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[1];
            float _Split_600a9d271d96798a94ab28118977defd_B_3 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[2];
            float _Split_600a9d271d96798a94ab28118977defd_A_4 = 0;
            float _Multiply_2e5b010626435f8492a2690396ced19d_Out_2;
            Unity_Multiply_float_float(_Split_600a9d271d96798a94ab28118977defd_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_2e5b010626435f8492a2690396ced19d_Out_2);
            float _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2;
            Unity_Multiply_float_float(_Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2);
            float _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2;
            Unity_Multiply_float_float(_Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2);
            float _Multiply_05614e740451f18f8301586390aa5a0a_Out_2;
            Unity_Multiply_float_float(_Multiply_2e5b010626435f8492a2690396ced19d_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2, _Multiply_05614e740451f18f8301586390aa5a0a_Out_2);
            UnityTexture2D _Property_a14f2476a35d208b988233c852f919ef_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6858a0e821f26a8d87846d325e9bd170;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.uv0 = IN.uv0;
            float4 _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a14f2476a35d208b988233c852f919ef_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_6858a0e821f26a8d87846d325e9bd170, _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2);
            float _Split_16313c20ccdeaa86a639068877a69a2f_R_1 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[0];
            float _Split_16313c20ccdeaa86a639068877a69a2f_G_2 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[1];
            float _Split_16313c20ccdeaa86a639068877a69a2f_B_3 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[2];
            float _Split_16313c20ccdeaa86a639068877a69a2f_A_4 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[3];
            float _Property_673896519f419589938b37e782b90141_Out_0 = _CoverHeightMapMin;
            float _Property_c35906332422438da3b19f45cbd5ac17_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0 = float2(_Property_673896519f419589938b37e782b90141_Out_0, _Property_c35906332422438da3b19f45cbd5ac17_Out_0);
            float _Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0 = _CoverHeightMapOffset;
            float2 _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2;
            Unity_Add_float2(_Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0, (_Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0.xx), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2);
            float _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_B_3, float2 (0, 1), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3);
            float _Multiply_0093be0fd848498b89a0fa282608e715_Out_2;
            Unity_Multiply_float_float(_Multiply_05614e740451f18f8301586390aa5a0a_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2);
            float _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2;
            Unity_Multiply_float_float(_Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2, _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2);
            float _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1;
            Unity_Saturate_float(_Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1);
            float _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2;
            Unity_Multiply_float_float(_Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1, _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2);
            float _Clamp_c95f5515948375878df6581a36d8b203_Out_3;
            Unity_Clamp_float(_Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2, 0, 1, _Clamp_c95f5515948375878df6581a36d8b203_Out_3);
            float _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3;
            Unity_Branch_float(_Property_9ff69c54111eb2859f741d093f22298f_Out_0, _Clamp_c95f5515948375878df6581a36d8b203_Out_3, _Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3);
            float4 _Lerp_87882219e20a6d818c0de017d739125f_Out_3;
            Unity_Lerp_float4(_Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxxx), _Lerp_87882219e20a6d818c0de017d739125f_Out_3);
            UnityTexture2D _Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d26fd10040332c89b94151832fa36c95;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.uv0 = IN.uv0;
            float4 _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_d26fd10040332c89b94151832fa36c95, _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2);
            float _Split_c8dcaee88e16428ab476271a494e0946_R_1 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[0];
            float _Split_c8dcaee88e16428ab476271a494e0946_G_2 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[1];
            float _Split_c8dcaee88e16428ab476271a494e0946_B_3 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[2];
            float _Split_c8dcaee88e16428ab476271a494e0946_A_4 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[3];
            float _Split_81540eba4304c9878d445ae2aad30a44_R_1 = IN.VertexColor[0];
            float _Split_81540eba4304c9878d445ae2aad30a44_G_2 = IN.VertexColor[1];
            float _Split_81540eba4304c9878d445ae2aad30a44_B_3 = IN.VertexColor[2];
            float _Split_81540eba4304c9878d445ae2aad30a44_A_4 = IN.VertexColor[3];
            float _OneMinus_106edffa8269d28e944c403917c0be93_Out_1;
            Unity_OneMinus_float(_Split_81540eba4304c9878d445ae2aad30a44_R_1, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1);
            float _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3;
            Unity_Lerp_float(0, _Split_c8dcaee88e16428ab476271a494e0946_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3);
            float _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2;
            Unity_Multiply_float_float(_Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3, _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0, _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2);
            float _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1;
            Unity_Absolute_float(_Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2, _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1);
            float _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2;
            Unity_Power_float(_Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1, _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0, _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2);
            float _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3;
            Unity_Lerp_float(0, _Split_16313c20ccdeaa86a639068877a69a2f_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3);
            float _Property_cc11b329366008849094e720bdbaad9e_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2;
            Unity_Multiply_float_float(_Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3, _Property_cc11b329366008849094e720bdbaad9e_Out_0, _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2);
            float _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1;
            Unity_Absolute_float(_Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2, _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1);
            float _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_d2f191850ca06f829281d27846b9292a_Out_2;
            Unity_Power_float(_Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1, _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0, _Power_d2f191850ca06f829281d27846b9292a_Out_2);
            float _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3;
            Unity_Lerp_float(_Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2, _Power_d2f191850ca06f829281d27846b9292a_Out_2, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3, _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3);
            float4 _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0, _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2);
            UnityTexture2D _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0 = IN.uv0;
            float2 _Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0 = _NoiseSpeed;
            float2 _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2;
            Unity_Multiply_float2_float2(_Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0, (IN.TimeParameters.x.xx), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2);
            float2 _Add_46357740be2d5a86b5151c5767993e4e_Out_2;
            Unity_Add_float2((_UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0.xy), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2, _Add_46357740be2d5a86b5151c5767993e4e_Out_2);
            float4 _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_46357740be2d5a86b5151c5767993e4e_Out_2));
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_R_4 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.r;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_G_5 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.g;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_B_6 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.b;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.a;
            float2 _Multiply_a2232bab274ab88289a3628364da60c7_Out_2;
            Unity_Multiply_float2_float2(_Add_46357740be2d5a86b5151c5767993e4e_Out_2, float2(-1.2, -0.9), _Multiply_a2232bab274ab88289a3628364da60c7_Out_2);
            float2 _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2;
            Unity_Add_float2(_Multiply_a2232bab274ab88289a3628364da60c7_Out_2, float2(0.5, 0.5), _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2);
            float4 _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2));
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_R_4 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.r;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_G_5 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.g;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_B_6 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.b;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.a;
            float _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2;
            Unity_Minimum_float(_SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7, _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7, _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2);
            float _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1;
            Unity_Absolute_float(_Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2, _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1);
            float _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0 = _EmissionNoisePower;
            float _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2;
            Unity_Power_float(_Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1, _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0, _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2);
            float _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2;
            Unity_Multiply_float_float(_Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2, 20, _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2);
            float _Clamp_943869501048178fbb848b437df184e8_Out_3;
            Unity_Clamp_float(_Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2, 0.05, 1.2, _Clamp_943869501048178fbb848b437df184e8_Out_3);
            float4 _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2;
            Unity_Multiply_float4_float4(_Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2, (_Clamp_943869501048178fbb848b437df184e8_Out_3.xxxx), _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2);
            float4 _Property_1734859c1389ab848dc4063320d66a5d_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_486692dad4d34a8c8410b4771efbf96b_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d60a055f00d779808337e9d909827806_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_486692dad4d34a8c8410b4771efbf96b_Out_0, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2);
            float3 _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3);
            float3 _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1);
            float _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2;
            Unity_DotProduct_float3(_Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1, _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2);
            float _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1;
            Unity_Saturate_float(_DotProduct_845cf97598838e8198e9075e45be98c8_Out_2, _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1);
            float _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1;
            Unity_OneMinus_float(_Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1, _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1);
            float _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1;
            Unity_Absolute_float(_OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1, _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1);
            float _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2;
            Unity_Power_float(_Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1, 10, _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2);
            float4 _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2;
            Unity_Multiply_float4_float4(_Property_1734859c1389ab848dc4063320d66a5d_Out_0, (_Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2.xxxx), _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2);
            float _Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0 = _RimLightPower;
            float4 _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2;
            Unity_Multiply_float4_float4(_Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2, (_Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2);
            float4 _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2);
            float4 _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2;
            Unity_Add_float4(_Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2, _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2);
            float4 _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3;
            Unity_Clamp_float4(_Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, float4(0, 0, 0, 0), _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3);
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_R_1 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[0];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_G_2 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[1];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_B_3 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[2];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[3];
            float _Property_06c41396a31ba582877d3a10387f69e6_Out_0 = _BaseMetallic;
            float _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2;
            Unity_Multiply_float_float(_Split_c8dcaee88e16428ab476271a494e0946_R_1, _Property_06c41396a31ba582877d3a10387f69e6_Out_0, _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2);
            float _Property_2dbdbebc756fb1819344efcc68c07d00_Out_0 = _BaseAORemapMin;
            float _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0 = _BaseAORemapMax;
            float2 _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0 = float2(_Property_2dbdbebc756fb1819344efcc68c07d00_Out_0, _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0);
            float _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3;
            Unity_Remap_float(_Split_c8dcaee88e16428ab476271a494e0946_G_2, float2 (0, 1), _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3);
            float3 _Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0 = float3(_Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3, 0);
            float _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0 = _CoverMetallic;
            float _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2;
            Unity_Multiply_float_float(_Split_16313c20ccdeaa86a639068877a69a2f_R_1, _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0, _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2);
            float _Property_2696a3815c73848db1c5516a77ad7e3e_Out_0 = _CoverAORemapMin;
            float _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0 = _CoverAORemapMax;
            float2 _Vector2_6f054e667fb031849116087b7663e8de_Out_0 = float2(_Property_2696a3815c73848db1c5516a77ad7e3e_Out_0, _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0);
            float _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_G_2, float2 (0, 1), _Vector2_6f054e667fb031849116087b7663e8de_Out_0, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3);
            float3 _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0 = float3(_Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3, 0);
            float3 _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3;
            Unity_Lerp_float3(_Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0, _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3);
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[0];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[1];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_B_3 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[2];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_A_4 = 0;
            surface.BaseColor = (_Lerp_87882219e20a6d818c0de017d739125f_Out_3.xyz);
            surface.Emission = (_Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4;
            surface.Occlusion = _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2;
            surface.NormalTS = _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            surface.Metallic = _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassConstant.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
    }
    SubShader
    {
        Tags
        {
            "RenderPipeline"="HDRenderPipeline"
            "RenderType"="HDLitShader"
            "Queue"="Geometry+225"
            "ShaderGraphShader"="true"
            "ShaderGraphTargetId"="HDLitSubTarget"
        }
        Pass
        {
            Name "IndirectDXR"
            Tags
            {
                "LightMode" = "IndirectDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 ps5
        
            // Keywords
            #pragma multi_compile _ MULTI_BOUNCE_INDIRECT
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_INDIRECT
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        #define HAS_LIGHTLOOP 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _CoverMaskA_TexelSize;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float _CoverUsePlanarUV;
        float4 _CoverTilingOffset;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float _CoverEmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float4 _Noise_TexelSize;
        float2 _NoiseTiling;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_CoverMaskA);
        SAMPLER(sampler_CoverMaskA);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_e4c53213449c7682b60df6ae54f219f0_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_115fcc827510f38798b214d835c27637_Out_0 = _BaseTilingOffset;
            float _Property_d83b8f290862b285bbe2f157190e1315_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.uv0 = IN.uv0;
            float4 _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_e4c53213449c7682b60df6ae54f219f0_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2);
            float4 _Property_13c79aaf332e20868551d934a2cb7112_Out_0 = _BaseColor;
            float4 _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2, _Property_13c79aaf332e20868551d934a2cb7112_Out_0, _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2);
            UnityTexture2D _Property_b561c414493a8f8299227a27e437f045_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0 = _DetailTilingOffset;
            float _Split_cda27505033cfc8eaf60fe914f0949b9_R_1 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[0];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_G_2 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[1];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_B_3 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[2];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_A_4 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[3];
            float2 _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_R_1, _Split_cda27505033cfc8eaf60fe914f0949b9_G_2);
            float2 _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_B_3, _Split_cda27505033cfc8eaf60fe914f0949b9_A_4);
            float2 _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0, _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0, _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3);
            float4 _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0 = SAMPLE_TEXTURE2D(_Property_b561c414493a8f8299227a27e437f045_Out_0.tex, _Property_b561c414493a8f8299227a27e437f045_Out_0.samplerstate, _Property_b561c414493a8f8299227a27e437f045_Out_0.GetTransformedUV(_TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3));
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.r;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.g;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.b;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.a;
            float _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4, 2, _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2);
            float _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2;
            Unity_Add_float(_Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2, -1, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2);
            float _Property_02e7dd176dc59f8a9a62453677916b24_Out_0 = _DetailAlbedoScale;
            float _Multiply_fd406247e3137a8b8777918477740653_Out_2;
            Unity_Multiply_float_float(_Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Property_02e7dd176dc59f8a9a62453677916b24_Out_0, _Multiply_fd406247e3137a8b8777918477740653_Out_2);
            float _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1;
            Unity_Saturate_float(_Multiply_fd406247e3137a8b8777918477740653_Out_2, _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1);
            float _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1;
            Unity_Absolute_float(_Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73;
            float3 _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(_Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1);
            float _Split_1a45181d77ac838a90665f3132f6a4ef_R_1 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[0];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_G_2 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[1];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_B_3 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[2];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_A_4 = 0;
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_R_1 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[0];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_G_2 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[1];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_B_3 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[2];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[3];
            float _Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0 = float2(_Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0, _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0);
            float _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3;
            Unity_Remap_float(_Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4, float2 (0, 1), _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0, _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3);
            float _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6, 2, _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2);
            float _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2;
            Unity_Add_float(_Multiply_93138f23185e4d83b6825f8212653c3e_Out_2, -1, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2);
            float _Property_dadcc7446e5d388e9a6730406295f93a_Out_0 = _DetailSmoothnessScale;
            float _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2;
            Unity_Multiply_float_float(_Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Property_dadcc7446e5d388e9a6730406295f93a_Out_0, _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2);
            float _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1;
            Unity_Saturate_float(_Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2, _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1);
            float _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1;
            Unity_Absolute_float(_Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7;
            float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1);
            float _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1);
            float4 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4;
            float3 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5;
            float2 _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6;
            Unity_Combine_float(_Split_1a45181d77ac838a90665f3132f6a4ef_R_1, _Split_1a45181d77ac838a90665f3132f6a4ef_G_2, _Split_1a45181d77ac838a90665f3132f6a4ef_B_3, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5, _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6);
            UnityTexture2D _Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0 = _CoverTilingOffset;
            float _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.uv0 = IN.uv0;
            float4 _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2);
            float4 _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0 = _CoverBaseColor;
            float4 _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2, _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0, _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2);
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[0];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[1];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[2];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_A_4 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[3];
            float _Split_7bf3828fa790d989ac06f803f35a2027_R_1 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[0];
            float _Split_7bf3828fa790d989ac06f803f35a2027_G_2 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[1];
            float _Split_7bf3828fa790d989ac06f803f35a2027_B_3 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[2];
            float _Split_7bf3828fa790d989ac06f803f35a2027_A_4 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[3];
            float _Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0 = float2(_Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0, _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0);
            float _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3;
            Unity_Remap_float(_Split_7bf3828fa790d989ac06f803f35a2027_A_4, float2 (0, 1), _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3);
            float4 _Combine_750b21380a24ad809d449001e091b966_RGBA_4;
            float3 _Combine_750b21380a24ad809d449001e091b966_RGB_5;
            float2 _Combine_750b21380a24ad809d449001e091b966_RG_6;
            Unity_Combine_float(_Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1, _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2, _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGB_5, _Combine_750b21380a24ad809d449001e091b966_RG_6);
            float _Property_9ff69c54111eb2859f741d093f22298f_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskA);
            float4 _UV_045cea9e82354980a778f44d92578382_Out_0 = IN.uv0;
            float4 _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0 = SAMPLE_TEXTURE2D(_Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.tex, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.samplerstate, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.GetTransformedUV((_UV_045cea9e82354980a778f44d92578382_Out_0.xy)));
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_R_4 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.r;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_G_5 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.g;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_B_6 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.b;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.a;
            float _Property_4e8240836843df81941cdf6cf2cdd638_Out_0 = _CoverMaskPower;
            float _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7, _Property_4e8240836843df81941cdf6cf2cdd638_Out_0, _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2);
            float _Clamp_030a7c32684c258084338456eaddc77a_Out_3;
            Unity_Clamp_float(_Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2, 0, 1, _Clamp_030a7c32684c258084338456eaddc77a_Out_3);
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_R_1 = IN.VertexColor[0];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2 = IN.VertexColor[1];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_B_3 = IN.VertexColor[2];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_A_4 = IN.VertexColor[3];
            float2 _Vector2_65060e9a9f687a89b68e32dc876be645_Out_0 = float2(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7, _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5);
            float2 _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2;
            Unity_Multiply_float2_float2(_Vector2_65060e9a9f687a89b68e32dc876be645_Out_0, float2(2, 2), _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2);
            float2 _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2;
            Unity_Add_float2(_Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2, float2(-1, -1), _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2);
            float _Property_08b99582093b36869beb5ea3d18e765d_Out_0 = _DetailNormalScale;
            float2 _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2;
            Unity_Multiply_float2_float2(_Add_98b310e19c5fa5899c39cc45969c15ea_Out_2, (_Property_08b99582093b36869beb5ea3d18e765d_Out_0.xx), _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2);
            float _Split_26c1e73f8436c78ebdae5b51365a072b_R_1 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[0];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_G_2 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[1];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_B_3 = 0;
            float _Split_26c1e73f8436c78ebdae5b51365a072b_A_4 = 0;
            float _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2;
            Unity_DotProduct_float2(_Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2);
            float _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1;
            Unity_Saturate_float(_DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2, _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1);
            float _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1;
            Unity_OneMinus_float(_Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1, _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1);
            float _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1;
            Unity_SquareRoot_float(_OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            float3 _Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0 = float3(_Split_26c1e73f8436c78ebdae5b51365a072b_R_1, _Split_26c1e73f8436c78ebdae5b51365a072b_G_2, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            UnityTexture2D _Property_2cc39234d3d334899f94126a216a50fc_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.uv0 = IN.uv0;
            float4 _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_2cc39234d3d334899f94126a216a50fc_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2);
            float _Property_020d569f63e9a2849e23988ff74eb005_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2.xyz), _Property_020d569f63e9a2849e23988ff74eb005_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2);
            float3 _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2;
            Unity_NormalBlend_float(_Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2, _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2);
            UnityTexture2D _Property_a383045772822c87acd099bb4cd6c478_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_79abde32a0223a89907c9f09efac8db7;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.uv0 = IN.uv0;
            float4 _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_a383045772822c87acd099bb4cd6c478_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNMn_79abde32a0223a89907c9f09efac8db7, _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2);
            float _Property_c688e246111fd881820a97415e14d8a3_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_c688e246111fd881820a97415e14d8a3_Out_0, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2);
            float _Split_8cadce726725318fbacd47f436a8231d_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8cadce726725318fbacd47f436a8231d_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8cadce726725318fbacd47f436a8231d_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8cadce726725318fbacd47f436a8231d_A_4 = 0;
            float _Property_ce4e5954a0b7ff8c819fa53963327595_Out_0 = _Cover_Amount;
            float _Property_384059e6344fb98a85eccad78dd82f36_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2;
            Unity_Subtract_float(4, _Property_384059e6344fb98a85eccad78dd82f36_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2);
            float _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2;
            Unity_Divide_float(_Property_ce4e5954a0b7ff8c819fa53963327595_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2);
            float _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1;
            Unity_Absolute_float(_Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2, _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1);
            float _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2;
            Unity_Power_float(_Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2);
            float _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3;
            Unity_Clamp_float(_Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2, 0, 2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3);
            float _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2;
            Unity_Multiply_float_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2);
            float _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1;
            Unity_Saturate_float(_Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2, _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1);
            float _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3;
            Unity_Clamp_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, 0, 0.9999, _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3);
            float _Property_9babc76177853482826cae0163ffe988_Out_0 = _Cover_Max_Angle;
            float _Divide_3b22550205905d8da5870f9db56e44ff_Out_2;
            Unity_Divide_float(_Property_9babc76177853482826cae0163ffe988_Out_0, 45, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2);
            float _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1;
            Unity_OneMinus_float(_Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1);
            float _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2;
            Unity_Subtract_float(_Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1, _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2);
            float _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3;
            Unity_Clamp_float(_Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2, 0, 2, _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3);
            float _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2;
            Unity_Divide_float(1, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2);
            float _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2;
            Unity_Multiply_float_float(_Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2, _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2);
            float _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1;
            Unity_Absolute_float(_Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2, _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1);
            float _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0 = _CoverHardness;
            float _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2;
            Unity_Power_float(_Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2);
            float _Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0 = _Cover_Min_Height;
            float _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1;
            Unity_OneMinus_float(_Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0, _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1);
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_A_4 = 0;
            float _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2;
            Unity_Add_float(_OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1, _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2);
            float _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, 1, _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2);
            float _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3;
            Unity_Clamp_float(_Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2, 0, 1, _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3);
            float _Property_5da709b259ac268bb134d927bcffa4b8_Out_0 = _Cover_Min_Height_Blending;
            float _Add_c322347d9ddbcd83ba52983e9316c387_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Property_5da709b259ac268bb134d927bcffa4b8_Out_0, _Add_c322347d9ddbcd83ba52983e9316c387_Out_2);
            float _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2;
            Unity_Divide_float(_Add_c322347d9ddbcd83ba52983e9316c387_Out_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2);
            float _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1;
            Unity_OneMinus_float(_Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2, _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1);
            float _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2;
            Unity_Add_float(_OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1, -0.5, _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2);
            float _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3;
            Unity_Clamp_float(_Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2, 0, 1, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3);
            float _Add_674fcef023d728848510150af810a103_Out_2;
            Unity_Add_float(_Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3, _Add_674fcef023d728848510150af810a103_Out_2);
            float _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3;
            Unity_Clamp_float(_Add_674fcef023d728848510150af810a103_Out_2, 0, 1, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3);
            float _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2;
            Unity_Multiply_float_float(_Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2);
            float _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2;
            Unity_Multiply_float_float(_Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2);
            float3 _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2, (_Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2.xxx), _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3);
            float3x3 Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1 = normalize(mul(Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent, _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3.xyz).xyz);
            float _Split_600a9d271d96798a94ab28118977defd_R_1 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[0];
            float _Split_600a9d271d96798a94ab28118977defd_G_2 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[1];
            float _Split_600a9d271d96798a94ab28118977defd_B_3 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[2];
            float _Split_600a9d271d96798a94ab28118977defd_A_4 = 0;
            float _Multiply_2e5b010626435f8492a2690396ced19d_Out_2;
            Unity_Multiply_float_float(_Split_600a9d271d96798a94ab28118977defd_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_2e5b010626435f8492a2690396ced19d_Out_2);
            float _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2;
            Unity_Multiply_float_float(_Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2);
            float _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2;
            Unity_Multiply_float_float(_Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2);
            float _Multiply_05614e740451f18f8301586390aa5a0a_Out_2;
            Unity_Multiply_float_float(_Multiply_2e5b010626435f8492a2690396ced19d_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2, _Multiply_05614e740451f18f8301586390aa5a0a_Out_2);
            UnityTexture2D _Property_a14f2476a35d208b988233c852f919ef_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6858a0e821f26a8d87846d325e9bd170;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.uv0 = IN.uv0;
            float4 _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a14f2476a35d208b988233c852f919ef_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_6858a0e821f26a8d87846d325e9bd170, _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2);
            float _Split_16313c20ccdeaa86a639068877a69a2f_R_1 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[0];
            float _Split_16313c20ccdeaa86a639068877a69a2f_G_2 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[1];
            float _Split_16313c20ccdeaa86a639068877a69a2f_B_3 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[2];
            float _Split_16313c20ccdeaa86a639068877a69a2f_A_4 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[3];
            float _Property_673896519f419589938b37e782b90141_Out_0 = _CoverHeightMapMin;
            float _Property_c35906332422438da3b19f45cbd5ac17_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0 = float2(_Property_673896519f419589938b37e782b90141_Out_0, _Property_c35906332422438da3b19f45cbd5ac17_Out_0);
            float _Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0 = _CoverHeightMapOffset;
            float2 _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2;
            Unity_Add_float2(_Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0, (_Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0.xx), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2);
            float _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_B_3, float2 (0, 1), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3);
            float _Multiply_0093be0fd848498b89a0fa282608e715_Out_2;
            Unity_Multiply_float_float(_Multiply_05614e740451f18f8301586390aa5a0a_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2);
            float _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2;
            Unity_Multiply_float_float(_Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2, _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2);
            float _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1;
            Unity_Saturate_float(_Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1);
            float _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2;
            Unity_Multiply_float_float(_Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1, _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2);
            float _Clamp_c95f5515948375878df6581a36d8b203_Out_3;
            Unity_Clamp_float(_Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2, 0, 1, _Clamp_c95f5515948375878df6581a36d8b203_Out_3);
            float _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3;
            Unity_Branch_float(_Property_9ff69c54111eb2859f741d093f22298f_Out_0, _Clamp_c95f5515948375878df6581a36d8b203_Out_3, _Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3);
            float4 _Lerp_87882219e20a6d818c0de017d739125f_Out_3;
            Unity_Lerp_float4(_Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxxx), _Lerp_87882219e20a6d818c0de017d739125f_Out_3);
            UnityTexture2D _Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d26fd10040332c89b94151832fa36c95;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.uv0 = IN.uv0;
            float4 _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_d26fd10040332c89b94151832fa36c95, _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2);
            float _Split_c8dcaee88e16428ab476271a494e0946_R_1 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[0];
            float _Split_c8dcaee88e16428ab476271a494e0946_G_2 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[1];
            float _Split_c8dcaee88e16428ab476271a494e0946_B_3 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[2];
            float _Split_c8dcaee88e16428ab476271a494e0946_A_4 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[3];
            float _Split_81540eba4304c9878d445ae2aad30a44_R_1 = IN.VertexColor[0];
            float _Split_81540eba4304c9878d445ae2aad30a44_G_2 = IN.VertexColor[1];
            float _Split_81540eba4304c9878d445ae2aad30a44_B_3 = IN.VertexColor[2];
            float _Split_81540eba4304c9878d445ae2aad30a44_A_4 = IN.VertexColor[3];
            float _OneMinus_106edffa8269d28e944c403917c0be93_Out_1;
            Unity_OneMinus_float(_Split_81540eba4304c9878d445ae2aad30a44_R_1, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1);
            float _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3;
            Unity_Lerp_float(0, _Split_c8dcaee88e16428ab476271a494e0946_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3);
            float _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2;
            Unity_Multiply_float_float(_Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3, _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0, _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2);
            float _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1;
            Unity_Absolute_float(_Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2, _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1);
            float _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2;
            Unity_Power_float(_Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1, _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0, _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2);
            float _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3;
            Unity_Lerp_float(0, _Split_16313c20ccdeaa86a639068877a69a2f_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3);
            float _Property_cc11b329366008849094e720bdbaad9e_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2;
            Unity_Multiply_float_float(_Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3, _Property_cc11b329366008849094e720bdbaad9e_Out_0, _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2);
            float _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1;
            Unity_Absolute_float(_Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2, _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1);
            float _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_d2f191850ca06f829281d27846b9292a_Out_2;
            Unity_Power_float(_Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1, _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0, _Power_d2f191850ca06f829281d27846b9292a_Out_2);
            float _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3;
            Unity_Lerp_float(_Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2, _Power_d2f191850ca06f829281d27846b9292a_Out_2, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3, _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3);
            float4 _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0, _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2);
            UnityTexture2D _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0 = IN.uv0;
            float2 _Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0 = _NoiseSpeed;
            float2 _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2;
            Unity_Multiply_float2_float2(_Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0, (IN.TimeParameters.x.xx), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2);
            float2 _Add_46357740be2d5a86b5151c5767993e4e_Out_2;
            Unity_Add_float2((_UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0.xy), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2, _Add_46357740be2d5a86b5151c5767993e4e_Out_2);
            float4 _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_46357740be2d5a86b5151c5767993e4e_Out_2));
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_R_4 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.r;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_G_5 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.g;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_B_6 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.b;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.a;
            float2 _Multiply_a2232bab274ab88289a3628364da60c7_Out_2;
            Unity_Multiply_float2_float2(_Add_46357740be2d5a86b5151c5767993e4e_Out_2, float2(-1.2, -0.9), _Multiply_a2232bab274ab88289a3628364da60c7_Out_2);
            float2 _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2;
            Unity_Add_float2(_Multiply_a2232bab274ab88289a3628364da60c7_Out_2, float2(0.5, 0.5), _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2);
            float4 _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2));
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_R_4 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.r;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_G_5 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.g;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_B_6 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.b;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.a;
            float _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2;
            Unity_Minimum_float(_SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7, _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7, _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2);
            float _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1;
            Unity_Absolute_float(_Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2, _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1);
            float _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0 = _EmissionNoisePower;
            float _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2;
            Unity_Power_float(_Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1, _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0, _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2);
            float _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2;
            Unity_Multiply_float_float(_Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2, 20, _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2);
            float _Clamp_943869501048178fbb848b437df184e8_Out_3;
            Unity_Clamp_float(_Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2, 0.05, 1.2, _Clamp_943869501048178fbb848b437df184e8_Out_3);
            float4 _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2;
            Unity_Multiply_float4_float4(_Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2, (_Clamp_943869501048178fbb848b437df184e8_Out_3.xxxx), _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2);
            float4 _Property_1734859c1389ab848dc4063320d66a5d_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_486692dad4d34a8c8410b4771efbf96b_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d60a055f00d779808337e9d909827806_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_486692dad4d34a8c8410b4771efbf96b_Out_0, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2);
            float3 _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3);
            float3 _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1);
            float _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2;
            Unity_DotProduct_float3(_Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1, _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2);
            float _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1;
            Unity_Saturate_float(_DotProduct_845cf97598838e8198e9075e45be98c8_Out_2, _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1);
            float _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1;
            Unity_OneMinus_float(_Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1, _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1);
            float _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1;
            Unity_Absolute_float(_OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1, _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1);
            float _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2;
            Unity_Power_float(_Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1, 10, _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2);
            float4 _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2;
            Unity_Multiply_float4_float4(_Property_1734859c1389ab848dc4063320d66a5d_Out_0, (_Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2.xxxx), _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2);
            float _Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0 = _RimLightPower;
            float4 _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2;
            Unity_Multiply_float4_float4(_Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2, (_Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2);
            float4 _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2);
            float4 _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2;
            Unity_Add_float4(_Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2, _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2);
            float4 _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3;
            Unity_Clamp_float4(_Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, float4(0, 0, 0, 0), _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3);
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_R_1 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[0];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_G_2 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[1];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_B_3 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[2];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[3];
            float _Property_06c41396a31ba582877d3a10387f69e6_Out_0 = _BaseMetallic;
            float _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2;
            Unity_Multiply_float_float(_Split_c8dcaee88e16428ab476271a494e0946_R_1, _Property_06c41396a31ba582877d3a10387f69e6_Out_0, _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2);
            float _Property_2dbdbebc756fb1819344efcc68c07d00_Out_0 = _BaseAORemapMin;
            float _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0 = _BaseAORemapMax;
            float2 _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0 = float2(_Property_2dbdbebc756fb1819344efcc68c07d00_Out_0, _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0);
            float _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3;
            Unity_Remap_float(_Split_c8dcaee88e16428ab476271a494e0946_G_2, float2 (0, 1), _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3);
            float3 _Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0 = float3(_Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3, 0);
            float _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0 = _CoverMetallic;
            float _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2;
            Unity_Multiply_float_float(_Split_16313c20ccdeaa86a639068877a69a2f_R_1, _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0, _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2);
            float _Property_2696a3815c73848db1c5516a77ad7e3e_Out_0 = _CoverAORemapMin;
            float _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0 = _CoverAORemapMax;
            float2 _Vector2_6f054e667fb031849116087b7663e8de_Out_0 = float2(_Property_2696a3815c73848db1c5516a77ad7e3e_Out_0, _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0);
            float _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_G_2, float2 (0, 1), _Vector2_6f054e667fb031849116087b7663e8de_Out_0, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3);
            float3 _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0 = float3(_Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3, 0);
            float3 _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3;
            Unity_Lerp_float3(_Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0, _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3);
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[0];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[1];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_B_3 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[2];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_A_4 = 0;
            surface.BaseColor = (_Lerp_87882219e20a6d818c0de017d739125f_Out_3.xyz);
            surface.Emission = (_Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4;
            surface.Occlusion = _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2;
            surface.NormalTS = _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            surface.Metallic = _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingIndirect.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "VisibilityDXR"
            Tags
            {
                "LightMode" = "VisibilityDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 ps5
        
            // Keywords
            #pragma multi_compile _ TRANSPARENT_COLOR_SHADOW
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_VISIBILITY
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _CoverMaskA_TexelSize;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float _CoverUsePlanarUV;
        float4 _CoverTilingOffset;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float _CoverEmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float4 _Noise_TexelSize;
        float2 _NoiseTiling;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_CoverMaskA);
        SAMPLER(sampler_CoverMaskA);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_e4c53213449c7682b60df6ae54f219f0_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_115fcc827510f38798b214d835c27637_Out_0 = _BaseTilingOffset;
            float _Property_d83b8f290862b285bbe2f157190e1315_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.uv0 = IN.uv0;
            float4 _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_e4c53213449c7682b60df6ae54f219f0_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2);
            float4 _Property_13c79aaf332e20868551d934a2cb7112_Out_0 = _BaseColor;
            float4 _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2, _Property_13c79aaf332e20868551d934a2cb7112_Out_0, _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2);
            UnityTexture2D _Property_b561c414493a8f8299227a27e437f045_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0 = _DetailTilingOffset;
            float _Split_cda27505033cfc8eaf60fe914f0949b9_R_1 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[0];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_G_2 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[1];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_B_3 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[2];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_A_4 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[3];
            float2 _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_R_1, _Split_cda27505033cfc8eaf60fe914f0949b9_G_2);
            float2 _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_B_3, _Split_cda27505033cfc8eaf60fe914f0949b9_A_4);
            float2 _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0, _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0, _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3);
            float4 _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0 = SAMPLE_TEXTURE2D(_Property_b561c414493a8f8299227a27e437f045_Out_0.tex, _Property_b561c414493a8f8299227a27e437f045_Out_0.samplerstate, _Property_b561c414493a8f8299227a27e437f045_Out_0.GetTransformedUV(_TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3));
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.r;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.g;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.b;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.a;
            float _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4, 2, _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2);
            float _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2;
            Unity_Add_float(_Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2, -1, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2);
            float _Property_02e7dd176dc59f8a9a62453677916b24_Out_0 = _DetailAlbedoScale;
            float _Multiply_fd406247e3137a8b8777918477740653_Out_2;
            Unity_Multiply_float_float(_Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Property_02e7dd176dc59f8a9a62453677916b24_Out_0, _Multiply_fd406247e3137a8b8777918477740653_Out_2);
            float _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1;
            Unity_Saturate_float(_Multiply_fd406247e3137a8b8777918477740653_Out_2, _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1);
            float _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1;
            Unity_Absolute_float(_Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73;
            float3 _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(_Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1);
            float _Split_1a45181d77ac838a90665f3132f6a4ef_R_1 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[0];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_G_2 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[1];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_B_3 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[2];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_A_4 = 0;
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_R_1 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[0];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_G_2 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[1];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_B_3 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[2];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[3];
            float _Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0 = float2(_Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0, _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0);
            float _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3;
            Unity_Remap_float(_Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4, float2 (0, 1), _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0, _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3);
            float _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6, 2, _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2);
            float _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2;
            Unity_Add_float(_Multiply_93138f23185e4d83b6825f8212653c3e_Out_2, -1, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2);
            float _Property_dadcc7446e5d388e9a6730406295f93a_Out_0 = _DetailSmoothnessScale;
            float _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2;
            Unity_Multiply_float_float(_Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Property_dadcc7446e5d388e9a6730406295f93a_Out_0, _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2);
            float _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1;
            Unity_Saturate_float(_Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2, _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1);
            float _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1;
            Unity_Absolute_float(_Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7;
            float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1);
            float _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1);
            float4 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4;
            float3 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5;
            float2 _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6;
            Unity_Combine_float(_Split_1a45181d77ac838a90665f3132f6a4ef_R_1, _Split_1a45181d77ac838a90665f3132f6a4ef_G_2, _Split_1a45181d77ac838a90665f3132f6a4ef_B_3, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5, _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6);
            UnityTexture2D _Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0 = _CoverTilingOffset;
            float _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.uv0 = IN.uv0;
            float4 _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2);
            float4 _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0 = _CoverBaseColor;
            float4 _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2, _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0, _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2);
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[0];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[1];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[2];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_A_4 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[3];
            float _Split_7bf3828fa790d989ac06f803f35a2027_R_1 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[0];
            float _Split_7bf3828fa790d989ac06f803f35a2027_G_2 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[1];
            float _Split_7bf3828fa790d989ac06f803f35a2027_B_3 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[2];
            float _Split_7bf3828fa790d989ac06f803f35a2027_A_4 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[3];
            float _Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0 = float2(_Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0, _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0);
            float _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3;
            Unity_Remap_float(_Split_7bf3828fa790d989ac06f803f35a2027_A_4, float2 (0, 1), _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3);
            float4 _Combine_750b21380a24ad809d449001e091b966_RGBA_4;
            float3 _Combine_750b21380a24ad809d449001e091b966_RGB_5;
            float2 _Combine_750b21380a24ad809d449001e091b966_RG_6;
            Unity_Combine_float(_Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1, _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2, _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGB_5, _Combine_750b21380a24ad809d449001e091b966_RG_6);
            float _Property_9ff69c54111eb2859f741d093f22298f_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskA);
            float4 _UV_045cea9e82354980a778f44d92578382_Out_0 = IN.uv0;
            float4 _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0 = SAMPLE_TEXTURE2D(_Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.tex, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.samplerstate, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.GetTransformedUV((_UV_045cea9e82354980a778f44d92578382_Out_0.xy)));
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_R_4 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.r;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_G_5 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.g;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_B_6 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.b;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.a;
            float _Property_4e8240836843df81941cdf6cf2cdd638_Out_0 = _CoverMaskPower;
            float _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7, _Property_4e8240836843df81941cdf6cf2cdd638_Out_0, _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2);
            float _Clamp_030a7c32684c258084338456eaddc77a_Out_3;
            Unity_Clamp_float(_Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2, 0, 1, _Clamp_030a7c32684c258084338456eaddc77a_Out_3);
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_R_1 = IN.VertexColor[0];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2 = IN.VertexColor[1];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_B_3 = IN.VertexColor[2];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_A_4 = IN.VertexColor[3];
            float2 _Vector2_65060e9a9f687a89b68e32dc876be645_Out_0 = float2(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7, _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5);
            float2 _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2;
            Unity_Multiply_float2_float2(_Vector2_65060e9a9f687a89b68e32dc876be645_Out_0, float2(2, 2), _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2);
            float2 _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2;
            Unity_Add_float2(_Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2, float2(-1, -1), _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2);
            float _Property_08b99582093b36869beb5ea3d18e765d_Out_0 = _DetailNormalScale;
            float2 _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2;
            Unity_Multiply_float2_float2(_Add_98b310e19c5fa5899c39cc45969c15ea_Out_2, (_Property_08b99582093b36869beb5ea3d18e765d_Out_0.xx), _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2);
            float _Split_26c1e73f8436c78ebdae5b51365a072b_R_1 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[0];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_G_2 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[1];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_B_3 = 0;
            float _Split_26c1e73f8436c78ebdae5b51365a072b_A_4 = 0;
            float _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2;
            Unity_DotProduct_float2(_Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2);
            float _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1;
            Unity_Saturate_float(_DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2, _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1);
            float _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1;
            Unity_OneMinus_float(_Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1, _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1);
            float _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1;
            Unity_SquareRoot_float(_OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            float3 _Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0 = float3(_Split_26c1e73f8436c78ebdae5b51365a072b_R_1, _Split_26c1e73f8436c78ebdae5b51365a072b_G_2, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            UnityTexture2D _Property_2cc39234d3d334899f94126a216a50fc_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.uv0 = IN.uv0;
            float4 _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_2cc39234d3d334899f94126a216a50fc_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2);
            float _Property_020d569f63e9a2849e23988ff74eb005_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2.xyz), _Property_020d569f63e9a2849e23988ff74eb005_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2);
            float3 _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2;
            Unity_NormalBlend_float(_Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2, _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2);
            UnityTexture2D _Property_a383045772822c87acd099bb4cd6c478_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_79abde32a0223a89907c9f09efac8db7;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.uv0 = IN.uv0;
            float4 _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_a383045772822c87acd099bb4cd6c478_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNMn_79abde32a0223a89907c9f09efac8db7, _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2);
            float _Property_c688e246111fd881820a97415e14d8a3_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_c688e246111fd881820a97415e14d8a3_Out_0, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2);
            float _Split_8cadce726725318fbacd47f436a8231d_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8cadce726725318fbacd47f436a8231d_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8cadce726725318fbacd47f436a8231d_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8cadce726725318fbacd47f436a8231d_A_4 = 0;
            float _Property_ce4e5954a0b7ff8c819fa53963327595_Out_0 = _Cover_Amount;
            float _Property_384059e6344fb98a85eccad78dd82f36_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2;
            Unity_Subtract_float(4, _Property_384059e6344fb98a85eccad78dd82f36_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2);
            float _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2;
            Unity_Divide_float(_Property_ce4e5954a0b7ff8c819fa53963327595_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2);
            float _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1;
            Unity_Absolute_float(_Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2, _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1);
            float _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2;
            Unity_Power_float(_Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2);
            float _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3;
            Unity_Clamp_float(_Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2, 0, 2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3);
            float _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2;
            Unity_Multiply_float_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2);
            float _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1;
            Unity_Saturate_float(_Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2, _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1);
            float _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3;
            Unity_Clamp_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, 0, 0.9999, _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3);
            float _Property_9babc76177853482826cae0163ffe988_Out_0 = _Cover_Max_Angle;
            float _Divide_3b22550205905d8da5870f9db56e44ff_Out_2;
            Unity_Divide_float(_Property_9babc76177853482826cae0163ffe988_Out_0, 45, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2);
            float _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1;
            Unity_OneMinus_float(_Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1);
            float _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2;
            Unity_Subtract_float(_Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1, _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2);
            float _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3;
            Unity_Clamp_float(_Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2, 0, 2, _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3);
            float _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2;
            Unity_Divide_float(1, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2);
            float _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2;
            Unity_Multiply_float_float(_Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2, _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2);
            float _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1;
            Unity_Absolute_float(_Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2, _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1);
            float _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0 = _CoverHardness;
            float _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2;
            Unity_Power_float(_Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2);
            float _Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0 = _Cover_Min_Height;
            float _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1;
            Unity_OneMinus_float(_Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0, _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1);
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_A_4 = 0;
            float _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2;
            Unity_Add_float(_OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1, _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2);
            float _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, 1, _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2);
            float _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3;
            Unity_Clamp_float(_Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2, 0, 1, _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3);
            float _Property_5da709b259ac268bb134d927bcffa4b8_Out_0 = _Cover_Min_Height_Blending;
            float _Add_c322347d9ddbcd83ba52983e9316c387_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Property_5da709b259ac268bb134d927bcffa4b8_Out_0, _Add_c322347d9ddbcd83ba52983e9316c387_Out_2);
            float _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2;
            Unity_Divide_float(_Add_c322347d9ddbcd83ba52983e9316c387_Out_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2);
            float _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1;
            Unity_OneMinus_float(_Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2, _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1);
            float _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2;
            Unity_Add_float(_OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1, -0.5, _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2);
            float _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3;
            Unity_Clamp_float(_Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2, 0, 1, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3);
            float _Add_674fcef023d728848510150af810a103_Out_2;
            Unity_Add_float(_Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3, _Add_674fcef023d728848510150af810a103_Out_2);
            float _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3;
            Unity_Clamp_float(_Add_674fcef023d728848510150af810a103_Out_2, 0, 1, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3);
            float _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2;
            Unity_Multiply_float_float(_Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2);
            float _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2;
            Unity_Multiply_float_float(_Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2);
            float3 _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2, (_Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2.xxx), _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3);
            float3x3 Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1 = normalize(mul(Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent, _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3.xyz).xyz);
            float _Split_600a9d271d96798a94ab28118977defd_R_1 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[0];
            float _Split_600a9d271d96798a94ab28118977defd_G_2 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[1];
            float _Split_600a9d271d96798a94ab28118977defd_B_3 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[2];
            float _Split_600a9d271d96798a94ab28118977defd_A_4 = 0;
            float _Multiply_2e5b010626435f8492a2690396ced19d_Out_2;
            Unity_Multiply_float_float(_Split_600a9d271d96798a94ab28118977defd_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_2e5b010626435f8492a2690396ced19d_Out_2);
            float _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2;
            Unity_Multiply_float_float(_Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2);
            float _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2;
            Unity_Multiply_float_float(_Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2);
            float _Multiply_05614e740451f18f8301586390aa5a0a_Out_2;
            Unity_Multiply_float_float(_Multiply_2e5b010626435f8492a2690396ced19d_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2, _Multiply_05614e740451f18f8301586390aa5a0a_Out_2);
            UnityTexture2D _Property_a14f2476a35d208b988233c852f919ef_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6858a0e821f26a8d87846d325e9bd170;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.uv0 = IN.uv0;
            float4 _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a14f2476a35d208b988233c852f919ef_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_6858a0e821f26a8d87846d325e9bd170, _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2);
            float _Split_16313c20ccdeaa86a639068877a69a2f_R_1 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[0];
            float _Split_16313c20ccdeaa86a639068877a69a2f_G_2 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[1];
            float _Split_16313c20ccdeaa86a639068877a69a2f_B_3 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[2];
            float _Split_16313c20ccdeaa86a639068877a69a2f_A_4 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[3];
            float _Property_673896519f419589938b37e782b90141_Out_0 = _CoverHeightMapMin;
            float _Property_c35906332422438da3b19f45cbd5ac17_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0 = float2(_Property_673896519f419589938b37e782b90141_Out_0, _Property_c35906332422438da3b19f45cbd5ac17_Out_0);
            float _Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0 = _CoverHeightMapOffset;
            float2 _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2;
            Unity_Add_float2(_Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0, (_Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0.xx), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2);
            float _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_B_3, float2 (0, 1), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3);
            float _Multiply_0093be0fd848498b89a0fa282608e715_Out_2;
            Unity_Multiply_float_float(_Multiply_05614e740451f18f8301586390aa5a0a_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2);
            float _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2;
            Unity_Multiply_float_float(_Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2, _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2);
            float _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1;
            Unity_Saturate_float(_Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1);
            float _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2;
            Unity_Multiply_float_float(_Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1, _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2);
            float _Clamp_c95f5515948375878df6581a36d8b203_Out_3;
            Unity_Clamp_float(_Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2, 0, 1, _Clamp_c95f5515948375878df6581a36d8b203_Out_3);
            float _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3;
            Unity_Branch_float(_Property_9ff69c54111eb2859f741d093f22298f_Out_0, _Clamp_c95f5515948375878df6581a36d8b203_Out_3, _Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3);
            float4 _Lerp_87882219e20a6d818c0de017d739125f_Out_3;
            Unity_Lerp_float4(_Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxxx), _Lerp_87882219e20a6d818c0de017d739125f_Out_3);
            UnityTexture2D _Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d26fd10040332c89b94151832fa36c95;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.uv0 = IN.uv0;
            float4 _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_d26fd10040332c89b94151832fa36c95, _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2);
            float _Split_c8dcaee88e16428ab476271a494e0946_R_1 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[0];
            float _Split_c8dcaee88e16428ab476271a494e0946_G_2 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[1];
            float _Split_c8dcaee88e16428ab476271a494e0946_B_3 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[2];
            float _Split_c8dcaee88e16428ab476271a494e0946_A_4 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[3];
            float _Split_81540eba4304c9878d445ae2aad30a44_R_1 = IN.VertexColor[0];
            float _Split_81540eba4304c9878d445ae2aad30a44_G_2 = IN.VertexColor[1];
            float _Split_81540eba4304c9878d445ae2aad30a44_B_3 = IN.VertexColor[2];
            float _Split_81540eba4304c9878d445ae2aad30a44_A_4 = IN.VertexColor[3];
            float _OneMinus_106edffa8269d28e944c403917c0be93_Out_1;
            Unity_OneMinus_float(_Split_81540eba4304c9878d445ae2aad30a44_R_1, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1);
            float _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3;
            Unity_Lerp_float(0, _Split_c8dcaee88e16428ab476271a494e0946_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3);
            float _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2;
            Unity_Multiply_float_float(_Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3, _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0, _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2);
            float _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1;
            Unity_Absolute_float(_Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2, _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1);
            float _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2;
            Unity_Power_float(_Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1, _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0, _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2);
            float _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3;
            Unity_Lerp_float(0, _Split_16313c20ccdeaa86a639068877a69a2f_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3);
            float _Property_cc11b329366008849094e720bdbaad9e_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2;
            Unity_Multiply_float_float(_Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3, _Property_cc11b329366008849094e720bdbaad9e_Out_0, _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2);
            float _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1;
            Unity_Absolute_float(_Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2, _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1);
            float _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_d2f191850ca06f829281d27846b9292a_Out_2;
            Unity_Power_float(_Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1, _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0, _Power_d2f191850ca06f829281d27846b9292a_Out_2);
            float _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3;
            Unity_Lerp_float(_Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2, _Power_d2f191850ca06f829281d27846b9292a_Out_2, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3, _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3);
            float4 _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0, _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2);
            UnityTexture2D _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0 = IN.uv0;
            float2 _Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0 = _NoiseSpeed;
            float2 _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2;
            Unity_Multiply_float2_float2(_Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0, (IN.TimeParameters.x.xx), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2);
            float2 _Add_46357740be2d5a86b5151c5767993e4e_Out_2;
            Unity_Add_float2((_UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0.xy), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2, _Add_46357740be2d5a86b5151c5767993e4e_Out_2);
            float4 _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_46357740be2d5a86b5151c5767993e4e_Out_2));
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_R_4 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.r;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_G_5 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.g;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_B_6 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.b;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.a;
            float2 _Multiply_a2232bab274ab88289a3628364da60c7_Out_2;
            Unity_Multiply_float2_float2(_Add_46357740be2d5a86b5151c5767993e4e_Out_2, float2(-1.2, -0.9), _Multiply_a2232bab274ab88289a3628364da60c7_Out_2);
            float2 _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2;
            Unity_Add_float2(_Multiply_a2232bab274ab88289a3628364da60c7_Out_2, float2(0.5, 0.5), _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2);
            float4 _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2));
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_R_4 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.r;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_G_5 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.g;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_B_6 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.b;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.a;
            float _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2;
            Unity_Minimum_float(_SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7, _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7, _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2);
            float _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1;
            Unity_Absolute_float(_Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2, _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1);
            float _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0 = _EmissionNoisePower;
            float _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2;
            Unity_Power_float(_Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1, _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0, _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2);
            float _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2;
            Unity_Multiply_float_float(_Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2, 20, _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2);
            float _Clamp_943869501048178fbb848b437df184e8_Out_3;
            Unity_Clamp_float(_Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2, 0.05, 1.2, _Clamp_943869501048178fbb848b437df184e8_Out_3);
            float4 _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2;
            Unity_Multiply_float4_float4(_Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2, (_Clamp_943869501048178fbb848b437df184e8_Out_3.xxxx), _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2);
            float4 _Property_1734859c1389ab848dc4063320d66a5d_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_486692dad4d34a8c8410b4771efbf96b_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d60a055f00d779808337e9d909827806_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_486692dad4d34a8c8410b4771efbf96b_Out_0, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2);
            float3 _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3);
            float3 _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1);
            float _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2;
            Unity_DotProduct_float3(_Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1, _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2);
            float _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1;
            Unity_Saturate_float(_DotProduct_845cf97598838e8198e9075e45be98c8_Out_2, _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1);
            float _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1;
            Unity_OneMinus_float(_Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1, _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1);
            float _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1;
            Unity_Absolute_float(_OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1, _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1);
            float _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2;
            Unity_Power_float(_Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1, 10, _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2);
            float4 _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2;
            Unity_Multiply_float4_float4(_Property_1734859c1389ab848dc4063320d66a5d_Out_0, (_Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2.xxxx), _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2);
            float _Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0 = _RimLightPower;
            float4 _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2;
            Unity_Multiply_float4_float4(_Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2, (_Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2);
            float4 _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2);
            float4 _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2;
            Unity_Add_float4(_Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2, _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2);
            float4 _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3;
            Unity_Clamp_float4(_Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, float4(0, 0, 0, 0), _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3);
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_R_1 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[0];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_G_2 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[1];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_B_3 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[2];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[3];
            float _Property_06c41396a31ba582877d3a10387f69e6_Out_0 = _BaseMetallic;
            float _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2;
            Unity_Multiply_float_float(_Split_c8dcaee88e16428ab476271a494e0946_R_1, _Property_06c41396a31ba582877d3a10387f69e6_Out_0, _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2);
            float _Property_2dbdbebc756fb1819344efcc68c07d00_Out_0 = _BaseAORemapMin;
            float _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0 = _BaseAORemapMax;
            float2 _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0 = float2(_Property_2dbdbebc756fb1819344efcc68c07d00_Out_0, _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0);
            float _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3;
            Unity_Remap_float(_Split_c8dcaee88e16428ab476271a494e0946_G_2, float2 (0, 1), _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3);
            float3 _Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0 = float3(_Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3, 0);
            float _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0 = _CoverMetallic;
            float _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2;
            Unity_Multiply_float_float(_Split_16313c20ccdeaa86a639068877a69a2f_R_1, _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0, _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2);
            float _Property_2696a3815c73848db1c5516a77ad7e3e_Out_0 = _CoverAORemapMin;
            float _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0 = _CoverAORemapMax;
            float2 _Vector2_6f054e667fb031849116087b7663e8de_Out_0 = float2(_Property_2696a3815c73848db1c5516a77ad7e3e_Out_0, _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0);
            float _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_G_2, float2 (0, 1), _Vector2_6f054e667fb031849116087b7663e8de_Out_0, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3);
            float3 _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0 = float3(_Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3, 0);
            float3 _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3;
            Unity_Lerp_float3(_Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0, _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3);
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[0];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[1];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_B_3 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[2];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_A_4 = 0;
            surface.BaseColor = (_Lerp_87882219e20a6d818c0de017d739125f_Out_3.xyz);
            surface.Emission = (_Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4;
            surface.Occlusion = _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2;
            surface.NormalTS = _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            surface.Metallic = _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingVisibility.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "ForwardDXR"
            Tags
            {
                "LightMode" = "ForwardDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 ps5
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_FORWARD
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        #define HAS_LIGHTLOOP 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _CoverMaskA_TexelSize;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float _CoverUsePlanarUV;
        float4 _CoverTilingOffset;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float _CoverEmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float4 _Noise_TexelSize;
        float2 _NoiseTiling;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_CoverMaskA);
        SAMPLER(sampler_CoverMaskA);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_e4c53213449c7682b60df6ae54f219f0_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_115fcc827510f38798b214d835c27637_Out_0 = _BaseTilingOffset;
            float _Property_d83b8f290862b285bbe2f157190e1315_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.uv0 = IN.uv0;
            float4 _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_e4c53213449c7682b60df6ae54f219f0_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2);
            float4 _Property_13c79aaf332e20868551d934a2cb7112_Out_0 = _BaseColor;
            float4 _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2, _Property_13c79aaf332e20868551d934a2cb7112_Out_0, _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2);
            UnityTexture2D _Property_b561c414493a8f8299227a27e437f045_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0 = _DetailTilingOffset;
            float _Split_cda27505033cfc8eaf60fe914f0949b9_R_1 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[0];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_G_2 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[1];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_B_3 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[2];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_A_4 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[3];
            float2 _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_R_1, _Split_cda27505033cfc8eaf60fe914f0949b9_G_2);
            float2 _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_B_3, _Split_cda27505033cfc8eaf60fe914f0949b9_A_4);
            float2 _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0, _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0, _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3);
            float4 _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0 = SAMPLE_TEXTURE2D(_Property_b561c414493a8f8299227a27e437f045_Out_0.tex, _Property_b561c414493a8f8299227a27e437f045_Out_0.samplerstate, _Property_b561c414493a8f8299227a27e437f045_Out_0.GetTransformedUV(_TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3));
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.r;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.g;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.b;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.a;
            float _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4, 2, _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2);
            float _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2;
            Unity_Add_float(_Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2, -1, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2);
            float _Property_02e7dd176dc59f8a9a62453677916b24_Out_0 = _DetailAlbedoScale;
            float _Multiply_fd406247e3137a8b8777918477740653_Out_2;
            Unity_Multiply_float_float(_Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Property_02e7dd176dc59f8a9a62453677916b24_Out_0, _Multiply_fd406247e3137a8b8777918477740653_Out_2);
            float _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1;
            Unity_Saturate_float(_Multiply_fd406247e3137a8b8777918477740653_Out_2, _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1);
            float _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1;
            Unity_Absolute_float(_Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73;
            float3 _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(_Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1);
            float _Split_1a45181d77ac838a90665f3132f6a4ef_R_1 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[0];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_G_2 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[1];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_B_3 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[2];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_A_4 = 0;
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_R_1 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[0];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_G_2 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[1];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_B_3 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[2];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[3];
            float _Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0 = float2(_Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0, _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0);
            float _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3;
            Unity_Remap_float(_Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4, float2 (0, 1), _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0, _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3);
            float _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6, 2, _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2);
            float _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2;
            Unity_Add_float(_Multiply_93138f23185e4d83b6825f8212653c3e_Out_2, -1, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2);
            float _Property_dadcc7446e5d388e9a6730406295f93a_Out_0 = _DetailSmoothnessScale;
            float _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2;
            Unity_Multiply_float_float(_Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Property_dadcc7446e5d388e9a6730406295f93a_Out_0, _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2);
            float _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1;
            Unity_Saturate_float(_Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2, _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1);
            float _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1;
            Unity_Absolute_float(_Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7;
            float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1);
            float _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1);
            float4 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4;
            float3 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5;
            float2 _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6;
            Unity_Combine_float(_Split_1a45181d77ac838a90665f3132f6a4ef_R_1, _Split_1a45181d77ac838a90665f3132f6a4ef_G_2, _Split_1a45181d77ac838a90665f3132f6a4ef_B_3, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5, _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6);
            UnityTexture2D _Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0 = _CoverTilingOffset;
            float _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.uv0 = IN.uv0;
            float4 _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2);
            float4 _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0 = _CoverBaseColor;
            float4 _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2, _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0, _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2);
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[0];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[1];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[2];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_A_4 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[3];
            float _Split_7bf3828fa790d989ac06f803f35a2027_R_1 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[0];
            float _Split_7bf3828fa790d989ac06f803f35a2027_G_2 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[1];
            float _Split_7bf3828fa790d989ac06f803f35a2027_B_3 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[2];
            float _Split_7bf3828fa790d989ac06f803f35a2027_A_4 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[3];
            float _Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0 = float2(_Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0, _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0);
            float _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3;
            Unity_Remap_float(_Split_7bf3828fa790d989ac06f803f35a2027_A_4, float2 (0, 1), _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3);
            float4 _Combine_750b21380a24ad809d449001e091b966_RGBA_4;
            float3 _Combine_750b21380a24ad809d449001e091b966_RGB_5;
            float2 _Combine_750b21380a24ad809d449001e091b966_RG_6;
            Unity_Combine_float(_Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1, _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2, _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGB_5, _Combine_750b21380a24ad809d449001e091b966_RG_6);
            float _Property_9ff69c54111eb2859f741d093f22298f_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskA);
            float4 _UV_045cea9e82354980a778f44d92578382_Out_0 = IN.uv0;
            float4 _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0 = SAMPLE_TEXTURE2D(_Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.tex, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.samplerstate, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.GetTransformedUV((_UV_045cea9e82354980a778f44d92578382_Out_0.xy)));
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_R_4 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.r;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_G_5 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.g;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_B_6 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.b;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.a;
            float _Property_4e8240836843df81941cdf6cf2cdd638_Out_0 = _CoverMaskPower;
            float _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7, _Property_4e8240836843df81941cdf6cf2cdd638_Out_0, _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2);
            float _Clamp_030a7c32684c258084338456eaddc77a_Out_3;
            Unity_Clamp_float(_Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2, 0, 1, _Clamp_030a7c32684c258084338456eaddc77a_Out_3);
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_R_1 = IN.VertexColor[0];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2 = IN.VertexColor[1];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_B_3 = IN.VertexColor[2];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_A_4 = IN.VertexColor[3];
            float2 _Vector2_65060e9a9f687a89b68e32dc876be645_Out_0 = float2(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7, _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5);
            float2 _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2;
            Unity_Multiply_float2_float2(_Vector2_65060e9a9f687a89b68e32dc876be645_Out_0, float2(2, 2), _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2);
            float2 _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2;
            Unity_Add_float2(_Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2, float2(-1, -1), _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2);
            float _Property_08b99582093b36869beb5ea3d18e765d_Out_0 = _DetailNormalScale;
            float2 _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2;
            Unity_Multiply_float2_float2(_Add_98b310e19c5fa5899c39cc45969c15ea_Out_2, (_Property_08b99582093b36869beb5ea3d18e765d_Out_0.xx), _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2);
            float _Split_26c1e73f8436c78ebdae5b51365a072b_R_1 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[0];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_G_2 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[1];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_B_3 = 0;
            float _Split_26c1e73f8436c78ebdae5b51365a072b_A_4 = 0;
            float _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2;
            Unity_DotProduct_float2(_Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2);
            float _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1;
            Unity_Saturate_float(_DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2, _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1);
            float _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1;
            Unity_OneMinus_float(_Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1, _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1);
            float _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1;
            Unity_SquareRoot_float(_OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            float3 _Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0 = float3(_Split_26c1e73f8436c78ebdae5b51365a072b_R_1, _Split_26c1e73f8436c78ebdae5b51365a072b_G_2, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            UnityTexture2D _Property_2cc39234d3d334899f94126a216a50fc_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.uv0 = IN.uv0;
            float4 _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_2cc39234d3d334899f94126a216a50fc_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2);
            float _Property_020d569f63e9a2849e23988ff74eb005_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2.xyz), _Property_020d569f63e9a2849e23988ff74eb005_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2);
            float3 _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2;
            Unity_NormalBlend_float(_Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2, _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2);
            UnityTexture2D _Property_a383045772822c87acd099bb4cd6c478_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_79abde32a0223a89907c9f09efac8db7;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.uv0 = IN.uv0;
            float4 _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_a383045772822c87acd099bb4cd6c478_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNMn_79abde32a0223a89907c9f09efac8db7, _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2);
            float _Property_c688e246111fd881820a97415e14d8a3_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_c688e246111fd881820a97415e14d8a3_Out_0, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2);
            float _Split_8cadce726725318fbacd47f436a8231d_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8cadce726725318fbacd47f436a8231d_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8cadce726725318fbacd47f436a8231d_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8cadce726725318fbacd47f436a8231d_A_4 = 0;
            float _Property_ce4e5954a0b7ff8c819fa53963327595_Out_0 = _Cover_Amount;
            float _Property_384059e6344fb98a85eccad78dd82f36_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2;
            Unity_Subtract_float(4, _Property_384059e6344fb98a85eccad78dd82f36_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2);
            float _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2;
            Unity_Divide_float(_Property_ce4e5954a0b7ff8c819fa53963327595_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2);
            float _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1;
            Unity_Absolute_float(_Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2, _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1);
            float _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2;
            Unity_Power_float(_Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2);
            float _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3;
            Unity_Clamp_float(_Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2, 0, 2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3);
            float _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2;
            Unity_Multiply_float_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2);
            float _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1;
            Unity_Saturate_float(_Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2, _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1);
            float _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3;
            Unity_Clamp_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, 0, 0.9999, _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3);
            float _Property_9babc76177853482826cae0163ffe988_Out_0 = _Cover_Max_Angle;
            float _Divide_3b22550205905d8da5870f9db56e44ff_Out_2;
            Unity_Divide_float(_Property_9babc76177853482826cae0163ffe988_Out_0, 45, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2);
            float _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1;
            Unity_OneMinus_float(_Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1);
            float _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2;
            Unity_Subtract_float(_Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1, _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2);
            float _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3;
            Unity_Clamp_float(_Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2, 0, 2, _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3);
            float _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2;
            Unity_Divide_float(1, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2);
            float _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2;
            Unity_Multiply_float_float(_Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2, _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2);
            float _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1;
            Unity_Absolute_float(_Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2, _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1);
            float _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0 = _CoverHardness;
            float _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2;
            Unity_Power_float(_Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2);
            float _Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0 = _Cover_Min_Height;
            float _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1;
            Unity_OneMinus_float(_Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0, _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1);
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_A_4 = 0;
            float _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2;
            Unity_Add_float(_OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1, _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2);
            float _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, 1, _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2);
            float _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3;
            Unity_Clamp_float(_Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2, 0, 1, _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3);
            float _Property_5da709b259ac268bb134d927bcffa4b8_Out_0 = _Cover_Min_Height_Blending;
            float _Add_c322347d9ddbcd83ba52983e9316c387_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Property_5da709b259ac268bb134d927bcffa4b8_Out_0, _Add_c322347d9ddbcd83ba52983e9316c387_Out_2);
            float _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2;
            Unity_Divide_float(_Add_c322347d9ddbcd83ba52983e9316c387_Out_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2);
            float _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1;
            Unity_OneMinus_float(_Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2, _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1);
            float _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2;
            Unity_Add_float(_OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1, -0.5, _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2);
            float _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3;
            Unity_Clamp_float(_Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2, 0, 1, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3);
            float _Add_674fcef023d728848510150af810a103_Out_2;
            Unity_Add_float(_Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3, _Add_674fcef023d728848510150af810a103_Out_2);
            float _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3;
            Unity_Clamp_float(_Add_674fcef023d728848510150af810a103_Out_2, 0, 1, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3);
            float _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2;
            Unity_Multiply_float_float(_Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2);
            float _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2;
            Unity_Multiply_float_float(_Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2);
            float3 _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2, (_Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2.xxx), _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3);
            float3x3 Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1 = normalize(mul(Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent, _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3.xyz).xyz);
            float _Split_600a9d271d96798a94ab28118977defd_R_1 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[0];
            float _Split_600a9d271d96798a94ab28118977defd_G_2 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[1];
            float _Split_600a9d271d96798a94ab28118977defd_B_3 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[2];
            float _Split_600a9d271d96798a94ab28118977defd_A_4 = 0;
            float _Multiply_2e5b010626435f8492a2690396ced19d_Out_2;
            Unity_Multiply_float_float(_Split_600a9d271d96798a94ab28118977defd_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_2e5b010626435f8492a2690396ced19d_Out_2);
            float _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2;
            Unity_Multiply_float_float(_Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2);
            float _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2;
            Unity_Multiply_float_float(_Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2);
            float _Multiply_05614e740451f18f8301586390aa5a0a_Out_2;
            Unity_Multiply_float_float(_Multiply_2e5b010626435f8492a2690396ced19d_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2, _Multiply_05614e740451f18f8301586390aa5a0a_Out_2);
            UnityTexture2D _Property_a14f2476a35d208b988233c852f919ef_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6858a0e821f26a8d87846d325e9bd170;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.uv0 = IN.uv0;
            float4 _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a14f2476a35d208b988233c852f919ef_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_6858a0e821f26a8d87846d325e9bd170, _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2);
            float _Split_16313c20ccdeaa86a639068877a69a2f_R_1 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[0];
            float _Split_16313c20ccdeaa86a639068877a69a2f_G_2 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[1];
            float _Split_16313c20ccdeaa86a639068877a69a2f_B_3 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[2];
            float _Split_16313c20ccdeaa86a639068877a69a2f_A_4 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[3];
            float _Property_673896519f419589938b37e782b90141_Out_0 = _CoverHeightMapMin;
            float _Property_c35906332422438da3b19f45cbd5ac17_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0 = float2(_Property_673896519f419589938b37e782b90141_Out_0, _Property_c35906332422438da3b19f45cbd5ac17_Out_0);
            float _Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0 = _CoverHeightMapOffset;
            float2 _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2;
            Unity_Add_float2(_Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0, (_Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0.xx), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2);
            float _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_B_3, float2 (0, 1), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3);
            float _Multiply_0093be0fd848498b89a0fa282608e715_Out_2;
            Unity_Multiply_float_float(_Multiply_05614e740451f18f8301586390aa5a0a_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2);
            float _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2;
            Unity_Multiply_float_float(_Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2, _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2);
            float _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1;
            Unity_Saturate_float(_Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1);
            float _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2;
            Unity_Multiply_float_float(_Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1, _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2);
            float _Clamp_c95f5515948375878df6581a36d8b203_Out_3;
            Unity_Clamp_float(_Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2, 0, 1, _Clamp_c95f5515948375878df6581a36d8b203_Out_3);
            float _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3;
            Unity_Branch_float(_Property_9ff69c54111eb2859f741d093f22298f_Out_0, _Clamp_c95f5515948375878df6581a36d8b203_Out_3, _Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3);
            float4 _Lerp_87882219e20a6d818c0de017d739125f_Out_3;
            Unity_Lerp_float4(_Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxxx), _Lerp_87882219e20a6d818c0de017d739125f_Out_3);
            UnityTexture2D _Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d26fd10040332c89b94151832fa36c95;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.uv0 = IN.uv0;
            float4 _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_d26fd10040332c89b94151832fa36c95, _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2);
            float _Split_c8dcaee88e16428ab476271a494e0946_R_1 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[0];
            float _Split_c8dcaee88e16428ab476271a494e0946_G_2 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[1];
            float _Split_c8dcaee88e16428ab476271a494e0946_B_3 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[2];
            float _Split_c8dcaee88e16428ab476271a494e0946_A_4 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[3];
            float _Split_81540eba4304c9878d445ae2aad30a44_R_1 = IN.VertexColor[0];
            float _Split_81540eba4304c9878d445ae2aad30a44_G_2 = IN.VertexColor[1];
            float _Split_81540eba4304c9878d445ae2aad30a44_B_3 = IN.VertexColor[2];
            float _Split_81540eba4304c9878d445ae2aad30a44_A_4 = IN.VertexColor[3];
            float _OneMinus_106edffa8269d28e944c403917c0be93_Out_1;
            Unity_OneMinus_float(_Split_81540eba4304c9878d445ae2aad30a44_R_1, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1);
            float _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3;
            Unity_Lerp_float(0, _Split_c8dcaee88e16428ab476271a494e0946_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3);
            float _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2;
            Unity_Multiply_float_float(_Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3, _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0, _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2);
            float _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1;
            Unity_Absolute_float(_Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2, _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1);
            float _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2;
            Unity_Power_float(_Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1, _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0, _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2);
            float _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3;
            Unity_Lerp_float(0, _Split_16313c20ccdeaa86a639068877a69a2f_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3);
            float _Property_cc11b329366008849094e720bdbaad9e_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2;
            Unity_Multiply_float_float(_Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3, _Property_cc11b329366008849094e720bdbaad9e_Out_0, _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2);
            float _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1;
            Unity_Absolute_float(_Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2, _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1);
            float _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_d2f191850ca06f829281d27846b9292a_Out_2;
            Unity_Power_float(_Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1, _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0, _Power_d2f191850ca06f829281d27846b9292a_Out_2);
            float _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3;
            Unity_Lerp_float(_Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2, _Power_d2f191850ca06f829281d27846b9292a_Out_2, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3, _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3);
            float4 _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0, _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2);
            UnityTexture2D _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0 = IN.uv0;
            float2 _Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0 = _NoiseSpeed;
            float2 _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2;
            Unity_Multiply_float2_float2(_Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0, (IN.TimeParameters.x.xx), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2);
            float2 _Add_46357740be2d5a86b5151c5767993e4e_Out_2;
            Unity_Add_float2((_UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0.xy), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2, _Add_46357740be2d5a86b5151c5767993e4e_Out_2);
            float4 _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_46357740be2d5a86b5151c5767993e4e_Out_2));
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_R_4 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.r;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_G_5 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.g;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_B_6 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.b;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.a;
            float2 _Multiply_a2232bab274ab88289a3628364da60c7_Out_2;
            Unity_Multiply_float2_float2(_Add_46357740be2d5a86b5151c5767993e4e_Out_2, float2(-1.2, -0.9), _Multiply_a2232bab274ab88289a3628364da60c7_Out_2);
            float2 _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2;
            Unity_Add_float2(_Multiply_a2232bab274ab88289a3628364da60c7_Out_2, float2(0.5, 0.5), _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2);
            float4 _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2));
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_R_4 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.r;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_G_5 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.g;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_B_6 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.b;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.a;
            float _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2;
            Unity_Minimum_float(_SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7, _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7, _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2);
            float _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1;
            Unity_Absolute_float(_Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2, _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1);
            float _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0 = _EmissionNoisePower;
            float _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2;
            Unity_Power_float(_Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1, _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0, _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2);
            float _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2;
            Unity_Multiply_float_float(_Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2, 20, _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2);
            float _Clamp_943869501048178fbb848b437df184e8_Out_3;
            Unity_Clamp_float(_Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2, 0.05, 1.2, _Clamp_943869501048178fbb848b437df184e8_Out_3);
            float4 _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2;
            Unity_Multiply_float4_float4(_Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2, (_Clamp_943869501048178fbb848b437df184e8_Out_3.xxxx), _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2);
            float4 _Property_1734859c1389ab848dc4063320d66a5d_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_486692dad4d34a8c8410b4771efbf96b_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d60a055f00d779808337e9d909827806_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_486692dad4d34a8c8410b4771efbf96b_Out_0, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2);
            float3 _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3);
            float3 _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1);
            float _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2;
            Unity_DotProduct_float3(_Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1, _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2);
            float _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1;
            Unity_Saturate_float(_DotProduct_845cf97598838e8198e9075e45be98c8_Out_2, _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1);
            float _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1;
            Unity_OneMinus_float(_Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1, _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1);
            float _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1;
            Unity_Absolute_float(_OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1, _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1);
            float _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2;
            Unity_Power_float(_Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1, 10, _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2);
            float4 _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2;
            Unity_Multiply_float4_float4(_Property_1734859c1389ab848dc4063320d66a5d_Out_0, (_Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2.xxxx), _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2);
            float _Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0 = _RimLightPower;
            float4 _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2;
            Unity_Multiply_float4_float4(_Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2, (_Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2);
            float4 _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2);
            float4 _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2;
            Unity_Add_float4(_Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2, _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2);
            float4 _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3;
            Unity_Clamp_float4(_Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, float4(0, 0, 0, 0), _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3);
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_R_1 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[0];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_G_2 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[1];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_B_3 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[2];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[3];
            float _Property_06c41396a31ba582877d3a10387f69e6_Out_0 = _BaseMetallic;
            float _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2;
            Unity_Multiply_float_float(_Split_c8dcaee88e16428ab476271a494e0946_R_1, _Property_06c41396a31ba582877d3a10387f69e6_Out_0, _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2);
            float _Property_2dbdbebc756fb1819344efcc68c07d00_Out_0 = _BaseAORemapMin;
            float _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0 = _BaseAORemapMax;
            float2 _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0 = float2(_Property_2dbdbebc756fb1819344efcc68c07d00_Out_0, _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0);
            float _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3;
            Unity_Remap_float(_Split_c8dcaee88e16428ab476271a494e0946_G_2, float2 (0, 1), _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3);
            float3 _Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0 = float3(_Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3, 0);
            float _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0 = _CoverMetallic;
            float _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2;
            Unity_Multiply_float_float(_Split_16313c20ccdeaa86a639068877a69a2f_R_1, _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0, _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2);
            float _Property_2696a3815c73848db1c5516a77ad7e3e_Out_0 = _CoverAORemapMin;
            float _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0 = _CoverAORemapMax;
            float2 _Vector2_6f054e667fb031849116087b7663e8de_Out_0 = float2(_Property_2696a3815c73848db1c5516a77ad7e3e_Out_0, _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0);
            float _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_G_2, float2 (0, 1), _Vector2_6f054e667fb031849116087b7663e8de_Out_0, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3);
            float3 _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0 = float3(_Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3, 0);
            float3 _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3;
            Unity_Lerp_float3(_Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0, _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3);
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[0];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[1];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_B_3 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[2];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_A_4 = 0;
            surface.BaseColor = (_Lerp_87882219e20a6d818c0de017d739125f_Out_3.xyz);
            surface.Emission = (_Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4;
            surface.Occlusion = _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2;
            surface.NormalTS = _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            surface.Metallic = _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingForward.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "GBufferDXR"
            Tags
            {
                "LightMode" = "GBufferDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 ps5
        
            // Keywords
            #pragma multi_compile _ MINIMAL_GBUFFER
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_GBUFFER
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _CoverMaskA_TexelSize;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float _CoverUsePlanarUV;
        float4 _CoverTilingOffset;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float _CoverEmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float4 _Noise_TexelSize;
        float2 _NoiseTiling;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_CoverMaskA);
        SAMPLER(sampler_CoverMaskA);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Deferred/RaytracingIntersectonGBuffer.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/StandardLit/StandardLit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_e4c53213449c7682b60df6ae54f219f0_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_115fcc827510f38798b214d835c27637_Out_0 = _BaseTilingOffset;
            float _Property_d83b8f290862b285bbe2f157190e1315_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.uv0 = IN.uv0;
            float4 _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_e4c53213449c7682b60df6ae54f219f0_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2);
            float4 _Property_13c79aaf332e20868551d934a2cb7112_Out_0 = _BaseColor;
            float4 _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2, _Property_13c79aaf332e20868551d934a2cb7112_Out_0, _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2);
            UnityTexture2D _Property_b561c414493a8f8299227a27e437f045_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0 = _DetailTilingOffset;
            float _Split_cda27505033cfc8eaf60fe914f0949b9_R_1 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[0];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_G_2 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[1];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_B_3 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[2];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_A_4 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[3];
            float2 _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_R_1, _Split_cda27505033cfc8eaf60fe914f0949b9_G_2);
            float2 _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_B_3, _Split_cda27505033cfc8eaf60fe914f0949b9_A_4);
            float2 _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0, _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0, _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3);
            float4 _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0 = SAMPLE_TEXTURE2D(_Property_b561c414493a8f8299227a27e437f045_Out_0.tex, _Property_b561c414493a8f8299227a27e437f045_Out_0.samplerstate, _Property_b561c414493a8f8299227a27e437f045_Out_0.GetTransformedUV(_TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3));
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.r;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.g;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.b;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.a;
            float _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4, 2, _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2);
            float _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2;
            Unity_Add_float(_Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2, -1, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2);
            float _Property_02e7dd176dc59f8a9a62453677916b24_Out_0 = _DetailAlbedoScale;
            float _Multiply_fd406247e3137a8b8777918477740653_Out_2;
            Unity_Multiply_float_float(_Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Property_02e7dd176dc59f8a9a62453677916b24_Out_0, _Multiply_fd406247e3137a8b8777918477740653_Out_2);
            float _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1;
            Unity_Saturate_float(_Multiply_fd406247e3137a8b8777918477740653_Out_2, _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1);
            float _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1;
            Unity_Absolute_float(_Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73;
            float3 _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(_Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1);
            float _Split_1a45181d77ac838a90665f3132f6a4ef_R_1 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[0];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_G_2 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[1];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_B_3 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[2];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_A_4 = 0;
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_R_1 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[0];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_G_2 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[1];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_B_3 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[2];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[3];
            float _Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0 = float2(_Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0, _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0);
            float _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3;
            Unity_Remap_float(_Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4, float2 (0, 1), _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0, _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3);
            float _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6, 2, _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2);
            float _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2;
            Unity_Add_float(_Multiply_93138f23185e4d83b6825f8212653c3e_Out_2, -1, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2);
            float _Property_dadcc7446e5d388e9a6730406295f93a_Out_0 = _DetailSmoothnessScale;
            float _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2;
            Unity_Multiply_float_float(_Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Property_dadcc7446e5d388e9a6730406295f93a_Out_0, _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2);
            float _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1;
            Unity_Saturate_float(_Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2, _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1);
            float _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1;
            Unity_Absolute_float(_Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7;
            float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1);
            float _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1);
            float4 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4;
            float3 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5;
            float2 _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6;
            Unity_Combine_float(_Split_1a45181d77ac838a90665f3132f6a4ef_R_1, _Split_1a45181d77ac838a90665f3132f6a4ef_G_2, _Split_1a45181d77ac838a90665f3132f6a4ef_B_3, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5, _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6);
            UnityTexture2D _Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0 = _CoverTilingOffset;
            float _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.uv0 = IN.uv0;
            float4 _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2);
            float4 _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0 = _CoverBaseColor;
            float4 _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2, _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0, _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2);
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[0];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[1];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[2];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_A_4 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[3];
            float _Split_7bf3828fa790d989ac06f803f35a2027_R_1 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[0];
            float _Split_7bf3828fa790d989ac06f803f35a2027_G_2 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[1];
            float _Split_7bf3828fa790d989ac06f803f35a2027_B_3 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[2];
            float _Split_7bf3828fa790d989ac06f803f35a2027_A_4 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[3];
            float _Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0 = float2(_Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0, _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0);
            float _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3;
            Unity_Remap_float(_Split_7bf3828fa790d989ac06f803f35a2027_A_4, float2 (0, 1), _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3);
            float4 _Combine_750b21380a24ad809d449001e091b966_RGBA_4;
            float3 _Combine_750b21380a24ad809d449001e091b966_RGB_5;
            float2 _Combine_750b21380a24ad809d449001e091b966_RG_6;
            Unity_Combine_float(_Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1, _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2, _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGB_5, _Combine_750b21380a24ad809d449001e091b966_RG_6);
            float _Property_9ff69c54111eb2859f741d093f22298f_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskA);
            float4 _UV_045cea9e82354980a778f44d92578382_Out_0 = IN.uv0;
            float4 _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0 = SAMPLE_TEXTURE2D(_Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.tex, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.samplerstate, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.GetTransformedUV((_UV_045cea9e82354980a778f44d92578382_Out_0.xy)));
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_R_4 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.r;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_G_5 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.g;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_B_6 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.b;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.a;
            float _Property_4e8240836843df81941cdf6cf2cdd638_Out_0 = _CoverMaskPower;
            float _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7, _Property_4e8240836843df81941cdf6cf2cdd638_Out_0, _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2);
            float _Clamp_030a7c32684c258084338456eaddc77a_Out_3;
            Unity_Clamp_float(_Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2, 0, 1, _Clamp_030a7c32684c258084338456eaddc77a_Out_3);
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_R_1 = IN.VertexColor[0];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2 = IN.VertexColor[1];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_B_3 = IN.VertexColor[2];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_A_4 = IN.VertexColor[3];
            float2 _Vector2_65060e9a9f687a89b68e32dc876be645_Out_0 = float2(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7, _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5);
            float2 _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2;
            Unity_Multiply_float2_float2(_Vector2_65060e9a9f687a89b68e32dc876be645_Out_0, float2(2, 2), _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2);
            float2 _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2;
            Unity_Add_float2(_Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2, float2(-1, -1), _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2);
            float _Property_08b99582093b36869beb5ea3d18e765d_Out_0 = _DetailNormalScale;
            float2 _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2;
            Unity_Multiply_float2_float2(_Add_98b310e19c5fa5899c39cc45969c15ea_Out_2, (_Property_08b99582093b36869beb5ea3d18e765d_Out_0.xx), _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2);
            float _Split_26c1e73f8436c78ebdae5b51365a072b_R_1 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[0];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_G_2 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[1];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_B_3 = 0;
            float _Split_26c1e73f8436c78ebdae5b51365a072b_A_4 = 0;
            float _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2;
            Unity_DotProduct_float2(_Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2);
            float _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1;
            Unity_Saturate_float(_DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2, _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1);
            float _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1;
            Unity_OneMinus_float(_Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1, _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1);
            float _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1;
            Unity_SquareRoot_float(_OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            float3 _Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0 = float3(_Split_26c1e73f8436c78ebdae5b51365a072b_R_1, _Split_26c1e73f8436c78ebdae5b51365a072b_G_2, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            UnityTexture2D _Property_2cc39234d3d334899f94126a216a50fc_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.uv0 = IN.uv0;
            float4 _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_2cc39234d3d334899f94126a216a50fc_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2);
            float _Property_020d569f63e9a2849e23988ff74eb005_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2.xyz), _Property_020d569f63e9a2849e23988ff74eb005_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2);
            float3 _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2;
            Unity_NormalBlend_float(_Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2, _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2);
            UnityTexture2D _Property_a383045772822c87acd099bb4cd6c478_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_79abde32a0223a89907c9f09efac8db7;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.uv0 = IN.uv0;
            float4 _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_a383045772822c87acd099bb4cd6c478_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNMn_79abde32a0223a89907c9f09efac8db7, _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2);
            float _Property_c688e246111fd881820a97415e14d8a3_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_c688e246111fd881820a97415e14d8a3_Out_0, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2);
            float _Split_8cadce726725318fbacd47f436a8231d_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8cadce726725318fbacd47f436a8231d_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8cadce726725318fbacd47f436a8231d_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8cadce726725318fbacd47f436a8231d_A_4 = 0;
            float _Property_ce4e5954a0b7ff8c819fa53963327595_Out_0 = _Cover_Amount;
            float _Property_384059e6344fb98a85eccad78dd82f36_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2;
            Unity_Subtract_float(4, _Property_384059e6344fb98a85eccad78dd82f36_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2);
            float _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2;
            Unity_Divide_float(_Property_ce4e5954a0b7ff8c819fa53963327595_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2);
            float _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1;
            Unity_Absolute_float(_Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2, _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1);
            float _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2;
            Unity_Power_float(_Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2);
            float _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3;
            Unity_Clamp_float(_Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2, 0, 2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3);
            float _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2;
            Unity_Multiply_float_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2);
            float _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1;
            Unity_Saturate_float(_Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2, _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1);
            float _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3;
            Unity_Clamp_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, 0, 0.9999, _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3);
            float _Property_9babc76177853482826cae0163ffe988_Out_0 = _Cover_Max_Angle;
            float _Divide_3b22550205905d8da5870f9db56e44ff_Out_2;
            Unity_Divide_float(_Property_9babc76177853482826cae0163ffe988_Out_0, 45, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2);
            float _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1;
            Unity_OneMinus_float(_Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1);
            float _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2;
            Unity_Subtract_float(_Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1, _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2);
            float _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3;
            Unity_Clamp_float(_Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2, 0, 2, _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3);
            float _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2;
            Unity_Divide_float(1, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2);
            float _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2;
            Unity_Multiply_float_float(_Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2, _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2);
            float _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1;
            Unity_Absolute_float(_Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2, _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1);
            float _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0 = _CoverHardness;
            float _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2;
            Unity_Power_float(_Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2);
            float _Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0 = _Cover_Min_Height;
            float _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1;
            Unity_OneMinus_float(_Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0, _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1);
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_A_4 = 0;
            float _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2;
            Unity_Add_float(_OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1, _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2);
            float _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, 1, _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2);
            float _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3;
            Unity_Clamp_float(_Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2, 0, 1, _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3);
            float _Property_5da709b259ac268bb134d927bcffa4b8_Out_0 = _Cover_Min_Height_Blending;
            float _Add_c322347d9ddbcd83ba52983e9316c387_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Property_5da709b259ac268bb134d927bcffa4b8_Out_0, _Add_c322347d9ddbcd83ba52983e9316c387_Out_2);
            float _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2;
            Unity_Divide_float(_Add_c322347d9ddbcd83ba52983e9316c387_Out_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2);
            float _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1;
            Unity_OneMinus_float(_Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2, _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1);
            float _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2;
            Unity_Add_float(_OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1, -0.5, _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2);
            float _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3;
            Unity_Clamp_float(_Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2, 0, 1, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3);
            float _Add_674fcef023d728848510150af810a103_Out_2;
            Unity_Add_float(_Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3, _Add_674fcef023d728848510150af810a103_Out_2);
            float _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3;
            Unity_Clamp_float(_Add_674fcef023d728848510150af810a103_Out_2, 0, 1, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3);
            float _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2;
            Unity_Multiply_float_float(_Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2);
            float _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2;
            Unity_Multiply_float_float(_Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2);
            float3 _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2, (_Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2.xxx), _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3);
            float3x3 Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1 = normalize(mul(Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent, _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3.xyz).xyz);
            float _Split_600a9d271d96798a94ab28118977defd_R_1 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[0];
            float _Split_600a9d271d96798a94ab28118977defd_G_2 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[1];
            float _Split_600a9d271d96798a94ab28118977defd_B_3 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[2];
            float _Split_600a9d271d96798a94ab28118977defd_A_4 = 0;
            float _Multiply_2e5b010626435f8492a2690396ced19d_Out_2;
            Unity_Multiply_float_float(_Split_600a9d271d96798a94ab28118977defd_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_2e5b010626435f8492a2690396ced19d_Out_2);
            float _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2;
            Unity_Multiply_float_float(_Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2);
            float _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2;
            Unity_Multiply_float_float(_Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2);
            float _Multiply_05614e740451f18f8301586390aa5a0a_Out_2;
            Unity_Multiply_float_float(_Multiply_2e5b010626435f8492a2690396ced19d_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2, _Multiply_05614e740451f18f8301586390aa5a0a_Out_2);
            UnityTexture2D _Property_a14f2476a35d208b988233c852f919ef_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6858a0e821f26a8d87846d325e9bd170;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.uv0 = IN.uv0;
            float4 _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a14f2476a35d208b988233c852f919ef_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_6858a0e821f26a8d87846d325e9bd170, _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2);
            float _Split_16313c20ccdeaa86a639068877a69a2f_R_1 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[0];
            float _Split_16313c20ccdeaa86a639068877a69a2f_G_2 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[1];
            float _Split_16313c20ccdeaa86a639068877a69a2f_B_3 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[2];
            float _Split_16313c20ccdeaa86a639068877a69a2f_A_4 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[3];
            float _Property_673896519f419589938b37e782b90141_Out_0 = _CoverHeightMapMin;
            float _Property_c35906332422438da3b19f45cbd5ac17_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0 = float2(_Property_673896519f419589938b37e782b90141_Out_0, _Property_c35906332422438da3b19f45cbd5ac17_Out_0);
            float _Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0 = _CoverHeightMapOffset;
            float2 _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2;
            Unity_Add_float2(_Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0, (_Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0.xx), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2);
            float _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_B_3, float2 (0, 1), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3);
            float _Multiply_0093be0fd848498b89a0fa282608e715_Out_2;
            Unity_Multiply_float_float(_Multiply_05614e740451f18f8301586390aa5a0a_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2);
            float _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2;
            Unity_Multiply_float_float(_Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2, _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2);
            float _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1;
            Unity_Saturate_float(_Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1);
            float _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2;
            Unity_Multiply_float_float(_Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1, _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2);
            float _Clamp_c95f5515948375878df6581a36d8b203_Out_3;
            Unity_Clamp_float(_Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2, 0, 1, _Clamp_c95f5515948375878df6581a36d8b203_Out_3);
            float _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3;
            Unity_Branch_float(_Property_9ff69c54111eb2859f741d093f22298f_Out_0, _Clamp_c95f5515948375878df6581a36d8b203_Out_3, _Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3);
            float4 _Lerp_87882219e20a6d818c0de017d739125f_Out_3;
            Unity_Lerp_float4(_Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxxx), _Lerp_87882219e20a6d818c0de017d739125f_Out_3);
            UnityTexture2D _Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d26fd10040332c89b94151832fa36c95;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.uv0 = IN.uv0;
            float4 _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_d26fd10040332c89b94151832fa36c95, _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2);
            float _Split_c8dcaee88e16428ab476271a494e0946_R_1 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[0];
            float _Split_c8dcaee88e16428ab476271a494e0946_G_2 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[1];
            float _Split_c8dcaee88e16428ab476271a494e0946_B_3 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[2];
            float _Split_c8dcaee88e16428ab476271a494e0946_A_4 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[3];
            float _Split_81540eba4304c9878d445ae2aad30a44_R_1 = IN.VertexColor[0];
            float _Split_81540eba4304c9878d445ae2aad30a44_G_2 = IN.VertexColor[1];
            float _Split_81540eba4304c9878d445ae2aad30a44_B_3 = IN.VertexColor[2];
            float _Split_81540eba4304c9878d445ae2aad30a44_A_4 = IN.VertexColor[3];
            float _OneMinus_106edffa8269d28e944c403917c0be93_Out_1;
            Unity_OneMinus_float(_Split_81540eba4304c9878d445ae2aad30a44_R_1, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1);
            float _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3;
            Unity_Lerp_float(0, _Split_c8dcaee88e16428ab476271a494e0946_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3);
            float _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2;
            Unity_Multiply_float_float(_Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3, _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0, _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2);
            float _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1;
            Unity_Absolute_float(_Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2, _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1);
            float _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2;
            Unity_Power_float(_Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1, _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0, _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2);
            float _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3;
            Unity_Lerp_float(0, _Split_16313c20ccdeaa86a639068877a69a2f_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3);
            float _Property_cc11b329366008849094e720bdbaad9e_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2;
            Unity_Multiply_float_float(_Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3, _Property_cc11b329366008849094e720bdbaad9e_Out_0, _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2);
            float _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1;
            Unity_Absolute_float(_Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2, _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1);
            float _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_d2f191850ca06f829281d27846b9292a_Out_2;
            Unity_Power_float(_Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1, _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0, _Power_d2f191850ca06f829281d27846b9292a_Out_2);
            float _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3;
            Unity_Lerp_float(_Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2, _Power_d2f191850ca06f829281d27846b9292a_Out_2, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3, _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3);
            float4 _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0, _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2);
            UnityTexture2D _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0 = IN.uv0;
            float2 _Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0 = _NoiseSpeed;
            float2 _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2;
            Unity_Multiply_float2_float2(_Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0, (IN.TimeParameters.x.xx), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2);
            float2 _Add_46357740be2d5a86b5151c5767993e4e_Out_2;
            Unity_Add_float2((_UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0.xy), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2, _Add_46357740be2d5a86b5151c5767993e4e_Out_2);
            float4 _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_46357740be2d5a86b5151c5767993e4e_Out_2));
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_R_4 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.r;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_G_5 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.g;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_B_6 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.b;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.a;
            float2 _Multiply_a2232bab274ab88289a3628364da60c7_Out_2;
            Unity_Multiply_float2_float2(_Add_46357740be2d5a86b5151c5767993e4e_Out_2, float2(-1.2, -0.9), _Multiply_a2232bab274ab88289a3628364da60c7_Out_2);
            float2 _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2;
            Unity_Add_float2(_Multiply_a2232bab274ab88289a3628364da60c7_Out_2, float2(0.5, 0.5), _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2);
            float4 _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2));
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_R_4 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.r;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_G_5 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.g;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_B_6 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.b;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.a;
            float _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2;
            Unity_Minimum_float(_SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7, _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7, _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2);
            float _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1;
            Unity_Absolute_float(_Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2, _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1);
            float _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0 = _EmissionNoisePower;
            float _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2;
            Unity_Power_float(_Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1, _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0, _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2);
            float _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2;
            Unity_Multiply_float_float(_Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2, 20, _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2);
            float _Clamp_943869501048178fbb848b437df184e8_Out_3;
            Unity_Clamp_float(_Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2, 0.05, 1.2, _Clamp_943869501048178fbb848b437df184e8_Out_3);
            float4 _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2;
            Unity_Multiply_float4_float4(_Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2, (_Clamp_943869501048178fbb848b437df184e8_Out_3.xxxx), _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2);
            float4 _Property_1734859c1389ab848dc4063320d66a5d_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_486692dad4d34a8c8410b4771efbf96b_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d60a055f00d779808337e9d909827806_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_486692dad4d34a8c8410b4771efbf96b_Out_0, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2);
            float3 _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3);
            float3 _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1);
            float _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2;
            Unity_DotProduct_float3(_Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1, _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2);
            float _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1;
            Unity_Saturate_float(_DotProduct_845cf97598838e8198e9075e45be98c8_Out_2, _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1);
            float _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1;
            Unity_OneMinus_float(_Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1, _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1);
            float _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1;
            Unity_Absolute_float(_OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1, _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1);
            float _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2;
            Unity_Power_float(_Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1, 10, _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2);
            float4 _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2;
            Unity_Multiply_float4_float4(_Property_1734859c1389ab848dc4063320d66a5d_Out_0, (_Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2.xxxx), _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2);
            float _Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0 = _RimLightPower;
            float4 _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2;
            Unity_Multiply_float4_float4(_Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2, (_Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2);
            float4 _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2);
            float4 _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2;
            Unity_Add_float4(_Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2, _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2);
            float4 _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3;
            Unity_Clamp_float4(_Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, float4(0, 0, 0, 0), _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3);
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_R_1 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[0];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_G_2 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[1];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_B_3 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[2];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[3];
            float _Property_06c41396a31ba582877d3a10387f69e6_Out_0 = _BaseMetallic;
            float _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2;
            Unity_Multiply_float_float(_Split_c8dcaee88e16428ab476271a494e0946_R_1, _Property_06c41396a31ba582877d3a10387f69e6_Out_0, _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2);
            float _Property_2dbdbebc756fb1819344efcc68c07d00_Out_0 = _BaseAORemapMin;
            float _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0 = _BaseAORemapMax;
            float2 _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0 = float2(_Property_2dbdbebc756fb1819344efcc68c07d00_Out_0, _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0);
            float _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3;
            Unity_Remap_float(_Split_c8dcaee88e16428ab476271a494e0946_G_2, float2 (0, 1), _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3);
            float3 _Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0 = float3(_Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3, 0);
            float _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0 = _CoverMetallic;
            float _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2;
            Unity_Multiply_float_float(_Split_16313c20ccdeaa86a639068877a69a2f_R_1, _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0, _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2);
            float _Property_2696a3815c73848db1c5516a77ad7e3e_Out_0 = _CoverAORemapMin;
            float _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0 = _CoverAORemapMax;
            float2 _Vector2_6f054e667fb031849116087b7663e8de_Out_0 = float2(_Property_2696a3815c73848db1c5516a77ad7e3e_Out_0, _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0);
            float _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_G_2, float2 (0, 1), _Vector2_6f054e667fb031849116087b7663e8de_Out_0, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3);
            float3 _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0 = float3(_Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3, 0);
            float3 _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3;
            Unity_Lerp_float3(_Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0, _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3);
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[0];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[1];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_B_3 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[2];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_A_4 = 0;
            surface.BaseColor = (_Lerp_87882219e20a6d818c0de017d739125f_Out_3.xyz);
            surface.Emission = (_Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4;
            surface.Occlusion = _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2;
            surface.NormalTS = _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            surface.Metallic = _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingGBuffer.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "PathTracingDXR"
            Tags
            {
                "LightMode" = "PathTracingDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 ps5
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
        
        
        
            #define SHADERPASS SHADERPASS_PATH_TRACING
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define HAS_LIGHTLOOP 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _CoverMaskA_TexelSize;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float _CoverUsePlanarUV;
        float4 _CoverTilingOffset;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float _CoverEmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float4 _Noise_TexelSize;
        float2 _NoiseTiling;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_CoverMaskA);
        SAMPLER(sampler_CoverMaskA);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitPathTracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_e4c53213449c7682b60df6ae54f219f0_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_115fcc827510f38798b214d835c27637_Out_0 = _BaseTilingOffset;
            float _Property_d83b8f290862b285bbe2f157190e1315_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0.uv0 = IN.uv0;
            float4 _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_e4c53213449c7682b60df6ae54f219f0_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0, _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2);
            float4 _Property_13c79aaf332e20868551d934a2cb7112_Out_0 = _BaseColor;
            float4 _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2, _Property_13c79aaf332e20868551d934a2cb7112_Out_0, _Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2);
            UnityTexture2D _Property_b561c414493a8f8299227a27e437f045_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0 = _DetailTilingOffset;
            float _Split_cda27505033cfc8eaf60fe914f0949b9_R_1 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[0];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_G_2 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[1];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_B_3 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[2];
            float _Split_cda27505033cfc8eaf60fe914f0949b9_A_4 = _Property_70f1cc2b73af738d80b0d405e4bed8c5_Out_0[3];
            float2 _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_R_1, _Split_cda27505033cfc8eaf60fe914f0949b9_G_2);
            float2 _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0 = float2(_Split_cda27505033cfc8eaf60fe914f0949b9_B_3, _Split_cda27505033cfc8eaf60fe914f0949b9_A_4);
            float2 _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_42d7e955009b6f8cb4d913530ff92840_Out_0, _Vector2_5452a0299d10b280aec51f7407d4d2ac_Out_0, _TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3);
            float4 _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0 = SAMPLE_TEXTURE2D(_Property_b561c414493a8f8299227a27e437f045_Out_0.tex, _Property_b561c414493a8f8299227a27e437f045_Out_0.samplerstate, _Property_b561c414493a8f8299227a27e437f045_Out_0.GetTransformedUV(_TilingAndOffset_e1c5b97bd253ca8f9f3d26f598e6d7fd_Out_3));
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.r;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.g;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.b;
            float _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7 = _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_RGBA_0.a;
            float _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_R_4, 2, _Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2);
            float _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2;
            Unity_Add_float(_Multiply_d0f6aeb5b3f04288b51a5ded8986b5a4_Out_2, -1, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2);
            float _Property_02e7dd176dc59f8a9a62453677916b24_Out_0 = _DetailAlbedoScale;
            float _Multiply_fd406247e3137a8b8777918477740653_Out_2;
            Unity_Multiply_float_float(_Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Property_02e7dd176dc59f8a9a62453677916b24_Out_0, _Multiply_fd406247e3137a8b8777918477740653_Out_2);
            float _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1;
            Unity_Saturate_float(_Multiply_fd406247e3137a8b8777918477740653_Out_2, _Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1);
            float _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1;
            Unity_Absolute_float(_Saturate_d6f590fb1b9d188e981ebb0ec4d36ba9_Out_1, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73;
            float3 _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(_Multiply_3d0c2fda612cfe87aa84bc17ad099a61_Out_2, _Add_d382719213f8618f88c54f7c3dfbd8c2_Out_2, _Absolute_dc927550b803d18ba3ff372995e6d25c_Out_1, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73, _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1);
            float _Split_1a45181d77ac838a90665f3132f6a4ef_R_1 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[0];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_G_2 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[1];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_B_3 = _BlendOverlayBaseColor_f3cd25d5b673648eb831a3f388201f73_OutVector4_1[2];
            float _Split_1a45181d77ac838a90665f3132f6a4ef_A_4 = 0;
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_R_1 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[0];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_G_2 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[1];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_B_3 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[2];
            float _Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4 = _PlanarNM_6c8b686076db2a8c8b7d6cd91cf435f0_XZ_2[3];
            float _Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0 = float2(_Property_dbfeaf948b34478090dd8f1a3d0e2440_Out_0, _Property_d7d9704f0497d58ea30c73507241d8e4_Out_0);
            float _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3;
            Unity_Remap_float(_Split_aaa21b8dc4cf6485beaf6fbe8d1bce8b_A_4, float2 (0, 1), _Vector2_03bee8a712eb848f9058c9ca67139ff0_Out_0, _Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3);
            float _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_B_6, 2, _Multiply_93138f23185e4d83b6825f8212653c3e_Out_2);
            float _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2;
            Unity_Add_float(_Multiply_93138f23185e4d83b6825f8212653c3e_Out_2, -1, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2);
            float _Property_dadcc7446e5d388e9a6730406295f93a_Out_0 = _DetailSmoothnessScale;
            float _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2;
            Unity_Multiply_float_float(_Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Property_dadcc7446e5d388e9a6730406295f93a_Out_0, _Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2);
            float _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1;
            Unity_Saturate_float(_Multiply_1de6b43ae21981829be79a3a54ae243b_Out_2, _Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1);
            float _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1;
            Unity_Absolute_float(_Saturate_0834275a3ed56c8fb32773dd6424fe67_Out_1, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7;
            float _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Remap_9fa10d7f73353f8d98e7e00ad7887efd_Out_3, _Add_53ebd006b8d6448881dfe527be4ca8e6_Out_2, _Absolute_ca93b0439159da8d944e94364e98a3a5_Out_1, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7, _BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1);
            float _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_586cd13379fb3187a73a451ca1585fb7_SmoothnessOverlay_1, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1);
            float4 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4;
            float3 _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5;
            float2 _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6;
            Unity_Combine_float(_Split_1a45181d77ac838a90665f3132f6a4ef_R_1, _Split_1a45181d77ac838a90665f3132f6a4ef_G_2, _Split_1a45181d77ac838a90665f3132f6a4ef_B_3, _Saturate_6a86fd5df2ee918a83675f1c42dd4511_Out_1, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_94ea1b7bba64c9899cbe270a028e350a_RGB_5, _Combine_94ea1b7bba64c9899cbe270a028e350a_RG_6);
            UnityTexture2D _Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0 = _CoverTilingOffset;
            float _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50.uv0 = IN.uv0;
            float4 _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f4db51ec2412c48cbcf2128b7bd8caf8_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50, _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2);
            float4 _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0 = _CoverBaseColor;
            float4 _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2, _Property_7d3af9045f54ef8ba8629ebbbc3f4ad7_Out_0, _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2);
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[0];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[1];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[2];
            float _Split_3d4f733649d6ac8a849e60b4b9eef11e_A_4 = _Multiply_2eb83c7af5b6f58eabeec7b502517470_Out_2[3];
            float _Split_7bf3828fa790d989ac06f803f35a2027_R_1 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[0];
            float _Split_7bf3828fa790d989ac06f803f35a2027_G_2 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[1];
            float _Split_7bf3828fa790d989ac06f803f35a2027_B_3 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[2];
            float _Split_7bf3828fa790d989ac06f803f35a2027_A_4 = _PlanarNM_c2ec737ef76d6286b8eedb44a2d24e50_XZ_2[3];
            float _Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0 = float2(_Property_05c4f672b1175a84b0d7ce44b23b4aa4_Out_0, _Property_5f3529123a9ea982984b3bdc33dcb041_Out_0);
            float _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3;
            Unity_Remap_float(_Split_7bf3828fa790d989ac06f803f35a2027_A_4, float2 (0, 1), _Vector2_1eb7cc7a8699a889b2b636baa84fc4fd_Out_0, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3);
            float4 _Combine_750b21380a24ad809d449001e091b966_RGBA_4;
            float3 _Combine_750b21380a24ad809d449001e091b966_RGB_5;
            float2 _Combine_750b21380a24ad809d449001e091b966_RG_6;
            Unity_Combine_float(_Split_3d4f733649d6ac8a849e60b4b9eef11e_R_1, _Split_3d4f733649d6ac8a849e60b4b9eef11e_G_2, _Split_3d4f733649d6ac8a849e60b4b9eef11e_B_3, _Remap_2e561d2a6ce223819f2665623c7c6c94_Out_3, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGB_5, _Combine_750b21380a24ad809d449001e091b966_RG_6);
            float _Property_9ff69c54111eb2859f741d093f22298f_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskA);
            float4 _UV_045cea9e82354980a778f44d92578382_Out_0 = IN.uv0;
            float4 _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0 = SAMPLE_TEXTURE2D(_Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.tex, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.samplerstate, _Property_356186a26fec8686a13bc6b57fd8f3ee_Out_0.GetTransformedUV((_UV_045cea9e82354980a778f44d92578382_Out_0.xy)));
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_R_4 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.r;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_G_5 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.g;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_B_6 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.b;
            float _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7 = _SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_RGBA_0.a;
            float _Property_4e8240836843df81941cdf6cf2cdd638_Out_0 = _CoverMaskPower;
            float _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_0eef6ae3dab6e185bd0f65edecd80314_A_7, _Property_4e8240836843df81941cdf6cf2cdd638_Out_0, _Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2);
            float _Clamp_030a7c32684c258084338456eaddc77a_Out_3;
            Unity_Clamp_float(_Multiply_8b5250e5dfc73a84a41399a13b83c0a1_Out_2, 0, 1, _Clamp_030a7c32684c258084338456eaddc77a_Out_3);
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_R_1 = IN.VertexColor[0];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2 = IN.VertexColor[1];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_B_3 = IN.VertexColor[2];
            float _Split_8ba5b67899f36b8f9dcf5c84092c0560_A_4 = IN.VertexColor[3];
            float2 _Vector2_65060e9a9f687a89b68e32dc876be645_Out_0 = float2(_SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_A_7, _SampleTexture2D_fa4ac40fc922b9869e37c06690c0f530_G_5);
            float2 _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2;
            Unity_Multiply_float2_float2(_Vector2_65060e9a9f687a89b68e32dc876be645_Out_0, float2(2, 2), _Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2);
            float2 _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2;
            Unity_Add_float2(_Multiply_5d4c3baed6515c8b86a289c70fca8f5d_Out_2, float2(-1, -1), _Add_98b310e19c5fa5899c39cc45969c15ea_Out_2);
            float _Property_08b99582093b36869beb5ea3d18e765d_Out_0 = _DetailNormalScale;
            float2 _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2;
            Unity_Multiply_float2_float2(_Add_98b310e19c5fa5899c39cc45969c15ea_Out_2, (_Property_08b99582093b36869beb5ea3d18e765d_Out_0.xx), _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2);
            float _Split_26c1e73f8436c78ebdae5b51365a072b_R_1 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[0];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_G_2 = _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2[1];
            float _Split_26c1e73f8436c78ebdae5b51365a072b_B_3 = 0;
            float _Split_26c1e73f8436c78ebdae5b51365a072b_A_4 = 0;
            float _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2;
            Unity_DotProduct_float2(_Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _Multiply_bf0b80fdb3271784900e5b5ea4c5550f_Out_2, _DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2);
            float _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1;
            Unity_Saturate_float(_DotProduct_50aca3ce0da1ad849d7ff4a99df3a322_Out_2, _Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1);
            float _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1;
            Unity_OneMinus_float(_Saturate_491f2ee8417b8782aee83358b89eeb08_Out_1, _OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1);
            float _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1;
            Unity_SquareRoot_float(_OneMinus_46ad3170d736808d98bf74ffa45e0414_Out_1, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            float3 _Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0 = float3(_Split_26c1e73f8436c78ebdae5b51365a072b_R_1, _Split_26c1e73f8436c78ebdae5b51365a072b_G_2, _SquareRoot_dfeae899ebfeae8f9257c340ca22ce38_Out_1);
            UnityTexture2D _Property_2cc39234d3d334899f94126a216a50fc_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf.uv0 = IN.uv0;
            float4 _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_2cc39234d3d334899f94126a216a50fc_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf, _PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2);
            float _Property_020d569f63e9a2849e23988ff74eb005_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_4fde70f39e45398dbb9972941e88e2bf_XZ_2.xyz), _Property_020d569f63e9a2849e23988ff74eb005_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2);
            float3 _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2;
            Unity_NormalBlend_float(_Vector3_ed3f80ed87524e8c99f98b224af5a610_Out_0, _NormalStrength_0c71fb166ae841839a0a12ecc5afa6fe_Out_2, _NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2);
            UnityTexture2D _Property_a383045772822c87acd099bb4cd6c478_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_79abde32a0223a89907c9f09efac8db7;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_79abde32a0223a89907c9f09efac8db7.uv0 = IN.uv0;
            float4 _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_a383045772822c87acd099bb4cd6c478_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNMn_79abde32a0223a89907c9f09efac8db7, _PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2);
            float _Property_c688e246111fd881820a97415e14d8a3_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_c688e246111fd881820a97415e14d8a3_Out_0, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2);
            float _Split_8cadce726725318fbacd47f436a8231d_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8cadce726725318fbacd47f436a8231d_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8cadce726725318fbacd47f436a8231d_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8cadce726725318fbacd47f436a8231d_A_4 = 0;
            float _Property_ce4e5954a0b7ff8c819fa53963327595_Out_0 = _Cover_Amount;
            float _Property_384059e6344fb98a85eccad78dd82f36_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2;
            Unity_Subtract_float(4, _Property_384059e6344fb98a85eccad78dd82f36_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2);
            float _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2;
            Unity_Divide_float(_Property_ce4e5954a0b7ff8c819fa53963327595_Out_0, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2);
            float _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1;
            Unity_Absolute_float(_Divide_1a3a6334c3d8bc8f8ac262c7833e15d5_Out_2, _Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1);
            float _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2;
            Unity_Power_float(_Absolute_f218d2b85ebf288f91234faffedb5f7b_Out_1, _Subtract_70fd06876db7fa85b0cc0bce8d926dff_Out_2, _Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2);
            float _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3;
            Unity_Clamp_float(_Power_a9b8d4b65c44a98e9813f61c0e2dc0a3_Out_2, 0, 2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3);
            float _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2;
            Unity_Multiply_float_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2);
            float _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1;
            Unity_Saturate_float(_Multiply_02a8aa0fa6974e81aa84caba54f63896_Out_2, _Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1);
            float _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3;
            Unity_Clamp_float(_Split_8cadce726725318fbacd47f436a8231d_G_2, 0, 0.9999, _Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3);
            float _Property_9babc76177853482826cae0163ffe988_Out_0 = _Cover_Max_Angle;
            float _Divide_3b22550205905d8da5870f9db56e44ff_Out_2;
            Unity_Divide_float(_Property_9babc76177853482826cae0163ffe988_Out_0, 45, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2);
            float _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1;
            Unity_OneMinus_float(_Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1);
            float _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2;
            Unity_Subtract_float(_Clamp_38bac9e8ef351789b5fd4f2201f1df7b_Out_3, _OneMinus_99a85b6952a41288afc86da0a6ca6ea0_Out_1, _Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2);
            float _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3;
            Unity_Clamp_float(_Subtract_2b63f3aaee26f686971dca1d28da283c_Out_2, 0, 2, _Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3);
            float _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2;
            Unity_Divide_float(1, _Divide_3b22550205905d8da5870f9db56e44ff_Out_2, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2);
            float _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2;
            Unity_Multiply_float_float(_Clamp_6bd9bb4add91fe8eb80a958a6b1a2d01_Out_3, _Divide_a09d2d461b07e98999aba746fb52a3fc_Out_2, _Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2);
            float _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1;
            Unity_Absolute_float(_Multiply_89a8f5a279c73b898d4ca5d075786b53_Out_2, _Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1);
            float _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0 = _CoverHardness;
            float _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2;
            Unity_Power_float(_Absolute_f98ce5feb185a68784b9b35eb71ec465_Out_1, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2);
            float _Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0 = _Cover_Min_Height;
            float _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1;
            Unity_OneMinus_float(_Property_c442c20fdade808b8e1b93cfd6625ab9_Out_0, _OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1);
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_7e5d084c5e6bfa83a9203dac971ea31e_A_4 = 0;
            float _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2;
            Unity_Add_float(_OneMinus_55530ddc82048c8aa2d082334edf6a57_Out_1, _Split_7e5d084c5e6bfa83a9203dac971ea31e_G_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2);
            float _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, 1, _Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2);
            float _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3;
            Unity_Clamp_float(_Add_a4387dfc1ea3ee8da0b04f433a7c63d0_Out_2, 0, 1, _Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3);
            float _Property_5da709b259ac268bb134d927bcffa4b8_Out_0 = _Cover_Min_Height_Blending;
            float _Add_c322347d9ddbcd83ba52983e9316c387_Out_2;
            Unity_Add_float(_Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Property_5da709b259ac268bb134d927bcffa4b8_Out_0, _Add_c322347d9ddbcd83ba52983e9316c387_Out_2);
            float _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2;
            Unity_Divide_float(_Add_c322347d9ddbcd83ba52983e9316c387_Out_2, _Add_e4067b215657d98ab6ec4e0295ddfece_Out_2, _Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2);
            float _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1;
            Unity_OneMinus_float(_Divide_078ffa7d6c597f819511c95d33b7d90e_Out_2, _OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1);
            float _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2;
            Unity_Add_float(_OneMinus_b9f8edced35e7b8cab9ca581d822e31f_Out_1, -0.5, _Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2);
            float _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3;
            Unity_Clamp_float(_Add_95cd1778448bfe8d9f9fa9129235f2c2_Out_2, 0, 1, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3);
            float _Add_674fcef023d728848510150af810a103_Out_2;
            Unity_Add_float(_Clamp_570e1129ecb02c8b8be79d85f19d5ae1_Out_3, _Clamp_23e760e01b7e0780a71d88813b5828d7_Out_3, _Add_674fcef023d728848510150af810a103_Out_2);
            float _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3;
            Unity_Clamp_float(_Add_674fcef023d728848510150af810a103_Out_2, 0, 1, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3);
            float _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2;
            Unity_Multiply_float_float(_Power_b9fdc3921d5b85878a1ec4baa1975184_Out_2, _Clamp_5b677be9d499c082bcbe316853b0adff_Out_3, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2);
            float _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2;
            Unity_Multiply_float_float(_Saturate_ada5e8f9ebdcb38d8f5e61e8d97424b9_Out_1, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2);
            float3 _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_0e5e0831ba0e98878220ca6021ea52a2_Out_2, (_Multiply_4d295791f4e23186acea64f2f4de94ea_Out_2.xxx), _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3);
            float3x3 Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1 = normalize(mul(Transform_1e4c3a2d6240958ab6858efb88c1d06a_transposeTangent, _Lerp_21eaf65c617b2d858b3b33154d55757a_Out_3.xyz).xyz);
            float _Split_600a9d271d96798a94ab28118977defd_R_1 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[0];
            float _Split_600a9d271d96798a94ab28118977defd_G_2 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[1];
            float _Split_600a9d271d96798a94ab28118977defd_B_3 = _Transform_1e4c3a2d6240958ab6858efb88c1d06a_Out_1[2];
            float _Split_600a9d271d96798a94ab28118977defd_A_4 = 0;
            float _Multiply_2e5b010626435f8492a2690396ced19d_Out_2;
            Unity_Multiply_float_float(_Split_600a9d271d96798a94ab28118977defd_G_2, _Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Multiply_2e5b010626435f8492a2690396ced19d_Out_2);
            float _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2;
            Unity_Multiply_float_float(_Clamp_95d579f83746cb82be79cf6739990e0b_Out_3, _Property_27e768ffa9c13e8ab65d48e7712e5b66_Out_0, _Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2);
            float _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2;
            Unity_Multiply_float_float(_Multiply_5a2397e0153ddb8f9bd457d9a301dc8b_Out_2, _Multiply_7ea7400ed65a3582b000796fb39748e9_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2);
            float _Multiply_05614e740451f18f8301586390aa5a0a_Out_2;
            Unity_Multiply_float_float(_Multiply_2e5b010626435f8492a2690396ced19d_Out_2, _Multiply_3aad76eaff60dd888c3e1783ecf03943_Out_2, _Multiply_05614e740451f18f8301586390aa5a0a_Out_2);
            UnityTexture2D _Property_a14f2476a35d208b988233c852f919ef_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_6858a0e821f26a8d87846d325e9bd170;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_6858a0e821f26a8d87846d325e9bd170.uv0 = IN.uv0;
            float4 _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a14f2476a35d208b988233c852f919ef_Out_0, _Property_e35c79b8cccfbe8ca0a3c33e8d32e319_Out_0, _Property_e3d8b38b51331e879b1d4012d65f53e6_Out_0, _PlanarNM_6858a0e821f26a8d87846d325e9bd170, _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2);
            float _Split_16313c20ccdeaa86a639068877a69a2f_R_1 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[0];
            float _Split_16313c20ccdeaa86a639068877a69a2f_G_2 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[1];
            float _Split_16313c20ccdeaa86a639068877a69a2f_B_3 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[2];
            float _Split_16313c20ccdeaa86a639068877a69a2f_A_4 = _PlanarNM_6858a0e821f26a8d87846d325e9bd170_XZ_2[3];
            float _Property_673896519f419589938b37e782b90141_Out_0 = _CoverHeightMapMin;
            float _Property_c35906332422438da3b19f45cbd5ac17_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0 = float2(_Property_673896519f419589938b37e782b90141_Out_0, _Property_c35906332422438da3b19f45cbd5ac17_Out_0);
            float _Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0 = _CoverHeightMapOffset;
            float2 _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2;
            Unity_Add_float2(_Vector2_81cbe1e5ea789e8697223cd3bfbca76c_Out_0, (_Property_88ab0068f899fc8ba94efdaec5e8966b_Out_0.xx), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2);
            float _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_B_3, float2 (0, 1), _Add_cd623e3135271489b0d45b4d7edc5f7e_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3);
            float _Multiply_0093be0fd848498b89a0fa282608e715_Out_2;
            Unity_Multiply_float_float(_Multiply_05614e740451f18f8301586390aa5a0a_Out_2, _Remap_9a23d5f76fa8c38dbd73f43bd6397b0b_Out_3, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2);
            float _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2;
            Unity_Multiply_float_float(_Split_8ba5b67899f36b8f9dcf5c84092c0560_G_2, _Multiply_0093be0fd848498b89a0fa282608e715_Out_2, _Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2);
            float _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1;
            Unity_Saturate_float(_Multiply_d3190f97afd0398083623ecf71a41b1a_Out_2, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1);
            float _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2;
            Unity_Multiply_float_float(_Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Saturate_cbcee34e7e6e6d8091d840550ab1c74a_Out_1, _Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2);
            float _Clamp_c95f5515948375878df6581a36d8b203_Out_3;
            Unity_Clamp_float(_Multiply_da35b9d9e4dd8c81871a9aea42c157ee_Out_2, 0, 1, _Clamp_c95f5515948375878df6581a36d8b203_Out_3);
            float _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3;
            Unity_Branch_float(_Property_9ff69c54111eb2859f741d093f22298f_Out_0, _Clamp_c95f5515948375878df6581a36d8b203_Out_3, _Clamp_030a7c32684c258084338456eaddc77a_Out_3, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3);
            float4 _Lerp_87882219e20a6d818c0de017d739125f_Out_3;
            Unity_Lerp_float4(_Combine_94ea1b7bba64c9899cbe270a028e350a_RGBA_4, _Combine_750b21380a24ad809d449001e091b966_RGBA_4, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxxx), _Lerp_87882219e20a6d818c0de017d739125f_Out_3);
            UnityTexture2D _Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d26fd10040332c89b94151832fa36c95;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d26fd10040332c89b94151832fa36c95.uv0 = IN.uv0;
            float4 _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a1adaaa2a22b0e829756ccb08eab9146_Out_0, _Property_115fcc827510f38798b214d835c27637_Out_0, _Property_d83b8f290862b285bbe2f157190e1315_Out_0, _PlanarNM_d26fd10040332c89b94151832fa36c95, _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2);
            float _Split_c8dcaee88e16428ab476271a494e0946_R_1 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[0];
            float _Split_c8dcaee88e16428ab476271a494e0946_G_2 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[1];
            float _Split_c8dcaee88e16428ab476271a494e0946_B_3 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[2];
            float _Split_c8dcaee88e16428ab476271a494e0946_A_4 = _PlanarNM_d26fd10040332c89b94151832fa36c95_XZ_2[3];
            float _Split_81540eba4304c9878d445ae2aad30a44_R_1 = IN.VertexColor[0];
            float _Split_81540eba4304c9878d445ae2aad30a44_G_2 = IN.VertexColor[1];
            float _Split_81540eba4304c9878d445ae2aad30a44_B_3 = IN.VertexColor[2];
            float _Split_81540eba4304c9878d445ae2aad30a44_A_4 = IN.VertexColor[3];
            float _OneMinus_106edffa8269d28e944c403917c0be93_Out_1;
            Unity_OneMinus_float(_Split_81540eba4304c9878d445ae2aad30a44_R_1, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1);
            float _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3;
            Unity_Lerp_float(0, _Split_c8dcaee88e16428ab476271a494e0946_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3);
            float _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2;
            Unity_Multiply_float_float(_Lerp_3dcb1877d14a1b84af1d26f80543e63e_Out_3, _Property_83c9d6fe597a7e89b134c0f2de5f951e_Out_0, _Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2);
            float _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1;
            Unity_Absolute_float(_Multiply_9e0dbd44e9036480bf730902dc6eaaa4_Out_2, _Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1);
            float _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2;
            Unity_Power_float(_Absolute_0eb4775596b33f81acdff85bfb2c6e4f_Out_1, _Property_db40dd94e3e661859ad4c29d7d054ff6_Out_0, _Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2);
            float _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3;
            Unity_Lerp_float(0, _Split_16313c20ccdeaa86a639068877a69a2f_A_4, _OneMinus_106edffa8269d28e944c403917c0be93_Out_1, _Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3);
            float _Property_cc11b329366008849094e720bdbaad9e_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2;
            Unity_Multiply_float_float(_Lerp_2dc1dee2d0f0218a9bd90ca4755af898_Out_3, _Property_cc11b329366008849094e720bdbaad9e_Out_0, _Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2);
            float _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1;
            Unity_Absolute_float(_Multiply_0601c6247334b7889dc86a170e3d3b58_Out_2, _Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1);
            float _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_d2f191850ca06f829281d27846b9292a_Out_2;
            Unity_Power_float(_Absolute_20abf2d0a3ea4a8ab1c05cf1b4a24028_Out_1, _Property_c5909b51f11cec8d9ee29c26a2d5bff0_Out_0, _Power_d2f191850ca06f829281d27846b9292a_Out_2);
            float _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3;
            Unity_Lerp_float(_Power_6eb64c2ab5798d8885d88df2f1de5691_Out_2, _Power_d2f191850ca06f829281d27846b9292a_Out_2, _Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3, _Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3);
            float4 _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Property_e85c0c5abace33848bcfa1f41bef2c54_Out_0, _Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2);
            UnityTexture2D _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0 = IN.uv0;
            float2 _Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0 = _NoiseSpeed;
            float2 _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2;
            Unity_Multiply_float2_float2(_Property_6a20d8d61c841c85bc810ce34b6a8f99_Out_0, (IN.TimeParameters.x.xx), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2);
            float2 _Add_46357740be2d5a86b5151c5767993e4e_Out_2;
            Unity_Add_float2((_UV_e8abb4c46edf578eac0a0113b4e6754f_Out_0.xy), _Multiply_b377853b390bb3868a5d41cb8a2711d4_Out_2, _Add_46357740be2d5a86b5151c5767993e4e_Out_2);
            float4 _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_46357740be2d5a86b5151c5767993e4e_Out_2));
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_R_4 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.r;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_G_5 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.g;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_B_6 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.b;
            float _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7 = _SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_RGBA_0.a;
            float2 _Multiply_a2232bab274ab88289a3628364da60c7_Out_2;
            Unity_Multiply_float2_float2(_Add_46357740be2d5a86b5151c5767993e4e_Out_2, float2(-1.2, -0.9), _Multiply_a2232bab274ab88289a3628364da60c7_Out_2);
            float2 _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2;
            Unity_Add_float2(_Multiply_a2232bab274ab88289a3628364da60c7_Out_2, float2(0.5, 0.5), _Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2);
            float4 _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.tex, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.samplerstate, _Property_1f0ac1d6874bb389b9aa8735fba69703_Out_0.GetTransformedUV(_Add_9170da53d06c5c84b5d5403a87d9a4d1_Out_2));
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_R_4 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.r;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_G_5 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.g;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_B_6 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.b;
            float _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7 = _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_RGBA_0.a;
            float _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2;
            Unity_Minimum_float(_SampleTexture2D_41dd21292c4f0d889eada8c7f04b9692_A_7, _SampleTexture2D_a13fe4cce4d3058a94abf82231e5d947_A_7, _Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2);
            float _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1;
            Unity_Absolute_float(_Minimum_2b25a6a281934688aec2374e5cd77ff2_Out_2, _Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1);
            float _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0 = _EmissionNoisePower;
            float _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2;
            Unity_Power_float(_Absolute_e6709736f6fc2f8483a90a003982cc84_Out_1, _Property_2a2076b9c7ad928baf9a1634e7a4c5cb_Out_0, _Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2);
            float _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2;
            Unity_Multiply_float_float(_Power_0275bf9d006e5181bf0f2bb9ef9f5ac9_Out_2, 20, _Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2);
            float _Clamp_943869501048178fbb848b437df184e8_Out_3;
            Unity_Clamp_float(_Multiply_d541b89e1232b986bb6e23d0b1ddebe2_Out_2, 0.05, 1.2, _Clamp_943869501048178fbb848b437df184e8_Out_3);
            float4 _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2;
            Unity_Multiply_float4_float4(_Multiply_6c2590f9d0cd8b878c4e24af822f4a19_Out_2, (_Clamp_943869501048178fbb848b437df184e8_Out_3.xxxx), _Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2);
            float4 _Property_1734859c1389ab848dc4063320d66a5d_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_486692dad4d34a8c8410b4771efbf96b_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d60a055f00d779808337e9d909827806_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_79abde32a0223a89907c9f09efac8db7_XZ_2.xyz), _Property_486692dad4d34a8c8410b4771efbf96b_Out_0, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2);
            float3 _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            Unity_Lerp_float3(_NormalBlend_be36dd49bea74c8f8dd52fa3a85a9534_Out_2, _NormalStrength_d60a055f00d779808337e9d909827806_Out_2, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3);
            float3 _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1);
            float _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2;
            Unity_DotProduct_float3(_Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3, _Normalize_2c1a585b7f811480b6c41e39fa98b9de_Out_1, _DotProduct_845cf97598838e8198e9075e45be98c8_Out_2);
            float _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1;
            Unity_Saturate_float(_DotProduct_845cf97598838e8198e9075e45be98c8_Out_2, _Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1);
            float _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1;
            Unity_OneMinus_float(_Saturate_9b0ea5c81dfc0d8bbcb1ccb4be5eb069_Out_1, _OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1);
            float _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1;
            Unity_Absolute_float(_OneMinus_5672c47d1690b0859e05ad7e9e3a0a18_Out_1, _Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1);
            float _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2;
            Unity_Power_float(_Absolute_16238607e10d7b8fb4c8f728ea522801_Out_1, 10, _Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2);
            float4 _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2;
            Unity_Multiply_float4_float4(_Property_1734859c1389ab848dc4063320d66a5d_Out_0, (_Power_b4dd77e7c0639480a311dadb6eb14fb8_Out_2.xxxx), _Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2);
            float _Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0 = _RimLightPower;
            float4 _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2;
            Unity_Multiply_float4_float4(_Multiply_8dcd17e9b1f8388eb7301dbfa0e1ec8b_Out_2, (_Property_9157e5b7e8dbc989a687faa8b8349b96_Out_0.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2);
            float4 _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2;
            Unity_Multiply_float4_float4((_Lerp_c7df9f3413c61387808dc1a046a795ba_Out_3.xxxx), _Multiply_cf8b8945544dba88a8cd85fac9aec54b_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2);
            float4 _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2;
            Unity_Add_float4(_Multiply_5159a4cb03b59689bb45eb784ea3ae35_Out_2, _Multiply_9f797b81c37a868c81c1797e9f9512ca_Out_2, _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2);
            float4 _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3;
            Unity_Clamp_float4(_Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, float4(0, 0, 0, 0), _Add_dc7e3ef8522a70819c917237b9dcc96c_Out_2, _Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3);
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_R_1 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[0];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_G_2 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[1];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_B_3 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[2];
            float _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4 = _Lerp_87882219e20a6d818c0de017d739125f_Out_3[3];
            float _Property_06c41396a31ba582877d3a10387f69e6_Out_0 = _BaseMetallic;
            float _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2;
            Unity_Multiply_float_float(_Split_c8dcaee88e16428ab476271a494e0946_R_1, _Property_06c41396a31ba582877d3a10387f69e6_Out_0, _Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2);
            float _Property_2dbdbebc756fb1819344efcc68c07d00_Out_0 = _BaseAORemapMin;
            float _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0 = _BaseAORemapMax;
            float2 _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0 = float2(_Property_2dbdbebc756fb1819344efcc68c07d00_Out_0, _Property_bdc878630dfca586bff66e5b4bfffe30_Out_0);
            float _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3;
            Unity_Remap_float(_Split_c8dcaee88e16428ab476271a494e0946_G_2, float2 (0, 1), _Vector2_7f058afa3dd186869dd0f2d889a637bb_Out_0, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3);
            float3 _Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0 = float3(_Multiply_1e8010b400ec9689a4d8570c8fb2dd6e_Out_2, _Remap_736c05b9e06ff78597a5b300523c5e04_Out_3, 0);
            float _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0 = _CoverMetallic;
            float _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2;
            Unity_Multiply_float_float(_Split_16313c20ccdeaa86a639068877a69a2f_R_1, _Property_dc64ffdb5487f38c8fafcef1d518b3eb_Out_0, _Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2);
            float _Property_2696a3815c73848db1c5516a77ad7e3e_Out_0 = _CoverAORemapMin;
            float _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0 = _CoverAORemapMax;
            float2 _Vector2_6f054e667fb031849116087b7663e8de_Out_0 = float2(_Property_2696a3815c73848db1c5516a77ad7e3e_Out_0, _Property_dc6e42b9f380d88fb5998902d1ddaa45_Out_0);
            float _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3;
            Unity_Remap_float(_Split_16313c20ccdeaa86a639068877a69a2f_G_2, float2 (0, 1), _Vector2_6f054e667fb031849116087b7663e8de_Out_0, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3);
            float3 _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0 = float3(_Multiply_62c6df8b3ac33382bb38f0b594d1a4fa_Out_2, _Remap_805dc695e2ca6186842dd0c16c68fe7a_Out_3, 0);
            float3 _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3;
            Unity_Lerp_float3(_Vector3_b34af5a5e4b21588a99ba5eb5358a84d_Out_0, _Vector3_9d828b596b436f898d7f64ebfd86402e_Out_0, (_Branch_ee2fcca7f890b78a84d94b4aa29cbdc3_Out_3.xxx), _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3);
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[0];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[1];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_B_3 = _Lerp_5a4703a1c1c9e387bdf52325fcd883e8_Out_3[2];
            float _Split_b9b4ede5ed4eaf82a5409e98b1310654_A_4 = 0;
            surface.BaseColor = (_Lerp_87882219e20a6d818c0de017d739125f_Out_3.xyz);
            surface.Emission = (_Clamp_4303168e8ef04680ac0cf846c8ffa447_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_b2e8c5942bffb5889805a6b9c97d0091_A_4;
            surface.Occlusion = _Split_b9b4ede5ed4eaf82a5409e98b1310654_G_2;
            surface.NormalTS = _Lerp_6861b6a37faf5e868527d229073a4d0f_Out_3;
            surface.Metallic = _Split_b9b4ede5ed4eaf82a5409e98b1310654_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassPathTracing.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
    }
    CustomEditorForRenderPipeline "Rendering.HighDefinition.LitShaderGraphGUI" "UnityEngine.Rendering.HighDefinition.HDRenderPipelineAsset"
    CustomEditor "UnityEditor.ShaderGraph.GenericShaderGraphMaterialGUI"
    FallBack "Hidden/Shader Graph/FallbackError"
}