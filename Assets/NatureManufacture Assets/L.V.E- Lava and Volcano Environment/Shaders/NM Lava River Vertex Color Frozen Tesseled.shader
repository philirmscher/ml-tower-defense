Shader "NatureManufacture/HDRP/Lava River/Lava River Vertex Color Frozen Tesseled"
{
    Properties
    {
        _BaseColor("Base Color", Color) = (1, 1, 1, 0)
        [NoScaleOffset]_BaseColorMap("Base Map(RGB) Sm(A)", 2D) = "white" {}
        [ToggleUI]_BaseUsePlanarUV("Base Use Planar UV", Float) = 0
        _BaseTilingOffset("Base Tiling and Offset", Vector) = (1, 1, 0, 0)
        [Normal][NoScaleOffset]_BaseNormalMap("Base Normal Map", 2D) = "bump" {}
        _BaseNormalScale("Base Normal Scale", Range(0, 8)) = 1
        [NoScaleOffset]_BaseMaskMap("Base Mask Map MT(R) AO(G) H(B) E(A)", 2D) = "white" {}
        _BaseMetallic("Base Metallic", Range(0, 1)) = 1
        _BaseAORemapMin("Base AO Remap Min", Range(0, 1)) = 0
        _BaseAORemapMax("Base AO Remap Max", Range(0, 1)) = 1
        _BaseSmoothnessRemapMin("Base Smoothness Remap Min", Range(0, 1)) = 0
        _BaseSmoothnessRemapMax("Base Smoothness Remap Max", Range(0, 1)) = 1
        [NoScaleOffset]_LayerMask("Layer Mask (R)", 2D) = "black" {}
        [ToggleUI]_Invert_Layer_Mask("Invert Layer Mask", Float) = 0
        _Height_Transition("Height Blend Transition", Range(0.001, 1)) = 1
        _HeightMin("Height Min", Float) = 0
        _HeightMax("Height Max", Float) = 1
        _HeightOffset("Height Offset", Float) = 0
        _HeightMin2("Height 2 Min", Float) = 0
        _HeightMax2("Height 2 Max", Float) = 1
        _HeightOffset2("Height 2 Offset", Float) = 0
        _Base2Color("Base 2 Color", Color) = (1, 1, 1, 0)
        [NoScaleOffset]_Base2ColorMap("Base 2 Map(RGB) Sm(A)", 2D) = "white" {}
        _Base2TilingOffset("Base 2 Tiling and Offset", Vector) = (1, 1, 0, 0)
        [ToggleUI]_Base2UsePlanarUV("Base 2 Use Planar UV", Float) = 0
        [Normal][NoScaleOffset]_Base2NormalMap("Base 2 Normal Map", 2D) = "bump" {}
        _Base2NormalScale("Base 2 Normal Scale", Range(0, 8)) = 1
        [NoScaleOffset]_Base2MaskMap("Base 2 Mask Map MT(R) AO(G) H(B) E(A)", 2D) = "white" {}
        _Base2Metallic("Base 2 Metallic", Range(0, 1)) = 1
        _Base2SmoothnessRemapMin("Base 2 Smoothness Remap Min", Range(0, 1)) = 0
        _Base2SmoothnessRemapMax("Base 2 Smoothness Remap Max", Range(0, 1)) = 1
        _Base2AORemapMin("Base 2 AO Remap Min", Range(0, 1)) = 0
        _Base2AORemapMax("Base 2 AO Remap Max", Range(0, 1)) = 1
        [HDR]_LavaEmissionColor("Lava Emission Color", Color) = (1, 0.1862055, 0, 0)
        _BaseEmissionMaskIntensivity("Base Emission Mask Intensivity", Range(0, 100)) = 0
        _BaseEmissionMaskTreshold("Base Emission Mask Treshold", Range(0, 100)) = 0.01
        _Base2EmissionMaskIntensivity("Base 2 Emission Mask Intensivity", Range(0, 100)) = 0.01
        _Base2EmissionMaskTreshold("Base 2 Emission Mask Treshold", Range(0, 100)) = 0
        [HDR]_RimColor("Rim Color", Color) = (1, 0, 0, 0)
        _RimLightPower("Rim Light Power", Float) = 4
        _NoiseTiling("Emission Noise Tiling", Vector) = (1, 1, 0, 0)
        [NoScaleOffset]_Noise("Emission Noise", 2D) = "white" {}
        _NoiseSpeed("Emission Noise Speed", Vector) = (0.001, 0.005, 0, 0)
        _EmissionNoisePower("Emission Noise Power", Range(0, 10)) = 2.71
        _Tesselation_Factor("Tesselation Factor", Float) = 10
        _Tess_Height_1_Min("Tess Height 1 Min", Float) = 0
        _Tess_Height_1_Max("Tess Height 1 Max", Float) = 1
        _Tess_Height_1_Offset("Tess Height 1 Offset", Float) = 0
        _Tess_Height_2_Min("Tess Height 2 Min", Float) = 0
        _Tess_Height_2_Max("Tess Height 2 Max", Float) = 1
        _Tess_Height_2_Offset("Tess Height 2 Offset", Float) = 0
        _Tess_Height_Blend_Transition("Tess Height Blend Transition", Range(0.001, 1)) = 1
        [HideInInspector]_EmissionColor("Color", Color) = (1, 1, 1, 1)
        [HideInInspector]_RenderQueueType("Float", Float) = 1
        [HideInInspector][ToggleUI]_AddPrecomputedVelocity("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_DepthOffsetEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_ConservativeDepthOffsetEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_TransparentWritingMotionVec("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_AlphaCutoffEnable("Boolean", Float) = 0
        [HideInInspector]_TransparentSortPriority("_TransparentSortPriority", Float) = 0
        [HideInInspector][ToggleUI]_UseShadowThreshold("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_DoubleSidedEnable("Boolean", Float) = 0
        [HideInInspector][Enum(Flip, 0, Mirror, 1, None, 2)]_DoubleSidedNormalMode("Float", Float) = 2
        [HideInInspector]_DoubleSidedConstants("Vector4", Vector) = (1, 1, -1, 0)
        [HideInInspector][Enum(Auto, 0, On, 1, Off, 2)]_DoubleSidedGIMode("Float", Float) = 0
        [HideInInspector][ToggleUI]_TransparentDepthPrepassEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_TransparentDepthPostpassEnable("Boolean", Float) = 0
        [HideInInspector]_SurfaceType("Float", Float) = 0
        [HideInInspector]_BlendMode("Float", Float) = 0
        [HideInInspector]_SrcBlend("Float", Float) = 1
        [HideInInspector]_DstBlend("Float", Float) = 0
        [HideInInspector]_AlphaSrcBlend("Float", Float) = 1
        [HideInInspector]_AlphaDstBlend("Float", Float) = 0
        [HideInInspector][ToggleUI]_AlphaToMask("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_AlphaToMaskInspectorValue("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_ZWrite("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_TransparentZWrite("Boolean", Float) = 0
        [HideInInspector]_CullMode("Float", Float) = 2
        [HideInInspector][ToggleUI]_EnableFogOnTransparent("Boolean", Float) = 1
        [HideInInspector]_CullModeForward("Float", Float) = 2
        [HideInInspector][Enum(Front, 1, Back, 2)]_TransparentCullMode("Float", Float) = 2
        [HideInInspector][Enum(UnityEditor.Rendering.HighDefinition.OpaqueCullMode)]_OpaqueCullMode("Float", Float) = 2
        [HideInInspector]_ZTestDepthEqualForOpaque("Float", Int) = 4
        [HideInInspector][Enum(UnityEngine.Rendering.CompareFunction)]_ZTestTransparent("Float", Float) = 4
        [HideInInspector][ToggleUI]_TransparentBackfaceEnable("Boolean", Float) = 0
        [HideInInspector][Enum(None, 0, Phong, 1)]_TessellationMode("Float", Float) = 1
        [HideInInspector]_TessellationFactorMinDistance("Float", Float) = 20
        [HideInInspector]_TessellationFactorMaxDistance("Float", Float) = 50
        [HideInInspector]_TessellationFactorTriangleSize("Float", Float) = 100
        [HideInInspector]_TessellationShapeFactor("Tessellation shape factor", Range(0, 1)) = 0.75
        [HideInInspector]_TessellationBackFaceCullEpsilon("Tessellation back face epsilon", Range(-1, 0)) = -0.25
        [HideInInspector]_TessellationMaxDisplacement("Float", Float) = 0.01
        [HideInInspector][ToggleUI]_RequireSplitLighting("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_ReceivesSSR("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_ReceivesSSRTransparent("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_EnableBlendModePreserveSpecularLighting("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_SupportDecals("Boolean", Float) = 1
        [HideInInspector]_StencilRef("Float", Int) = 0
        [HideInInspector]_StencilWriteMask("Float", Int) = 6
        [HideInInspector]_StencilRefDepth("Float", Int) = 8
        [HideInInspector]_StencilWriteMaskDepth("Float", Int) = 8
        [HideInInspector]_StencilRefMV("Float", Int) = 40
        [HideInInspector]_StencilWriteMaskMV("Float", Int) = 40
        [HideInInspector]_StencilRefDistortionVec("Float", Int) = 4
        [HideInInspector]_StencilWriteMaskDistortionVec("Float", Int) = 4
        [HideInInspector]_StencilWriteMaskGBuffer("Float", Int) = 14
        [HideInInspector]_StencilRefGBuffer("Float", Int) = 10
        [HideInInspector]_ZTestGBuffer("Float", Int) = 4
        [HideInInspector][ToggleUI]_RayTracing("Boolean", Float) = 0
        [HideInInspector][Enum(None, 0, Box, 1, Sphere, 2, Thin, 3)]_RefractionModel("Float", Float) = 0
        [HideInInspector][NoScaleOffset]unity_Lightmaps("unity_Lightmaps", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset]unity_LightmapsInd("unity_LightmapsInd", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset]unity_ShadowMasks("unity_ShadowMasks", 2DArray) = "" {}
    }
    SubShader
    {
        Tags
        {
            "RenderPipeline"="HDRenderPipeline"
            "RenderType"="HDLitShader"
            "Queue"="Geometry+225"
            "ShaderGraphShader"="true"
            "ShaderGraphTargetId"="HDLitSubTarget"
        }
        Pass
        {
            Name "ShadowCaster"
            Tags
            {
                "LightMode" = "ShadowCaster"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        ColorMask 0
        ZClip [_ZClip]
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options renderinglayer
        #pragma target 5.0
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma hull Hull
        #pragma domain Domain
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_domain _ _TESSELLATION_PHONG
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_SHADOWS
        #define TESSELLATION_ON 1
        #define HAVE_TESSELLATION_MODIFICATION 1
        
            #ifdef TESSELLATION_ON
            // World and normal are always available
                #define VARYINGS_DS_NEED_TANGENT
            #define VARYINGS_DS_NEED_TEXCOORD0
                        #define VARYINGS_DS_NEED_COLOR
        	#endif
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _Tesselation_Factor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float2 _NoiseTiling;
        float4 _Noise_TexelSize;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _Tess_Height_1_Min;
        float _Tess_Height_2_Min;
        float _Tess_Height_1_Max;
        float _Tess_Height_2_Max;
        float _Tess_Height_1_Offset;
        float _Tess_Height_2_Offset;
        float _Tess_Height_Blend_Transition;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _TessellationFactorMinDistance;
        float _TessellationFactorMaxDistance;
        float _TessellationFactorTriangleSize;
        float _TessellationShapeFactor;
        float _TessellationBackFaceCullEpsilon;
        float _TessellationMaxDisplacement;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToDS
        {
             float3 positionRWS;
             float3 positionPredisplacementRWS;
             float tessellationFactor;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 WorldSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct SurfaceDescriptionInputs
        {
        };
        struct PackedVaryingsMeshToDS
        {
             float4 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float3 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToDS PackVaryingsMeshToDS (VaryingsMeshToDS input)
        {
            PackedVaryingsMeshToDS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToDS, output);
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.positionPredisplacementRWS;
            output.interp0.w =  input.tessellationFactor;
            output.interp2.xyz =  input.normalWS;
            output.interp3.xyzw =  input.tangentWS;
            output.interp4.xyzw =  input.texCoord0;
            output.interp5.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToDS UnpackVaryingsMeshToDS (PackedVaryingsMeshToDS input)
        {
            VaryingsMeshToDS output;
            output.positionRWS = input.interp0.xyz;
            output.positionPredisplacementRWS = input.interp1.xyz;
            output.tessellationFactor = input.interp0.w;
            output.normalWS = input.interp2.xyz;
            output.tangentWS = input.interp3.xyzw;
            output.texCoord0 = input.interp4.xyzw;
            output.color = input.interp5.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
          float4 _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0 = float4(0.0f, 0.0f, 0.0f, 1.0f);
        #else
          float4 _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0 = SAMPLE_TEXTURE2D_LOD(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3), 0);
        #endif
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_R_5 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.r;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_G_6 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.g;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_B_7 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.b;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_A_8 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.a;
        XZ_2 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A * B;
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float TessellationFactor;
            float3 TessellationDisplacement;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            float _Property_4ce4eaefdd25487c81be7b77fded0e8e_Out_0 = _Tesselation_Factor;
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd;
            _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd.uv0 = IN.uv0;
            float4 _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2;
            SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd, _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2);
            float _Split_44fceac2f3ee418191b4553af6521c38_R_1 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[0];
            float _Split_44fceac2f3ee418191b4553af6521c38_G_2 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[1];
            float _Split_44fceac2f3ee418191b4553af6521c38_B_3 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[2];
            float _Split_44fceac2f3ee418191b4553af6521c38_A_4 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[3];
            float _Property_5cf4fd27daa14e02beb11bde8618dc1e_Out_0 = _Tess_Height_1_Min;
            float _Property_a9fd3adbddb24ff0b202f15d317d6251_Out_0 = _Tess_Height_1_Max;
            float2 _Vector2_4b26dbfd9f4e41ae9fc52ffe3b6c2743_Out_0 = float2(_Property_5cf4fd27daa14e02beb11bde8618dc1e_Out_0, _Property_a9fd3adbddb24ff0b202f15d317d6251_Out_0);
            float _Property_454bc81a8b1d4b91a1cdf06a95389fb8_Out_0 = _Tess_Height_1_Offset;
            float2 _Add_2e98ee41829843038c7084b5bc960d61_Out_2;
            Unity_Add_float2(_Vector2_4b26dbfd9f4e41ae9fc52ffe3b6c2743_Out_0, (_Property_454bc81a8b1d4b91a1cdf06a95389fb8_Out_0.xx), _Add_2e98ee41829843038c7084b5bc960d61_Out_2);
            float _Remap_027c62ebc97a45008874341269c98bdf_Out_3;
            Unity_Remap_float(_Split_44fceac2f3ee418191b4553af6521c38_B_3, float2 (0, 1), _Add_2e98ee41829843038c7084b5bc960d61_Out_2, _Remap_027c62ebc97a45008874341269c98bdf_Out_3);
            float _Property_22defdb92c8c4d2d97399b5fa41a900f_Out_0 = _HeightMin;
            float _Property_4de33eacfaf44d23b70a35429cce4ab5_Out_0 = _HeightMax;
            float2 _Vector2_e0dfbebd413e42a096904d5153c239d6_Out_0 = float2(_Property_22defdb92c8c4d2d97399b5fa41a900f_Out_0, _Property_4de33eacfaf44d23b70a35429cce4ab5_Out_0);
            float _Property_5f63683b3cf342e784b5d7ba224281eb_Out_0 = _HeightOffset;
            float2 _Add_1232537e8b9e4b739b5ebf05db959350_Out_2;
            Unity_Add_float2(_Vector2_e0dfbebd413e42a096904d5153c239d6_Out_0, (_Property_5f63683b3cf342e784b5d7ba224281eb_Out_0.xx), _Add_1232537e8b9e4b739b5ebf05db959350_Out_2);
            float _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3;
            Unity_Remap_float(_Split_44fceac2f3ee418191b4553af6521c38_B_3, float2 (0, 1), _Add_1232537e8b9e4b739b5ebf05db959350_Out_2, _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3;
            Unity_Clamp_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, 0, 1, _Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3);
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
              float4 _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0 = float4(0.0f, 0.0f, 0.0f, 1.0f);
            #else
              float4 _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0 = SAMPLE_TEXTURE2D_LOD(_Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.tex, _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.samplerstate, _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.GetTransformedUV(IN.uv0.xy), 0);
            #endif
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.r;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_G_6 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.g;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_B_7 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.b;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_A_8 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.a;
            float _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1;
            Unity_OneMinus_float(_SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5, _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1);
            float _Branch_5983f2479e684f37be29feca5608cf23_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1, _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5, _Branch_5983f2479e684f37be29feca5608cf23_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1;
            _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1.uv0 = IN.uv0;
            float4 _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2;
            SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1, _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2);
            float _Split_b681fe64892d4ccb828e0f6e32843516_R_1 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[0];
            float _Split_b681fe64892d4ccb828e0f6e32843516_G_2 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[1];
            float _Split_b681fe64892d4ccb828e0f6e32843516_B_3 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[2];
            float _Split_b681fe64892d4ccb828e0f6e32843516_A_4 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[3];
            float _Property_dfc13ef2f2dc4782800213462a60264e_Out_0 = _Tess_Height_2_Min;
            float _Property_a7a0d4e5a55541c496131ce65673dc91_Out_0 = _Tess_Height_2_Max;
            float2 _Vector2_680472357da14269b3fcb86a2574fd4e_Out_0 = float2(_Property_dfc13ef2f2dc4782800213462a60264e_Out_0, _Property_a7a0d4e5a55541c496131ce65673dc91_Out_0);
            float _Property_d4c81546338c4021943305435fad6d47_Out_0 = _Tess_Height_2_Offset;
            float2 _Add_685eacdaa4e14198a337eb5f87657041_Out_2;
            Unity_Add_float2(_Vector2_680472357da14269b3fcb86a2574fd4e_Out_0, (_Property_d4c81546338c4021943305435fad6d47_Out_0.xx), _Add_685eacdaa4e14198a337eb5f87657041_Out_2);
            float _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3;
            Unity_Remap_float(_Split_b681fe64892d4ccb828e0f6e32843516_B_3, float2 (0, 1), _Add_685eacdaa4e14198a337eb5f87657041_Out_2, _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3);
            float _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2;
            Unity_Multiply_float_float(_Branch_5983f2479e684f37be29feca5608cf23_Out_3, _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3, _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2);
            float _Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2;
            Unity_Multiply_float_float(_Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3, _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2, _Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2);
            float _Property_64ab9d23c014488e89cccc873cdd95d7_Out_0 = _HeightMin2;
            float _Property_c48827db27c44115952bbfdea9c70def_Out_0 = _HeightMax2;
            float2 _Vector2_ce60d322af6d4a1f9d3d0c93c9a597bb_Out_0 = float2(_Property_64ab9d23c014488e89cccc873cdd95d7_Out_0, _Property_c48827db27c44115952bbfdea9c70def_Out_0);
            float _Property_2d4e482f9b1749e69d85da504f5cbb13_Out_0 = _HeightOffset2;
            float2 _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2;
            Unity_Add_float2(_Vector2_ce60d322af6d4a1f9d3d0c93c9a597bb_Out_0, (_Property_2d4e482f9b1749e69d85da504f5cbb13_Out_0.xx), _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2);
            float _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3;
            Unity_Remap_float(_Split_b681fe64892d4ccb828e0f6e32843516_B_3, float2 (0, 1), _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2, _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3);
            float _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2;
            Unity_Multiply_float_float(_Branch_5983f2479e684f37be29feca5608cf23_Out_3, _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3, _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2);
            float _Multiply_e114c6909b264a3f880f484d068fa807_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2, _Multiply_e114c6909b264a3f880f484d068fa807_Out_2);
            float _Property_2bf75be176a5486b910544b5f36208a2_Out_0 = _Tess_Height_Blend_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_764bb1d66e274c1c986dcc710a41100e;
            float4 _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Remap_027c62ebc97a45008874341269c98bdf_Out_3.xxxx), _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3, (_Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2.xxxx), _Multiply_e114c6909b264a3f880f484d068fa807_Out_2, _Property_2bf75be176a5486b910544b5f36208a2_Out_0, _HeightBlend4_764bb1d66e274c1c986dcc710a41100e, _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1);
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_R_1 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[0];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_G_2 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[1];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_B_3 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[2];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_A_4 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[3];
            float3 _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2;
            Unity_Multiply_float3_float3(IN.WorldSpaceNormal, (_Split_6bbe578103fb4f3b81bea9f6e7100d4e_R_1.xxx), _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2);
            description.Position = IN.ObjectSpacePosition;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            description.TessellationFactor = _Property_4ce4eaefdd25487c81be7b77fded0e8e_Out_0;
            description.TessellationDisplacement = _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float Alpha;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            surface.Alpha = 1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.WorldSpaceNormal =                           TransformObjectToWorldNormal(input.normalOS);
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(TransformObjectToWorld(input.positionOS).xyz);
            output.uv0 =                                        input.uv0;
            output.VertexColor =                                input.color;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            #ifdef TESSELLATION_ON
        
        float GetTessellationFactor(AttributesMesh input)
        {
            float tessellationFactor = 1.0;
        
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            tessellationFactor = vertexDescription.TessellationFactor;
        
            return tessellationFactor;
        }
        
        float GetMaxDisplacement()
        {
            return _TessellationMaxDisplacement;
        }
        
        // TODO: We should generate this struct like all the other varying struct
        VaryingsMeshToDS InterpolateWithBaryCoordsMeshToDS(VaryingsMeshToDS input0, VaryingsMeshToDS input1, VaryingsMeshToDS input2, float3 baryCoords)
        {
            VaryingsMeshToDS output;
        
            UNITY_TRANSFER_INSTANCE_ID(input0, output);
        
            TESSELLATION_INTERPOLATE_BARY(positionRWS, baryCoords);
            output.positionPredisplacementRWS = output.positionRWS;
            TESSELLATION_INTERPOLATE_BARY(normalWS, baryCoords);
        #ifdef VARYINGS_DS_NEED_TANGENT
            // This will interpolate the sign but should be ok in practice as we may expect a triangle to have same sign (? TO CHECK)
            TESSELLATION_INTERPOLATE_BARY(tangentWS, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD0
            TESSELLATION_INTERPOLATE_BARY(texCoord0, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD1
            TESSELLATION_INTERPOLATE_BARY(texCoord1, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD2
            TESSELLATION_INTERPOLATE_BARY(texCoord2, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD3
            TESSELLATION_INTERPOLATE_BARY(texCoord3, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_COLOR
            TESSELLATION_INTERPOLATE_BARY(color, baryCoords);
        #endif
        
            // Pass-Through for custom interpolator
            
        
            return output;
        }
        
        VertexDescriptionInputs VaryingsMeshToDSToVertexDescriptionInputs(VaryingsMeshToDS input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal = TransformWorldToObjectNormal(input.normalWS);
            output.WorldSpaceNormal = input.normalWS;
            output.ObjectSpaceTangent = TransformWorldToObjectDir(input.tangentWS.xyz);
            output.ObjectSpacePosition = TransformWorldToObject(input.positionRWS);
            output.AbsoluteWorldSpacePosition = GetAbsolutePositionWS(input.positionRWS.xyz);
            output.uv0 = input.texCoord0;
            output.VertexColor = input.color;
        
            return output;
        }
        
        #ifdef HAVE_TESSELLATION_MODIFICATION
        // tessellationFactors
        // x - 1->2 edge
        // y - 2->0 edge
        // z - 0->1 edge
        // w - inside tessellation factor
        VaryingsMeshToDS ApplyTessellationModification(VaryingsMeshToDS input, float3 timeParameters)
        {
            // HACK: As there is no specific tessellation stage for now in shadergraph, we reuse the vertex description mechanism.
            // It mean we store TessellationFactor inside vertex description causing extra read on both vertex and hull stage, but unusued paramater are optimize out by the shader compiler, so no impact.
            VertexDescriptionInputs vertexDescriptionInputs = VaryingsMeshToDSToVertexDescriptionInputs(input);
            // Override time paramters with used one (This is required to correctly handle motion vector for tessellation animation based on time)
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            input.positionRWS += vertexDescription.TessellationDisplacement;
        
            return input;
        }
        
        #endif
        
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
        
        // This will evaluate the custom interpolator and update the varying structure
        void VertMeshTesselationCustomInterpolation(VaryingsMeshToDS input, inout VaryingsMeshToPS output)
        {
            
        }
        
        #endif // USE_CUSTOMINTERP_SUBSTRUCT
        
        #endif // TESSELLATION_ON
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "META"
            Tags
            {
                "LightMode" = "META"
            }
        
            // Render State
            Cull Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ EDITOR_VISUALIZATION
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_TEXCOORD3
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_POSITIONPREDISPLACEMENT_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_TEXCOORD3
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_LIGHT_TRANSPORT
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
            #ifdef TESSELLATION_ON
            // World and normal are always available
            #define VARYINGS_DS_NEED_POSITIONPREDISPLACEMENT
            #define VARYINGS_DS_NEED_TANGENT
            #define VARYINGS_DS_NEED_TEXCOORD0
            #define VARYINGS_DS_NEED_TEXCOORD1
            #define VARYINGS_DS_NEED_TEXCOORD2
            #define VARYINGS_DS_NEED_TEXCOORD3
            #define VARYINGS_DS_NEED_COLOR
        	#endif
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _Tesselation_Factor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float2 _NoiseTiling;
        float4 _Noise_TexelSize;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _Tess_Height_1_Min;
        float _Tess_Height_2_Min;
        float _Tess_Height_1_Max;
        float _Tess_Height_2_Max;
        float _Tess_Height_1_Offset;
        float _Tess_Height_2_Offset;
        float _Tess_Height_Blend_Transition;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _TessellationFactorMinDistance;
        float _TessellationFactorMaxDistance;
        float _TessellationFactorTriangleSize;
        float _TessellationShapeFactor;
        float _TessellationBackFaceCullEpsilon;
        float _TessellationMaxDisplacement;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv1 : TEXCOORD1;
             float4 uv2 : TEXCOORD2;
             float4 uv3 : TEXCOORD3;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 positionPredisplacementRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 texCoord3;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float3 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
             float4 interp6 : INTERP6;
             float4 interp7 : INTERP7;
             float4 interp8 : INTERP8;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.positionPredisplacementRWS;
            output.interp2.xyz =  input.normalWS;
            output.interp3.xyzw =  input.tangentWS;
            output.interp4.xyzw =  input.texCoord0;
            output.interp5.xyzw =  input.texCoord1;
            output.interp6.xyzw =  input.texCoord2;
            output.interp7.xyzw =  input.texCoord3;
            output.interp8.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.positionPredisplacementRWS = input.interp1.xyz;
            output.normalWS = input.interp2.xyz;
            output.tangentWS = input.interp3.xyzw;
            output.texCoord0 = input.interp4.xyzw;
            output.texCoord1 = input.interp5.xyzw;
            output.texCoord2 = input.interp6.xyzw;
            output.texCoord3 = input.interp7.xyzw;
            output.color = input.interp8.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_07d75b1d2628da808a2efb93a1d6219e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.uv0 = IN.uv0;
            float4 _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_07d75b1d2628da808a2efb93a1d6219e_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2);
            float4 _Property_b83097c58639858680bf43881a95b0af_Out_0 = _BaseColor;
            float4 _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2, _Property_b83097c58639858680bf43881a95b0af_Out_0, _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2);
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[0];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[1];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[2];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_A_4 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[3];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_R_1 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[0];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_G_2 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[1];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_B_3 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[2];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_A_4 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[3];
            float _Property_04a7bb2753456b8293b3e46e346b646e_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0 = float2(_Property_04a7bb2753456b8293b3e46e346b646e_Out_0, _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0);
            float _Remap_65ca5af95590f88da70777476b6efd40_Out_3;
            Unity_Remap_float(_Split_6a373913f8b5c587b3b25440e2351a6f_A_4, float2 (0, 1), _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float4 _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4;
            float3 _Combine_d07fea824e695b839a48350dc82f464b_RGB_5;
            float2 _Combine_d07fea824e695b839a48350dc82f464b_RG_6;
            Unity_Combine_float(_Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1, _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2, _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3, _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Combine_d07fea824e695b839a48350dc82f464b_RGB_5, _Combine_d07fea824e695b839a48350dc82f464b_RG_6);
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_4245c3b264047180b5c90a697d6cb278;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.uv0 = IN.uv0;
            float4 _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_4245c3b264047180b5c90a697d6cb278, _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2);
            float _Split_91a015dea8acd38b904ba0935328a5bc_R_1 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[0];
            float _Split_91a015dea8acd38b904ba0935328a5bc_G_2 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[1];
            float _Split_91a015dea8acd38b904ba0935328a5bc_B_3 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[2];
            float _Split_91a015dea8acd38b904ba0935328a5bc_A_4 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[3];
            float _Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0 = _HeightMin;
            float _Property_9df7a44c8225168683743ac60c0c3c34_Out_0 = _HeightMax;
            float2 _Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0 = float2(_Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0, _Property_9df7a44c8225168683743ac60c0c3c34_Out_0);
            float _Property_29ca14fd0b712983a38d63d2dd326e96_Out_0 = _HeightOffset;
            float2 _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2;
            Unity_Add_float2(_Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0, (_Property_29ca14fd0b712983a38d63d2dd326e96_Out_0.xx), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2);
            float _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_B_3, float2 (0, 1), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3);
            UnityTexture2D _Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.uv0 = IN.uv0;
            float4 _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2);
            float4 _Property_3561b11b899bda8e855826445cf628aa_Out_0 = _Base2Color;
            float4 _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2, _Property_3561b11b899bda8e855826445cf628aa_Out_0, _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2);
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[0];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[1];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[2];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_A_4 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[3];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_R_1 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[0];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_G_2 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[1];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_B_3 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[2];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[3];
            float _Property_159cd47513de4f85a992da1f43f77c51_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0 = float2(_Property_159cd47513de4f85a992da1f43f77c51_Out_0, _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0);
            float _Remap_1214803bb0f7c387adc088fb938f7971_Out_3;
            Unity_Remap_float(_Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4, float2 (0, 1), _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3);
            float4 _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4;
            float3 _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5;
            float2 _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6;
            Unity_Combine_float(_Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1, _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2, _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5, _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.tex, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.samplerstate, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.r;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_G_5 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.g;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_B_6 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.b;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_A_7 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.a;
            float _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1);
            float _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1, _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d5657f470f05ef839e4c257a20ace8cb;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.uv0 = IN.uv0;
            float4 _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2);
            float _Split_83ec66b648ab6c84848b42686c256cd7_R_1 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[0];
            float _Split_83ec66b648ab6c84848b42686c256cd7_G_2 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[1];
            float _Split_83ec66b648ab6c84848b42686c256cd7_B_3 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[2];
            float _Split_83ec66b648ab6c84848b42686c256cd7_A_4 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[3];
            float _Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0 = _HeightMin2;
            float _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0 = _HeightMax2;
            float2 _Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0 = float2(_Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0, _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0);
            float _Property_151ae2702b614585af2000f0a812960f_Out_0 = _HeightOffset2;
            float2 _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2;
            Unity_Add_float2(_Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0, (_Property_151ae2702b614585af2000f0a812960f_Out_0.xx), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2);
            float _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_B_3, float2 (0, 1), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3);
            float _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2;
            Unity_Multiply_float_float(_Branch_af0c5e511241ce8eae748ae487df50fa_Out_3, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2);
            float _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2);
            float _Property_818c8af4b930138e81034c886614171d_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8;
            float4 _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1);
            float _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3;
            Unity_Lerp_float(0, _Split_91a015dea8acd38b904ba0935328a5bc_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3);
            float _Property_956d1a93cb804081b21a76fd0c75a806_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2;
            Unity_Multiply_float_float(_Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3, _Property_956d1a93cb804081b21a76fd0c75a806_Out_0, _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2);
            float _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1;
            Unity_Absolute_float(_Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2, _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1);
            float _Property_96173fa32f95148fa9d2a017748d5235_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_d81ebc6955897c87b8fb462f713aae50_Out_2;
            Unity_Power_float(_Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1, _Property_96173fa32f95148fa9d2a017748d5235_Out_0, _Power_d81ebc6955897c87b8fb462f713aae50_Out_2);
            float _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3;
            Unity_Lerp_float(0, _Split_83ec66b648ab6c84848b42686c256cd7_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3);
            float _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2;
            Unity_Multiply_float_float(_Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3, _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0, _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2);
            float _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1;
            Unity_Absolute_float(_Multiply_b761b264ce901b81b32b974d83993b3d_Out_2, _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1);
            float _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2;
            Unity_Power_float(_Absolute_2511aaf2b812e58b93d44253984de16c_Out_1, _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2);
            float _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3;
            Unity_Lerp_float(_Power_d81ebc6955897c87b8fb462f713aae50_Out_2, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3);
            float4 _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_5933ed525fc7068893db7db94870134a_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0, _Multiply_5933ed525fc7068893db7db94870134a_Out_2);
            UnityTexture2D _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0 = IN.uv0;
            float2 _Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0 = _NoiseSpeed;
            float2 _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2;
            Unity_Multiply_float2_float2(_Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0, (IN.TimeParameters.x.xx), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2);
            float2 _Add_bc688882d8fee68487424542b1a69952_Out_2;
            Unity_Add_float2((_UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0.xy), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2, _Add_bc688882d8fee68487424542b1a69952_Out_2);
            float4 _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_bc688882d8fee68487424542b1a69952_Out_2));
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_R_4 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.r;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_G_5 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.g;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_B_6 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.b;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.a;
            float2 _Multiply_d613a21978306a858470588fdf147e8f_Out_2;
            Unity_Multiply_float2_float2(_Add_bc688882d8fee68487424542b1a69952_Out_2, float2(-1.2, -0.9), _Multiply_d613a21978306a858470588fdf147e8f_Out_2);
            float2 _Add_888a259bce586985b790e81a5145084b_Out_2;
            Unity_Add_float2(_Multiply_d613a21978306a858470588fdf147e8f_Out_2, float2(0.5, 0.5), _Add_888a259bce586985b790e81a5145084b_Out_2);
            float4 _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_888a259bce586985b790e81a5145084b_Out_2));
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_R_4 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.r;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_G_5 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.g;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_B_6 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.b;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.a;
            float _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2;
            Unity_Minimum_float(_SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7, _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7, _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2);
            float _Absolute_20087090b3600b8d97155e3798d64011_Out_1;
            Unity_Absolute_float(_Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2, _Absolute_20087090b3600b8d97155e3798d64011_Out_1);
            float _Property_7a2d696ef1d8028a966365137be9d25e_Out_0 = _EmissionNoisePower;
            float _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2;
            Unity_Power_float(_Absolute_20087090b3600b8d97155e3798d64011_Out_1, _Property_7a2d696ef1d8028a966365137be9d25e_Out_0, _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2);
            float _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2;
            Unity_Multiply_float_float(_Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2, 20, _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2);
            float _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3;
            Unity_Clamp_float(_Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2, 0.05, 1.2, _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3);
            float4 _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2;
            Unity_Multiply_float4_float4(_Multiply_5933ed525fc7068893db7db94870134a_Out_2, (_Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3.xxxx), _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2);
            float4 _Property_c805fa28a9c59b8e93d45497d3768156_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            UnityTexture2D _Property_7c7049e15fdff386b535790d8666f609_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.uv0 = IN.uv0;
            float4 _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_7c7049e15fdff386b535790d8666f609_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2);
            float _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2.xyz), _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0, _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2);
            UnityTexture2D _Property_fa9f7890b20ad481a92543c04b237bde_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.uv0 = IN.uv0;
            float4 _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_fa9f7890b20ad481a92543c04b237bde_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2);
            float _Property_8c31443b776727819a663c7ddce79064_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2.xyz), _Property_8c31443b776727819a663c7ddce79064_Out_0, _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2;
            float4 _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1);
            float3 _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1);
            float _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2;
            Unity_DotProduct_float3((_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz), _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1, _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2);
            float _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1;
            Unity_Saturate_float(_DotProduct_21807a3955457c888958cf9b7de210fc_Out_2, _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1);
            float _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1;
            Unity_OneMinus_float(_Saturate_5e97c86e74edb580abca053af090c6f7_Out_1, _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1);
            float _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1;
            Unity_Absolute_float(_OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1, _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1);
            float _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2;
            Unity_Power_float(_Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1, 10, _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2);
            float4 _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2;
            Unity_Multiply_float4_float4(_Property_c805fa28a9c59b8e93d45497d3768156_Out_0, (_Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2.xxxx), _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2);
            float _Property_23902821969b7a8aabcaa150279da760_Out_0 = _RimLightPower;
            float4 _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2;
            Unity_Multiply_float4_float4(_Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2, (_Property_23902821969b7a8aabcaa150279da760_Out_0.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2);
            float4 _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2);
            float4 _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2;
            Unity_Add_float4(_Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2, _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2);
            float4 _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3;
            Unity_Clamp_float4(_Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, float4(0, 0, 0, 0), _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3);
            float _Split_579bec1940604a80b8bf85fbd157877e_R_1 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[0];
            float _Split_579bec1940604a80b8bf85fbd157877e_G_2 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[1];
            float _Split_579bec1940604a80b8bf85fbd157877e_B_3 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[2];
            float _Split_579bec1940604a80b8bf85fbd157877e_A_4 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[3];
            float _Property_afd0f3561038ef8487e614f350d364dd_Out_0 = _BaseMetallic;
            float _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2;
            Unity_Multiply_float_float(_Split_91a015dea8acd38b904ba0935328a5bc_R_1, _Property_afd0f3561038ef8487e614f350d364dd_Out_0, _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2);
            float _Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0 = _BaseAORemapMin;
            float _Property_9d07c7a09a85da809f1d4661406e0888_Out_0 = _BaseAORemapMax;
            float2 _Vector2_10162c774de2a7838426399cfe98be82_Out_0 = float2(_Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0, _Property_9d07c7a09a85da809f1d4661406e0888_Out_0);
            float _Remap_c45fda31db668c81a9e89e11297ec993_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_G_2, float2 (0, 1), _Vector2_10162c774de2a7838426399cfe98be82_Out_0, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3);
            float3 _Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0 = float3(_Multiply_154e0f89b19c8e86926222afb13691e3_Out_2, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0 = _Base2Metallic;
            float _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2;
            Unity_Multiply_float_float(_Split_83ec66b648ab6c84848b42686c256cd7_R_1, _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0, _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2);
            float _Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0 = _Base2AORemapMin;
            float _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0 = _Base2AORemapMax;
            float2 _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0 = float2(_Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0, _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0);
            float _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_G_2, float2 (0, 1), _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3);
            float3 _Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0 = float3(_Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_a5073733c462898f8bf5761db76cd246;
            float4 _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_a5073733c462898f8bf5761db76cd246, _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1);
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[0];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[1];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_B_3 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[2];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_A_4 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[3];
            surface.BaseColor = (_HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1.xyz);
            surface.Emission = (_Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_579bec1940604a80b8bf85fbd157877e_A_4;
            surface.Occlusion = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2;
            surface.NormalTS = (_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz);
            surface.Metallic = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVertMeshCustomInterpolation' */
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.positionPredisplacementRWS = input.positionPredisplacementRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord1 =                  input.texCoord1;
            output.texCoord2 =                  input.texCoord2;
            output.texCoord3 =                  input.texCoord3;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVaryingsToFragInputs' */
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            #ifdef TESSELLATION_ON
        
        float GetTessellationFactor(AttributesMesh input)
        {
            float tessellationFactor = 1.0;
        
            // build graph inputs
        
            return tessellationFactor;
        }
        
        float GetMaxDisplacement()
        {
            return _TessellationMaxDisplacement;
        }
        
        // TODO: We should generate this struct like all the other varying struct
        VaryingsMeshToDS InterpolateWithBaryCoordsMeshToDS(VaryingsMeshToDS input0, VaryingsMeshToDS input1, VaryingsMeshToDS input2, float3 baryCoords)
        {
            VaryingsMeshToDS output;
        
            UNITY_TRANSFER_INSTANCE_ID(input0, output);
        
            TESSELLATION_INTERPOLATE_BARY(positionRWS, baryCoords);
            output.positionPredisplacementRWS = output.positionRWS;
            TESSELLATION_INTERPOLATE_BARY(normalWS, baryCoords);
        #ifdef VARYINGS_DS_NEED_TANGENT
            // This will interpolate the sign but should be ok in practice as we may expect a triangle to have same sign (? TO CHECK)
            TESSELLATION_INTERPOLATE_BARY(tangentWS, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD0
            TESSELLATION_INTERPOLATE_BARY(texCoord0, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD1
            TESSELLATION_INTERPOLATE_BARY(texCoord1, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD2
            TESSELLATION_INTERPOLATE_BARY(texCoord2, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD3
            TESSELLATION_INTERPOLATE_BARY(texCoord3, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_COLOR
            TESSELLATION_INTERPOLATE_BARY(color, baryCoords);
        #endif
        
            // Pass-Through for custom interpolator
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorInterpolateWithBaryCoordsMeshToDS' */
        
            return output;
        }
        
        VertexDescriptionInputs VaryingsMeshToDSToVertexDescriptionInputs(VaryingsMeshToDS input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        
            return output;
        }
        
        #ifdef HAVE_TESSELLATION_MODIFICATION
        // tessellationFactors
        // x - 1->2 edge
        // y - 2->0 edge
        // z - 0->1 edge
        // w - inside tessellation factor
        VaryingsMeshToDS ApplyTessellationModification(VaryingsMeshToDS input, float3 timeParameters)
        {
            // HACK: As there is no specific tessellation stage for now in shadergraph, we reuse the vertex description mechanism.
            // It mean we store TessellationFactor inside vertex description causing extra read on both vertex and hull stage, but unusued paramater are optimize out by the shader compiler, so no impact.
            VertexDescriptionInputs vertexDescriptionInputs = VaryingsMeshToDSToVertexDescriptionInputs(input);
            // Override time paramters with used one (This is required to correctly handle motion vector for tessellation animation based on time)
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        
            return input;
        }
        
        #endif
        
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
        
        // This will evaluate the custom interpolator and update the varying structure
        void VertMeshTesselationCustomInterpolation(VaryingsMeshToDS input, inout VaryingsMeshToPS output)
        {
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVertMeshTesselationCustomInterpolation' */
        }
        
        #endif // USE_CUSTOMINTERP_SUBSTRUCT
        
        #endif // TESSELLATION_ON
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassLightTransport.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "ScenePickingPass"
            Tags
            {
                "LightMode" = "Picking"
            }
        
            // Render State
            Cull [_CullMode]
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma editor_sync_compilation
        #pragma target 5.0
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma hull Hull
        #pragma domain Domain
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_domain _ _TESSELLATION_PHONG
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define SCENEPICKINGPASS 1
        #define TESSELLATION_ON 1
        #define HAVE_TESSELLATION_MODIFICATION 1
        
            #ifdef TESSELLATION_ON
            // World and normal are always available
                #define VARYINGS_DS_NEED_TANGENT
            #define VARYINGS_DS_NEED_TEXCOORD0
                        #define VARYINGS_DS_NEED_COLOR
        	#endif
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _Tesselation_Factor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float2 _NoiseTiling;
        float4 _Noise_TexelSize;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _Tess_Height_1_Min;
        float _Tess_Height_2_Min;
        float _Tess_Height_1_Max;
        float _Tess_Height_2_Max;
        float _Tess_Height_1_Offset;
        float _Tess_Height_2_Offset;
        float _Tess_Height_Blend_Transition;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _TessellationFactorMinDistance;
        float _TessellationFactorMaxDistance;
        float _TessellationFactorTriangleSize;
        float _TessellationShapeFactor;
        float _TessellationBackFaceCullEpsilon;
        float _TessellationMaxDisplacement;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToDS
        {
             float3 positionRWS;
             float3 positionPredisplacementRWS;
             float tessellationFactor;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 WorldSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        struct PackedVaryingsMeshToDS
        {
             float4 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float3 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToDS PackVaryingsMeshToDS (VaryingsMeshToDS input)
        {
            PackedVaryingsMeshToDS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToDS, output);
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.positionPredisplacementRWS;
            output.interp0.w =  input.tessellationFactor;
            output.interp2.xyz =  input.normalWS;
            output.interp3.xyzw =  input.tangentWS;
            output.interp4.xyzw =  input.texCoord0;
            output.interp5.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToDS UnpackVaryingsMeshToDS (PackedVaryingsMeshToDS input)
        {
            VaryingsMeshToDS output;
            output.positionRWS = input.interp0.xyz;
            output.positionPredisplacementRWS = input.interp1.xyz;
            output.tessellationFactor = input.interp0.w;
            output.normalWS = input.interp2.xyz;
            output.tangentWS = input.interp3.xyzw;
            output.texCoord0 = input.interp4.xyzw;
            output.color = input.interp5.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
          float4 _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0 = float4(0.0f, 0.0f, 0.0f, 1.0f);
        #else
          float4 _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0 = SAMPLE_TEXTURE2D_LOD(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3), 0);
        #endif
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_R_5 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.r;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_G_6 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.g;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_B_7 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.b;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_A_8 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.a;
        XZ_2 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A * B;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float TessellationFactor;
            float3 TessellationDisplacement;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            float _Property_4ce4eaefdd25487c81be7b77fded0e8e_Out_0 = _Tesselation_Factor;
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd;
            _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd.uv0 = IN.uv0;
            float4 _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2;
            SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd, _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2);
            float _Split_44fceac2f3ee418191b4553af6521c38_R_1 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[0];
            float _Split_44fceac2f3ee418191b4553af6521c38_G_2 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[1];
            float _Split_44fceac2f3ee418191b4553af6521c38_B_3 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[2];
            float _Split_44fceac2f3ee418191b4553af6521c38_A_4 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[3];
            float _Property_5cf4fd27daa14e02beb11bde8618dc1e_Out_0 = _Tess_Height_1_Min;
            float _Property_a9fd3adbddb24ff0b202f15d317d6251_Out_0 = _Tess_Height_1_Max;
            float2 _Vector2_4b26dbfd9f4e41ae9fc52ffe3b6c2743_Out_0 = float2(_Property_5cf4fd27daa14e02beb11bde8618dc1e_Out_0, _Property_a9fd3adbddb24ff0b202f15d317d6251_Out_0);
            float _Property_454bc81a8b1d4b91a1cdf06a95389fb8_Out_0 = _Tess_Height_1_Offset;
            float2 _Add_2e98ee41829843038c7084b5bc960d61_Out_2;
            Unity_Add_float2(_Vector2_4b26dbfd9f4e41ae9fc52ffe3b6c2743_Out_0, (_Property_454bc81a8b1d4b91a1cdf06a95389fb8_Out_0.xx), _Add_2e98ee41829843038c7084b5bc960d61_Out_2);
            float _Remap_027c62ebc97a45008874341269c98bdf_Out_3;
            Unity_Remap_float(_Split_44fceac2f3ee418191b4553af6521c38_B_3, float2 (0, 1), _Add_2e98ee41829843038c7084b5bc960d61_Out_2, _Remap_027c62ebc97a45008874341269c98bdf_Out_3);
            float _Property_22defdb92c8c4d2d97399b5fa41a900f_Out_0 = _HeightMin;
            float _Property_4de33eacfaf44d23b70a35429cce4ab5_Out_0 = _HeightMax;
            float2 _Vector2_e0dfbebd413e42a096904d5153c239d6_Out_0 = float2(_Property_22defdb92c8c4d2d97399b5fa41a900f_Out_0, _Property_4de33eacfaf44d23b70a35429cce4ab5_Out_0);
            float _Property_5f63683b3cf342e784b5d7ba224281eb_Out_0 = _HeightOffset;
            float2 _Add_1232537e8b9e4b739b5ebf05db959350_Out_2;
            Unity_Add_float2(_Vector2_e0dfbebd413e42a096904d5153c239d6_Out_0, (_Property_5f63683b3cf342e784b5d7ba224281eb_Out_0.xx), _Add_1232537e8b9e4b739b5ebf05db959350_Out_2);
            float _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3;
            Unity_Remap_float(_Split_44fceac2f3ee418191b4553af6521c38_B_3, float2 (0, 1), _Add_1232537e8b9e4b739b5ebf05db959350_Out_2, _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3;
            Unity_Clamp_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, 0, 1, _Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3);
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
              float4 _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0 = float4(0.0f, 0.0f, 0.0f, 1.0f);
            #else
              float4 _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0 = SAMPLE_TEXTURE2D_LOD(_Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.tex, _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.samplerstate, _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.GetTransformedUV(IN.uv0.xy), 0);
            #endif
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.r;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_G_6 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.g;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_B_7 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.b;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_A_8 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.a;
            float _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1;
            Unity_OneMinus_float(_SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5, _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1);
            float _Branch_5983f2479e684f37be29feca5608cf23_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1, _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5, _Branch_5983f2479e684f37be29feca5608cf23_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1;
            _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1.uv0 = IN.uv0;
            float4 _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2;
            SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1, _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2);
            float _Split_b681fe64892d4ccb828e0f6e32843516_R_1 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[0];
            float _Split_b681fe64892d4ccb828e0f6e32843516_G_2 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[1];
            float _Split_b681fe64892d4ccb828e0f6e32843516_B_3 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[2];
            float _Split_b681fe64892d4ccb828e0f6e32843516_A_4 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[3];
            float _Property_dfc13ef2f2dc4782800213462a60264e_Out_0 = _Tess_Height_2_Min;
            float _Property_a7a0d4e5a55541c496131ce65673dc91_Out_0 = _Tess_Height_2_Max;
            float2 _Vector2_680472357da14269b3fcb86a2574fd4e_Out_0 = float2(_Property_dfc13ef2f2dc4782800213462a60264e_Out_0, _Property_a7a0d4e5a55541c496131ce65673dc91_Out_0);
            float _Property_d4c81546338c4021943305435fad6d47_Out_0 = _Tess_Height_2_Offset;
            float2 _Add_685eacdaa4e14198a337eb5f87657041_Out_2;
            Unity_Add_float2(_Vector2_680472357da14269b3fcb86a2574fd4e_Out_0, (_Property_d4c81546338c4021943305435fad6d47_Out_0.xx), _Add_685eacdaa4e14198a337eb5f87657041_Out_2);
            float _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3;
            Unity_Remap_float(_Split_b681fe64892d4ccb828e0f6e32843516_B_3, float2 (0, 1), _Add_685eacdaa4e14198a337eb5f87657041_Out_2, _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3);
            float _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2;
            Unity_Multiply_float_float(_Branch_5983f2479e684f37be29feca5608cf23_Out_3, _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3, _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2);
            float _Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2;
            Unity_Multiply_float_float(_Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3, _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2, _Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2);
            float _Property_64ab9d23c014488e89cccc873cdd95d7_Out_0 = _HeightMin2;
            float _Property_c48827db27c44115952bbfdea9c70def_Out_0 = _HeightMax2;
            float2 _Vector2_ce60d322af6d4a1f9d3d0c93c9a597bb_Out_0 = float2(_Property_64ab9d23c014488e89cccc873cdd95d7_Out_0, _Property_c48827db27c44115952bbfdea9c70def_Out_0);
            float _Property_2d4e482f9b1749e69d85da504f5cbb13_Out_0 = _HeightOffset2;
            float2 _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2;
            Unity_Add_float2(_Vector2_ce60d322af6d4a1f9d3d0c93c9a597bb_Out_0, (_Property_2d4e482f9b1749e69d85da504f5cbb13_Out_0.xx), _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2);
            float _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3;
            Unity_Remap_float(_Split_b681fe64892d4ccb828e0f6e32843516_B_3, float2 (0, 1), _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2, _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3);
            float _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2;
            Unity_Multiply_float_float(_Branch_5983f2479e684f37be29feca5608cf23_Out_3, _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3, _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2);
            float _Multiply_e114c6909b264a3f880f484d068fa807_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2, _Multiply_e114c6909b264a3f880f484d068fa807_Out_2);
            float _Property_2bf75be176a5486b910544b5f36208a2_Out_0 = _Tess_Height_Blend_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_764bb1d66e274c1c986dcc710a41100e;
            float4 _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Remap_027c62ebc97a45008874341269c98bdf_Out_3.xxxx), _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3, (_Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2.xxxx), _Multiply_e114c6909b264a3f880f484d068fa807_Out_2, _Property_2bf75be176a5486b910544b5f36208a2_Out_0, _HeightBlend4_764bb1d66e274c1c986dcc710a41100e, _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1);
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_R_1 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[0];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_G_2 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[1];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_B_3 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[2];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_A_4 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[3];
            float3 _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2;
            Unity_Multiply_float3_float3(IN.WorldSpaceNormal, (_Split_6bbe578103fb4f3b81bea9f6e7100d4e_R_1.xxx), _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2);
            description.Position = IN.ObjectSpacePosition;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            description.TessellationFactor = _Property_4ce4eaefdd25487c81be7b77fded0e8e_Out_0;
            description.TessellationDisplacement = _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_07d75b1d2628da808a2efb93a1d6219e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.uv0 = IN.uv0;
            float4 _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_07d75b1d2628da808a2efb93a1d6219e_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2);
            float4 _Property_b83097c58639858680bf43881a95b0af_Out_0 = _BaseColor;
            float4 _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2, _Property_b83097c58639858680bf43881a95b0af_Out_0, _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2);
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[0];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[1];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[2];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_A_4 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[3];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_R_1 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[0];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_G_2 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[1];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_B_3 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[2];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_A_4 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[3];
            float _Property_04a7bb2753456b8293b3e46e346b646e_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0 = float2(_Property_04a7bb2753456b8293b3e46e346b646e_Out_0, _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0);
            float _Remap_65ca5af95590f88da70777476b6efd40_Out_3;
            Unity_Remap_float(_Split_6a373913f8b5c587b3b25440e2351a6f_A_4, float2 (0, 1), _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float4 _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4;
            float3 _Combine_d07fea824e695b839a48350dc82f464b_RGB_5;
            float2 _Combine_d07fea824e695b839a48350dc82f464b_RG_6;
            Unity_Combine_float(_Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1, _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2, _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3, _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Combine_d07fea824e695b839a48350dc82f464b_RGB_5, _Combine_d07fea824e695b839a48350dc82f464b_RG_6);
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_4245c3b264047180b5c90a697d6cb278;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.uv0 = IN.uv0;
            float4 _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_4245c3b264047180b5c90a697d6cb278, _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2);
            float _Split_91a015dea8acd38b904ba0935328a5bc_R_1 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[0];
            float _Split_91a015dea8acd38b904ba0935328a5bc_G_2 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[1];
            float _Split_91a015dea8acd38b904ba0935328a5bc_B_3 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[2];
            float _Split_91a015dea8acd38b904ba0935328a5bc_A_4 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[3];
            float _Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0 = _HeightMin;
            float _Property_9df7a44c8225168683743ac60c0c3c34_Out_0 = _HeightMax;
            float2 _Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0 = float2(_Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0, _Property_9df7a44c8225168683743ac60c0c3c34_Out_0);
            float _Property_29ca14fd0b712983a38d63d2dd326e96_Out_0 = _HeightOffset;
            float2 _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2;
            Unity_Add_float2(_Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0, (_Property_29ca14fd0b712983a38d63d2dd326e96_Out_0.xx), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2);
            float _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_B_3, float2 (0, 1), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3);
            UnityTexture2D _Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.uv0 = IN.uv0;
            float4 _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2);
            float4 _Property_3561b11b899bda8e855826445cf628aa_Out_0 = _Base2Color;
            float4 _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2, _Property_3561b11b899bda8e855826445cf628aa_Out_0, _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2);
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[0];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[1];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[2];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_A_4 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[3];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_R_1 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[0];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_G_2 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[1];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_B_3 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[2];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[3];
            float _Property_159cd47513de4f85a992da1f43f77c51_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0 = float2(_Property_159cd47513de4f85a992da1f43f77c51_Out_0, _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0);
            float _Remap_1214803bb0f7c387adc088fb938f7971_Out_3;
            Unity_Remap_float(_Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4, float2 (0, 1), _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3);
            float4 _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4;
            float3 _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5;
            float2 _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6;
            Unity_Combine_float(_Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1, _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2, _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5, _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.tex, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.samplerstate, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.r;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_G_5 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.g;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_B_6 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.b;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_A_7 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.a;
            float _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1);
            float _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1, _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d5657f470f05ef839e4c257a20ace8cb;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.uv0 = IN.uv0;
            float4 _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2);
            float _Split_83ec66b648ab6c84848b42686c256cd7_R_1 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[0];
            float _Split_83ec66b648ab6c84848b42686c256cd7_G_2 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[1];
            float _Split_83ec66b648ab6c84848b42686c256cd7_B_3 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[2];
            float _Split_83ec66b648ab6c84848b42686c256cd7_A_4 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[3];
            float _Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0 = _HeightMin2;
            float _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0 = _HeightMax2;
            float2 _Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0 = float2(_Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0, _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0);
            float _Property_151ae2702b614585af2000f0a812960f_Out_0 = _HeightOffset2;
            float2 _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2;
            Unity_Add_float2(_Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0, (_Property_151ae2702b614585af2000f0a812960f_Out_0.xx), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2);
            float _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_B_3, float2 (0, 1), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3);
            float _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2;
            Unity_Multiply_float_float(_Branch_af0c5e511241ce8eae748ae487df50fa_Out_3, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2);
            float _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2);
            float _Property_818c8af4b930138e81034c886614171d_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8;
            float4 _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1);
            float _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3;
            Unity_Lerp_float(0, _Split_91a015dea8acd38b904ba0935328a5bc_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3);
            float _Property_956d1a93cb804081b21a76fd0c75a806_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2;
            Unity_Multiply_float_float(_Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3, _Property_956d1a93cb804081b21a76fd0c75a806_Out_0, _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2);
            float _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1;
            Unity_Absolute_float(_Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2, _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1);
            float _Property_96173fa32f95148fa9d2a017748d5235_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_d81ebc6955897c87b8fb462f713aae50_Out_2;
            Unity_Power_float(_Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1, _Property_96173fa32f95148fa9d2a017748d5235_Out_0, _Power_d81ebc6955897c87b8fb462f713aae50_Out_2);
            float _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3;
            Unity_Lerp_float(0, _Split_83ec66b648ab6c84848b42686c256cd7_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3);
            float _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2;
            Unity_Multiply_float_float(_Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3, _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0, _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2);
            float _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1;
            Unity_Absolute_float(_Multiply_b761b264ce901b81b32b974d83993b3d_Out_2, _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1);
            float _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2;
            Unity_Power_float(_Absolute_2511aaf2b812e58b93d44253984de16c_Out_1, _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2);
            float _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3;
            Unity_Lerp_float(_Power_d81ebc6955897c87b8fb462f713aae50_Out_2, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3);
            float4 _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_5933ed525fc7068893db7db94870134a_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0, _Multiply_5933ed525fc7068893db7db94870134a_Out_2);
            UnityTexture2D _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0 = IN.uv0;
            float2 _Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0 = _NoiseSpeed;
            float2 _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2;
            Unity_Multiply_float2_float2(_Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0, (IN.TimeParameters.x.xx), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2);
            float2 _Add_bc688882d8fee68487424542b1a69952_Out_2;
            Unity_Add_float2((_UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0.xy), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2, _Add_bc688882d8fee68487424542b1a69952_Out_2);
            float4 _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_bc688882d8fee68487424542b1a69952_Out_2));
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_R_4 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.r;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_G_5 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.g;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_B_6 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.b;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.a;
            float2 _Multiply_d613a21978306a858470588fdf147e8f_Out_2;
            Unity_Multiply_float2_float2(_Add_bc688882d8fee68487424542b1a69952_Out_2, float2(-1.2, -0.9), _Multiply_d613a21978306a858470588fdf147e8f_Out_2);
            float2 _Add_888a259bce586985b790e81a5145084b_Out_2;
            Unity_Add_float2(_Multiply_d613a21978306a858470588fdf147e8f_Out_2, float2(0.5, 0.5), _Add_888a259bce586985b790e81a5145084b_Out_2);
            float4 _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_888a259bce586985b790e81a5145084b_Out_2));
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_R_4 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.r;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_G_5 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.g;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_B_6 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.b;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.a;
            float _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2;
            Unity_Minimum_float(_SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7, _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7, _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2);
            float _Absolute_20087090b3600b8d97155e3798d64011_Out_1;
            Unity_Absolute_float(_Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2, _Absolute_20087090b3600b8d97155e3798d64011_Out_1);
            float _Property_7a2d696ef1d8028a966365137be9d25e_Out_0 = _EmissionNoisePower;
            float _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2;
            Unity_Power_float(_Absolute_20087090b3600b8d97155e3798d64011_Out_1, _Property_7a2d696ef1d8028a966365137be9d25e_Out_0, _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2);
            float _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2;
            Unity_Multiply_float_float(_Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2, 20, _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2);
            float _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3;
            Unity_Clamp_float(_Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2, 0.05, 1.2, _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3);
            float4 _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2;
            Unity_Multiply_float4_float4(_Multiply_5933ed525fc7068893db7db94870134a_Out_2, (_Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3.xxxx), _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2);
            float4 _Property_c805fa28a9c59b8e93d45497d3768156_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            UnityTexture2D _Property_7c7049e15fdff386b535790d8666f609_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.uv0 = IN.uv0;
            float4 _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_7c7049e15fdff386b535790d8666f609_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2);
            float _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2.xyz), _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0, _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2);
            UnityTexture2D _Property_fa9f7890b20ad481a92543c04b237bde_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.uv0 = IN.uv0;
            float4 _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_fa9f7890b20ad481a92543c04b237bde_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2);
            float _Property_8c31443b776727819a663c7ddce79064_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2.xyz), _Property_8c31443b776727819a663c7ddce79064_Out_0, _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2;
            float4 _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1);
            float3 _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1);
            float _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2;
            Unity_DotProduct_float3((_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz), _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1, _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2);
            float _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1;
            Unity_Saturate_float(_DotProduct_21807a3955457c888958cf9b7de210fc_Out_2, _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1);
            float _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1;
            Unity_OneMinus_float(_Saturate_5e97c86e74edb580abca053af090c6f7_Out_1, _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1);
            float _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1;
            Unity_Absolute_float(_OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1, _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1);
            float _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2;
            Unity_Power_float(_Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1, 10, _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2);
            float4 _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2;
            Unity_Multiply_float4_float4(_Property_c805fa28a9c59b8e93d45497d3768156_Out_0, (_Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2.xxxx), _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2);
            float _Property_23902821969b7a8aabcaa150279da760_Out_0 = _RimLightPower;
            float4 _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2;
            Unity_Multiply_float4_float4(_Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2, (_Property_23902821969b7a8aabcaa150279da760_Out_0.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2);
            float4 _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2);
            float4 _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2;
            Unity_Add_float4(_Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2, _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2);
            float4 _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3;
            Unity_Clamp_float4(_Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, float4(0, 0, 0, 0), _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3);
            float _Split_579bec1940604a80b8bf85fbd157877e_R_1 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[0];
            float _Split_579bec1940604a80b8bf85fbd157877e_G_2 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[1];
            float _Split_579bec1940604a80b8bf85fbd157877e_B_3 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[2];
            float _Split_579bec1940604a80b8bf85fbd157877e_A_4 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[3];
            float _Property_afd0f3561038ef8487e614f350d364dd_Out_0 = _BaseMetallic;
            float _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2;
            Unity_Multiply_float_float(_Split_91a015dea8acd38b904ba0935328a5bc_R_1, _Property_afd0f3561038ef8487e614f350d364dd_Out_0, _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2);
            float _Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0 = _BaseAORemapMin;
            float _Property_9d07c7a09a85da809f1d4661406e0888_Out_0 = _BaseAORemapMax;
            float2 _Vector2_10162c774de2a7838426399cfe98be82_Out_0 = float2(_Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0, _Property_9d07c7a09a85da809f1d4661406e0888_Out_0);
            float _Remap_c45fda31db668c81a9e89e11297ec993_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_G_2, float2 (0, 1), _Vector2_10162c774de2a7838426399cfe98be82_Out_0, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3);
            float3 _Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0 = float3(_Multiply_154e0f89b19c8e86926222afb13691e3_Out_2, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0 = _Base2Metallic;
            float _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2;
            Unity_Multiply_float_float(_Split_83ec66b648ab6c84848b42686c256cd7_R_1, _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0, _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2);
            float _Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0 = _Base2AORemapMin;
            float _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0 = _Base2AORemapMax;
            float2 _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0 = float2(_Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0, _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0);
            float _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_G_2, float2 (0, 1), _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3);
            float3 _Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0 = float3(_Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_a5073733c462898f8bf5761db76cd246;
            float4 _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_a5073733c462898f8bf5761db76cd246, _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1);
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[0];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[1];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_B_3 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[2];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_A_4 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[3];
            surface.BaseColor = (_HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1.xyz);
            surface.Emission = (_Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_579bec1940604a80b8bf85fbd157877e_A_4;
            surface.Occlusion = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2;
            surface.NormalTS = (_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz);
            surface.Metallic = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.WorldSpaceNormal =                           TransformObjectToWorldNormal(input.normalOS);
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(TransformObjectToWorld(input.positionOS).xyz);
            output.uv0 =                                        input.uv0;
            output.VertexColor =                                input.color;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            #ifdef TESSELLATION_ON
        
        float GetTessellationFactor(AttributesMesh input)
        {
            float tessellationFactor = 1.0;
        
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            tessellationFactor = vertexDescription.TessellationFactor;
        
            return tessellationFactor;
        }
        
        float GetMaxDisplacement()
        {
            return _TessellationMaxDisplacement;
        }
        
        // TODO: We should generate this struct like all the other varying struct
        VaryingsMeshToDS InterpolateWithBaryCoordsMeshToDS(VaryingsMeshToDS input0, VaryingsMeshToDS input1, VaryingsMeshToDS input2, float3 baryCoords)
        {
            VaryingsMeshToDS output;
        
            UNITY_TRANSFER_INSTANCE_ID(input0, output);
        
            TESSELLATION_INTERPOLATE_BARY(positionRWS, baryCoords);
            output.positionPredisplacementRWS = output.positionRWS;
            TESSELLATION_INTERPOLATE_BARY(normalWS, baryCoords);
        #ifdef VARYINGS_DS_NEED_TANGENT
            // This will interpolate the sign but should be ok in practice as we may expect a triangle to have same sign (? TO CHECK)
            TESSELLATION_INTERPOLATE_BARY(tangentWS, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD0
            TESSELLATION_INTERPOLATE_BARY(texCoord0, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD1
            TESSELLATION_INTERPOLATE_BARY(texCoord1, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD2
            TESSELLATION_INTERPOLATE_BARY(texCoord2, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD3
            TESSELLATION_INTERPOLATE_BARY(texCoord3, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_COLOR
            TESSELLATION_INTERPOLATE_BARY(color, baryCoords);
        #endif
        
            // Pass-Through for custom interpolator
            
        
            return output;
        }
        
        VertexDescriptionInputs VaryingsMeshToDSToVertexDescriptionInputs(VaryingsMeshToDS input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal = TransformWorldToObjectNormal(input.normalWS);
            output.WorldSpaceNormal = input.normalWS;
            output.ObjectSpaceTangent = TransformWorldToObjectDir(input.tangentWS.xyz);
            output.ObjectSpacePosition = TransformWorldToObject(input.positionRWS);
            output.AbsoluteWorldSpacePosition = GetAbsolutePositionWS(input.positionRWS.xyz);
            output.uv0 = input.texCoord0;
            output.VertexColor = input.color;
        
            return output;
        }
        
        #ifdef HAVE_TESSELLATION_MODIFICATION
        // tessellationFactors
        // x - 1->2 edge
        // y - 2->0 edge
        // z - 0->1 edge
        // w - inside tessellation factor
        VaryingsMeshToDS ApplyTessellationModification(VaryingsMeshToDS input, float3 timeParameters)
        {
            // HACK: As there is no specific tessellation stage for now in shadergraph, we reuse the vertex description mechanism.
            // It mean we store TessellationFactor inside vertex description causing extra read on both vertex and hull stage, but unusued paramater are optimize out by the shader compiler, so no impact.
            VertexDescriptionInputs vertexDescriptionInputs = VaryingsMeshToDSToVertexDescriptionInputs(input);
            // Override time paramters with used one (This is required to correctly handle motion vector for tessellation animation based on time)
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            input.positionRWS += vertexDescription.TessellationDisplacement;
        
            return input;
        }
        
        #endif
        
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
        
        // This will evaluate the custom interpolator and update the varying structure
        void VertMeshTesselationCustomInterpolation(VaryingsMeshToDS input, inout VaryingsMeshToPS output)
        {
            
        }
        
        #endif // USE_CUSTOMINTERP_SUBSTRUCT
        
        #endif // TESSELLATION_ON
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "SceneSelectionPass"
            Tags
            {
                "LightMode" = "SceneSelectionPass"
            }
        
            // Render State
            Cull Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma editor_sync_compilation
        #pragma target 5.0
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma hull Hull
        #pragma domain Domain
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_domain _ _TESSELLATION_PHONG
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SCENESELECTIONPASS 1
        #define TESSELLATION_ON 1
        #define HAVE_TESSELLATION_MODIFICATION 1
        
            #ifdef TESSELLATION_ON
            // World and normal are always available
                #define VARYINGS_DS_NEED_TANGENT
            #define VARYINGS_DS_NEED_TEXCOORD0
                        #define VARYINGS_DS_NEED_COLOR
        	#endif
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _Tesselation_Factor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float2 _NoiseTiling;
        float4 _Noise_TexelSize;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _Tess_Height_1_Min;
        float _Tess_Height_2_Min;
        float _Tess_Height_1_Max;
        float _Tess_Height_2_Max;
        float _Tess_Height_1_Offset;
        float _Tess_Height_2_Offset;
        float _Tess_Height_Blend_Transition;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _TessellationFactorMinDistance;
        float _TessellationFactorMaxDistance;
        float _TessellationFactorTriangleSize;
        float _TessellationShapeFactor;
        float _TessellationBackFaceCullEpsilon;
        float _TessellationMaxDisplacement;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToDS
        {
             float3 positionRWS;
             float3 positionPredisplacementRWS;
             float tessellationFactor;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 WorldSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        struct PackedVaryingsMeshToDS
        {
             float4 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float3 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToDS PackVaryingsMeshToDS (VaryingsMeshToDS input)
        {
            PackedVaryingsMeshToDS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToDS, output);
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.positionPredisplacementRWS;
            output.interp0.w =  input.tessellationFactor;
            output.interp2.xyz =  input.normalWS;
            output.interp3.xyzw =  input.tangentWS;
            output.interp4.xyzw =  input.texCoord0;
            output.interp5.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToDS UnpackVaryingsMeshToDS (PackedVaryingsMeshToDS input)
        {
            VaryingsMeshToDS output;
            output.positionRWS = input.interp0.xyz;
            output.positionPredisplacementRWS = input.interp1.xyz;
            output.tessellationFactor = input.interp0.w;
            output.normalWS = input.interp2.xyz;
            output.tangentWS = input.interp3.xyzw;
            output.texCoord0 = input.interp4.xyzw;
            output.color = input.interp5.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
          float4 _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0 = float4(0.0f, 0.0f, 0.0f, 1.0f);
        #else
          float4 _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0 = SAMPLE_TEXTURE2D_LOD(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3), 0);
        #endif
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_R_5 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.r;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_G_6 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.g;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_B_7 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.b;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_A_8 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.a;
        XZ_2 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A * B;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float TessellationFactor;
            float3 TessellationDisplacement;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            float _Property_4ce4eaefdd25487c81be7b77fded0e8e_Out_0 = _Tesselation_Factor;
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd;
            _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd.uv0 = IN.uv0;
            float4 _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2;
            SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd, _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2);
            float _Split_44fceac2f3ee418191b4553af6521c38_R_1 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[0];
            float _Split_44fceac2f3ee418191b4553af6521c38_G_2 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[1];
            float _Split_44fceac2f3ee418191b4553af6521c38_B_3 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[2];
            float _Split_44fceac2f3ee418191b4553af6521c38_A_4 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[3];
            float _Property_5cf4fd27daa14e02beb11bde8618dc1e_Out_0 = _Tess_Height_1_Min;
            float _Property_a9fd3adbddb24ff0b202f15d317d6251_Out_0 = _Tess_Height_1_Max;
            float2 _Vector2_4b26dbfd9f4e41ae9fc52ffe3b6c2743_Out_0 = float2(_Property_5cf4fd27daa14e02beb11bde8618dc1e_Out_0, _Property_a9fd3adbddb24ff0b202f15d317d6251_Out_0);
            float _Property_454bc81a8b1d4b91a1cdf06a95389fb8_Out_0 = _Tess_Height_1_Offset;
            float2 _Add_2e98ee41829843038c7084b5bc960d61_Out_2;
            Unity_Add_float2(_Vector2_4b26dbfd9f4e41ae9fc52ffe3b6c2743_Out_0, (_Property_454bc81a8b1d4b91a1cdf06a95389fb8_Out_0.xx), _Add_2e98ee41829843038c7084b5bc960d61_Out_2);
            float _Remap_027c62ebc97a45008874341269c98bdf_Out_3;
            Unity_Remap_float(_Split_44fceac2f3ee418191b4553af6521c38_B_3, float2 (0, 1), _Add_2e98ee41829843038c7084b5bc960d61_Out_2, _Remap_027c62ebc97a45008874341269c98bdf_Out_3);
            float _Property_22defdb92c8c4d2d97399b5fa41a900f_Out_0 = _HeightMin;
            float _Property_4de33eacfaf44d23b70a35429cce4ab5_Out_0 = _HeightMax;
            float2 _Vector2_e0dfbebd413e42a096904d5153c239d6_Out_0 = float2(_Property_22defdb92c8c4d2d97399b5fa41a900f_Out_0, _Property_4de33eacfaf44d23b70a35429cce4ab5_Out_0);
            float _Property_5f63683b3cf342e784b5d7ba224281eb_Out_0 = _HeightOffset;
            float2 _Add_1232537e8b9e4b739b5ebf05db959350_Out_2;
            Unity_Add_float2(_Vector2_e0dfbebd413e42a096904d5153c239d6_Out_0, (_Property_5f63683b3cf342e784b5d7ba224281eb_Out_0.xx), _Add_1232537e8b9e4b739b5ebf05db959350_Out_2);
            float _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3;
            Unity_Remap_float(_Split_44fceac2f3ee418191b4553af6521c38_B_3, float2 (0, 1), _Add_1232537e8b9e4b739b5ebf05db959350_Out_2, _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3;
            Unity_Clamp_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, 0, 1, _Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3);
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
              float4 _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0 = float4(0.0f, 0.0f, 0.0f, 1.0f);
            #else
              float4 _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0 = SAMPLE_TEXTURE2D_LOD(_Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.tex, _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.samplerstate, _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.GetTransformedUV(IN.uv0.xy), 0);
            #endif
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.r;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_G_6 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.g;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_B_7 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.b;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_A_8 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.a;
            float _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1;
            Unity_OneMinus_float(_SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5, _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1);
            float _Branch_5983f2479e684f37be29feca5608cf23_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1, _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5, _Branch_5983f2479e684f37be29feca5608cf23_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1;
            _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1.uv0 = IN.uv0;
            float4 _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2;
            SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1, _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2);
            float _Split_b681fe64892d4ccb828e0f6e32843516_R_1 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[0];
            float _Split_b681fe64892d4ccb828e0f6e32843516_G_2 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[1];
            float _Split_b681fe64892d4ccb828e0f6e32843516_B_3 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[2];
            float _Split_b681fe64892d4ccb828e0f6e32843516_A_4 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[3];
            float _Property_dfc13ef2f2dc4782800213462a60264e_Out_0 = _Tess_Height_2_Min;
            float _Property_a7a0d4e5a55541c496131ce65673dc91_Out_0 = _Tess_Height_2_Max;
            float2 _Vector2_680472357da14269b3fcb86a2574fd4e_Out_0 = float2(_Property_dfc13ef2f2dc4782800213462a60264e_Out_0, _Property_a7a0d4e5a55541c496131ce65673dc91_Out_0);
            float _Property_d4c81546338c4021943305435fad6d47_Out_0 = _Tess_Height_2_Offset;
            float2 _Add_685eacdaa4e14198a337eb5f87657041_Out_2;
            Unity_Add_float2(_Vector2_680472357da14269b3fcb86a2574fd4e_Out_0, (_Property_d4c81546338c4021943305435fad6d47_Out_0.xx), _Add_685eacdaa4e14198a337eb5f87657041_Out_2);
            float _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3;
            Unity_Remap_float(_Split_b681fe64892d4ccb828e0f6e32843516_B_3, float2 (0, 1), _Add_685eacdaa4e14198a337eb5f87657041_Out_2, _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3);
            float _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2;
            Unity_Multiply_float_float(_Branch_5983f2479e684f37be29feca5608cf23_Out_3, _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3, _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2);
            float _Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2;
            Unity_Multiply_float_float(_Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3, _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2, _Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2);
            float _Property_64ab9d23c014488e89cccc873cdd95d7_Out_0 = _HeightMin2;
            float _Property_c48827db27c44115952bbfdea9c70def_Out_0 = _HeightMax2;
            float2 _Vector2_ce60d322af6d4a1f9d3d0c93c9a597bb_Out_0 = float2(_Property_64ab9d23c014488e89cccc873cdd95d7_Out_0, _Property_c48827db27c44115952bbfdea9c70def_Out_0);
            float _Property_2d4e482f9b1749e69d85da504f5cbb13_Out_0 = _HeightOffset2;
            float2 _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2;
            Unity_Add_float2(_Vector2_ce60d322af6d4a1f9d3d0c93c9a597bb_Out_0, (_Property_2d4e482f9b1749e69d85da504f5cbb13_Out_0.xx), _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2);
            float _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3;
            Unity_Remap_float(_Split_b681fe64892d4ccb828e0f6e32843516_B_3, float2 (0, 1), _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2, _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3);
            float _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2;
            Unity_Multiply_float_float(_Branch_5983f2479e684f37be29feca5608cf23_Out_3, _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3, _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2);
            float _Multiply_e114c6909b264a3f880f484d068fa807_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2, _Multiply_e114c6909b264a3f880f484d068fa807_Out_2);
            float _Property_2bf75be176a5486b910544b5f36208a2_Out_0 = _Tess_Height_Blend_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_764bb1d66e274c1c986dcc710a41100e;
            float4 _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Remap_027c62ebc97a45008874341269c98bdf_Out_3.xxxx), _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3, (_Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2.xxxx), _Multiply_e114c6909b264a3f880f484d068fa807_Out_2, _Property_2bf75be176a5486b910544b5f36208a2_Out_0, _HeightBlend4_764bb1d66e274c1c986dcc710a41100e, _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1);
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_R_1 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[0];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_G_2 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[1];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_B_3 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[2];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_A_4 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[3];
            float3 _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2;
            Unity_Multiply_float3_float3(IN.WorldSpaceNormal, (_Split_6bbe578103fb4f3b81bea9f6e7100d4e_R_1.xxx), _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2);
            description.Position = IN.ObjectSpacePosition;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            description.TessellationFactor = _Property_4ce4eaefdd25487c81be7b77fded0e8e_Out_0;
            description.TessellationDisplacement = _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_07d75b1d2628da808a2efb93a1d6219e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.uv0 = IN.uv0;
            float4 _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_07d75b1d2628da808a2efb93a1d6219e_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2);
            float4 _Property_b83097c58639858680bf43881a95b0af_Out_0 = _BaseColor;
            float4 _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2, _Property_b83097c58639858680bf43881a95b0af_Out_0, _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2);
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[0];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[1];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[2];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_A_4 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[3];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_R_1 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[0];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_G_2 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[1];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_B_3 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[2];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_A_4 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[3];
            float _Property_04a7bb2753456b8293b3e46e346b646e_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0 = float2(_Property_04a7bb2753456b8293b3e46e346b646e_Out_0, _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0);
            float _Remap_65ca5af95590f88da70777476b6efd40_Out_3;
            Unity_Remap_float(_Split_6a373913f8b5c587b3b25440e2351a6f_A_4, float2 (0, 1), _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float4 _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4;
            float3 _Combine_d07fea824e695b839a48350dc82f464b_RGB_5;
            float2 _Combine_d07fea824e695b839a48350dc82f464b_RG_6;
            Unity_Combine_float(_Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1, _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2, _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3, _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Combine_d07fea824e695b839a48350dc82f464b_RGB_5, _Combine_d07fea824e695b839a48350dc82f464b_RG_6);
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_4245c3b264047180b5c90a697d6cb278;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.uv0 = IN.uv0;
            float4 _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_4245c3b264047180b5c90a697d6cb278, _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2);
            float _Split_91a015dea8acd38b904ba0935328a5bc_R_1 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[0];
            float _Split_91a015dea8acd38b904ba0935328a5bc_G_2 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[1];
            float _Split_91a015dea8acd38b904ba0935328a5bc_B_3 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[2];
            float _Split_91a015dea8acd38b904ba0935328a5bc_A_4 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[3];
            float _Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0 = _HeightMin;
            float _Property_9df7a44c8225168683743ac60c0c3c34_Out_0 = _HeightMax;
            float2 _Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0 = float2(_Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0, _Property_9df7a44c8225168683743ac60c0c3c34_Out_0);
            float _Property_29ca14fd0b712983a38d63d2dd326e96_Out_0 = _HeightOffset;
            float2 _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2;
            Unity_Add_float2(_Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0, (_Property_29ca14fd0b712983a38d63d2dd326e96_Out_0.xx), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2);
            float _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_B_3, float2 (0, 1), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3);
            UnityTexture2D _Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.uv0 = IN.uv0;
            float4 _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2);
            float4 _Property_3561b11b899bda8e855826445cf628aa_Out_0 = _Base2Color;
            float4 _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2, _Property_3561b11b899bda8e855826445cf628aa_Out_0, _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2);
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[0];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[1];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[2];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_A_4 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[3];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_R_1 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[0];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_G_2 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[1];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_B_3 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[2];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[3];
            float _Property_159cd47513de4f85a992da1f43f77c51_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0 = float2(_Property_159cd47513de4f85a992da1f43f77c51_Out_0, _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0);
            float _Remap_1214803bb0f7c387adc088fb938f7971_Out_3;
            Unity_Remap_float(_Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4, float2 (0, 1), _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3);
            float4 _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4;
            float3 _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5;
            float2 _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6;
            Unity_Combine_float(_Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1, _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2, _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5, _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.tex, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.samplerstate, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.r;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_G_5 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.g;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_B_6 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.b;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_A_7 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.a;
            float _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1);
            float _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1, _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d5657f470f05ef839e4c257a20ace8cb;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.uv0 = IN.uv0;
            float4 _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2);
            float _Split_83ec66b648ab6c84848b42686c256cd7_R_1 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[0];
            float _Split_83ec66b648ab6c84848b42686c256cd7_G_2 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[1];
            float _Split_83ec66b648ab6c84848b42686c256cd7_B_3 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[2];
            float _Split_83ec66b648ab6c84848b42686c256cd7_A_4 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[3];
            float _Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0 = _HeightMin2;
            float _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0 = _HeightMax2;
            float2 _Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0 = float2(_Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0, _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0);
            float _Property_151ae2702b614585af2000f0a812960f_Out_0 = _HeightOffset2;
            float2 _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2;
            Unity_Add_float2(_Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0, (_Property_151ae2702b614585af2000f0a812960f_Out_0.xx), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2);
            float _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_B_3, float2 (0, 1), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3);
            float _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2;
            Unity_Multiply_float_float(_Branch_af0c5e511241ce8eae748ae487df50fa_Out_3, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2);
            float _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2);
            float _Property_818c8af4b930138e81034c886614171d_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8;
            float4 _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1);
            float _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3;
            Unity_Lerp_float(0, _Split_91a015dea8acd38b904ba0935328a5bc_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3);
            float _Property_956d1a93cb804081b21a76fd0c75a806_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2;
            Unity_Multiply_float_float(_Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3, _Property_956d1a93cb804081b21a76fd0c75a806_Out_0, _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2);
            float _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1;
            Unity_Absolute_float(_Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2, _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1);
            float _Property_96173fa32f95148fa9d2a017748d5235_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_d81ebc6955897c87b8fb462f713aae50_Out_2;
            Unity_Power_float(_Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1, _Property_96173fa32f95148fa9d2a017748d5235_Out_0, _Power_d81ebc6955897c87b8fb462f713aae50_Out_2);
            float _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3;
            Unity_Lerp_float(0, _Split_83ec66b648ab6c84848b42686c256cd7_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3);
            float _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2;
            Unity_Multiply_float_float(_Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3, _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0, _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2);
            float _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1;
            Unity_Absolute_float(_Multiply_b761b264ce901b81b32b974d83993b3d_Out_2, _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1);
            float _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2;
            Unity_Power_float(_Absolute_2511aaf2b812e58b93d44253984de16c_Out_1, _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2);
            float _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3;
            Unity_Lerp_float(_Power_d81ebc6955897c87b8fb462f713aae50_Out_2, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3);
            float4 _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_5933ed525fc7068893db7db94870134a_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0, _Multiply_5933ed525fc7068893db7db94870134a_Out_2);
            UnityTexture2D _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0 = IN.uv0;
            float2 _Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0 = _NoiseSpeed;
            float2 _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2;
            Unity_Multiply_float2_float2(_Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0, (IN.TimeParameters.x.xx), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2);
            float2 _Add_bc688882d8fee68487424542b1a69952_Out_2;
            Unity_Add_float2((_UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0.xy), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2, _Add_bc688882d8fee68487424542b1a69952_Out_2);
            float4 _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_bc688882d8fee68487424542b1a69952_Out_2));
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_R_4 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.r;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_G_5 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.g;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_B_6 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.b;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.a;
            float2 _Multiply_d613a21978306a858470588fdf147e8f_Out_2;
            Unity_Multiply_float2_float2(_Add_bc688882d8fee68487424542b1a69952_Out_2, float2(-1.2, -0.9), _Multiply_d613a21978306a858470588fdf147e8f_Out_2);
            float2 _Add_888a259bce586985b790e81a5145084b_Out_2;
            Unity_Add_float2(_Multiply_d613a21978306a858470588fdf147e8f_Out_2, float2(0.5, 0.5), _Add_888a259bce586985b790e81a5145084b_Out_2);
            float4 _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_888a259bce586985b790e81a5145084b_Out_2));
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_R_4 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.r;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_G_5 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.g;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_B_6 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.b;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.a;
            float _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2;
            Unity_Minimum_float(_SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7, _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7, _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2);
            float _Absolute_20087090b3600b8d97155e3798d64011_Out_1;
            Unity_Absolute_float(_Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2, _Absolute_20087090b3600b8d97155e3798d64011_Out_1);
            float _Property_7a2d696ef1d8028a966365137be9d25e_Out_0 = _EmissionNoisePower;
            float _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2;
            Unity_Power_float(_Absolute_20087090b3600b8d97155e3798d64011_Out_1, _Property_7a2d696ef1d8028a966365137be9d25e_Out_0, _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2);
            float _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2;
            Unity_Multiply_float_float(_Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2, 20, _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2);
            float _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3;
            Unity_Clamp_float(_Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2, 0.05, 1.2, _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3);
            float4 _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2;
            Unity_Multiply_float4_float4(_Multiply_5933ed525fc7068893db7db94870134a_Out_2, (_Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3.xxxx), _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2);
            float4 _Property_c805fa28a9c59b8e93d45497d3768156_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            UnityTexture2D _Property_7c7049e15fdff386b535790d8666f609_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.uv0 = IN.uv0;
            float4 _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_7c7049e15fdff386b535790d8666f609_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2);
            float _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2.xyz), _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0, _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2);
            UnityTexture2D _Property_fa9f7890b20ad481a92543c04b237bde_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.uv0 = IN.uv0;
            float4 _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_fa9f7890b20ad481a92543c04b237bde_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2);
            float _Property_8c31443b776727819a663c7ddce79064_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2.xyz), _Property_8c31443b776727819a663c7ddce79064_Out_0, _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2;
            float4 _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1);
            float3 _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1);
            float _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2;
            Unity_DotProduct_float3((_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz), _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1, _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2);
            float _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1;
            Unity_Saturate_float(_DotProduct_21807a3955457c888958cf9b7de210fc_Out_2, _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1);
            float _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1;
            Unity_OneMinus_float(_Saturate_5e97c86e74edb580abca053af090c6f7_Out_1, _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1);
            float _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1;
            Unity_Absolute_float(_OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1, _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1);
            float _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2;
            Unity_Power_float(_Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1, 10, _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2);
            float4 _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2;
            Unity_Multiply_float4_float4(_Property_c805fa28a9c59b8e93d45497d3768156_Out_0, (_Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2.xxxx), _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2);
            float _Property_23902821969b7a8aabcaa150279da760_Out_0 = _RimLightPower;
            float4 _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2;
            Unity_Multiply_float4_float4(_Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2, (_Property_23902821969b7a8aabcaa150279da760_Out_0.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2);
            float4 _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2);
            float4 _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2;
            Unity_Add_float4(_Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2, _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2);
            float4 _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3;
            Unity_Clamp_float4(_Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, float4(0, 0, 0, 0), _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3);
            float _Split_579bec1940604a80b8bf85fbd157877e_R_1 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[0];
            float _Split_579bec1940604a80b8bf85fbd157877e_G_2 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[1];
            float _Split_579bec1940604a80b8bf85fbd157877e_B_3 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[2];
            float _Split_579bec1940604a80b8bf85fbd157877e_A_4 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[3];
            float _Property_afd0f3561038ef8487e614f350d364dd_Out_0 = _BaseMetallic;
            float _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2;
            Unity_Multiply_float_float(_Split_91a015dea8acd38b904ba0935328a5bc_R_1, _Property_afd0f3561038ef8487e614f350d364dd_Out_0, _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2);
            float _Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0 = _BaseAORemapMin;
            float _Property_9d07c7a09a85da809f1d4661406e0888_Out_0 = _BaseAORemapMax;
            float2 _Vector2_10162c774de2a7838426399cfe98be82_Out_0 = float2(_Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0, _Property_9d07c7a09a85da809f1d4661406e0888_Out_0);
            float _Remap_c45fda31db668c81a9e89e11297ec993_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_G_2, float2 (0, 1), _Vector2_10162c774de2a7838426399cfe98be82_Out_0, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3);
            float3 _Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0 = float3(_Multiply_154e0f89b19c8e86926222afb13691e3_Out_2, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0 = _Base2Metallic;
            float _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2;
            Unity_Multiply_float_float(_Split_83ec66b648ab6c84848b42686c256cd7_R_1, _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0, _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2);
            float _Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0 = _Base2AORemapMin;
            float _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0 = _Base2AORemapMax;
            float2 _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0 = float2(_Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0, _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0);
            float _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_G_2, float2 (0, 1), _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3);
            float3 _Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0 = float3(_Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_a5073733c462898f8bf5761db76cd246;
            float4 _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_a5073733c462898f8bf5761db76cd246, _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1);
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[0];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[1];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_B_3 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[2];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_A_4 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[3];
            surface.BaseColor = (_HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1.xyz);
            surface.Emission = (_Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_579bec1940604a80b8bf85fbd157877e_A_4;
            surface.Occlusion = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2;
            surface.NormalTS = (_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz);
            surface.Metallic = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.WorldSpaceNormal =                           TransformObjectToWorldNormal(input.normalOS);
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(TransformObjectToWorld(input.positionOS).xyz);
            output.uv0 =                                        input.uv0;
            output.VertexColor =                                input.color;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            #ifdef TESSELLATION_ON
        
        float GetTessellationFactor(AttributesMesh input)
        {
            float tessellationFactor = 1.0;
        
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            tessellationFactor = vertexDescription.TessellationFactor;
        
            return tessellationFactor;
        }
        
        float GetMaxDisplacement()
        {
            return _TessellationMaxDisplacement;
        }
        
        // TODO: We should generate this struct like all the other varying struct
        VaryingsMeshToDS InterpolateWithBaryCoordsMeshToDS(VaryingsMeshToDS input0, VaryingsMeshToDS input1, VaryingsMeshToDS input2, float3 baryCoords)
        {
            VaryingsMeshToDS output;
        
            UNITY_TRANSFER_INSTANCE_ID(input0, output);
        
            TESSELLATION_INTERPOLATE_BARY(positionRWS, baryCoords);
            output.positionPredisplacementRWS = output.positionRWS;
            TESSELLATION_INTERPOLATE_BARY(normalWS, baryCoords);
        #ifdef VARYINGS_DS_NEED_TANGENT
            // This will interpolate the sign but should be ok in practice as we may expect a triangle to have same sign (? TO CHECK)
            TESSELLATION_INTERPOLATE_BARY(tangentWS, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD0
            TESSELLATION_INTERPOLATE_BARY(texCoord0, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD1
            TESSELLATION_INTERPOLATE_BARY(texCoord1, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD2
            TESSELLATION_INTERPOLATE_BARY(texCoord2, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD3
            TESSELLATION_INTERPOLATE_BARY(texCoord3, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_COLOR
            TESSELLATION_INTERPOLATE_BARY(color, baryCoords);
        #endif
        
            // Pass-Through for custom interpolator
            
        
            return output;
        }
        
        VertexDescriptionInputs VaryingsMeshToDSToVertexDescriptionInputs(VaryingsMeshToDS input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal = TransformWorldToObjectNormal(input.normalWS);
            output.WorldSpaceNormal = input.normalWS;
            output.ObjectSpaceTangent = TransformWorldToObjectDir(input.tangentWS.xyz);
            output.ObjectSpacePosition = TransformWorldToObject(input.positionRWS);
            output.AbsoluteWorldSpacePosition = GetAbsolutePositionWS(input.positionRWS.xyz);
            output.uv0 = input.texCoord0;
            output.VertexColor = input.color;
        
            return output;
        }
        
        #ifdef HAVE_TESSELLATION_MODIFICATION
        // tessellationFactors
        // x - 1->2 edge
        // y - 2->0 edge
        // z - 0->1 edge
        // w - inside tessellation factor
        VaryingsMeshToDS ApplyTessellationModification(VaryingsMeshToDS input, float3 timeParameters)
        {
            // HACK: As there is no specific tessellation stage for now in shadergraph, we reuse the vertex description mechanism.
            // It mean we store TessellationFactor inside vertex description causing extra read on both vertex and hull stage, but unusued paramater are optimize out by the shader compiler, so no impact.
            VertexDescriptionInputs vertexDescriptionInputs = VaryingsMeshToDSToVertexDescriptionInputs(input);
            // Override time paramters with used one (This is required to correctly handle motion vector for tessellation animation based on time)
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            input.positionRWS += vertexDescription.TessellationDisplacement;
        
            return input;
        }
        
        #endif
        
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
        
        // This will evaluate the custom interpolator and update the varying structure
        void VertMeshTesselationCustomInterpolation(VaryingsMeshToDS input, inout VaryingsMeshToPS output)
        {
            
        }
        
        #endif // USE_CUSTOMINTERP_SUBSTRUCT
        
        #endif // TESSELLATION_ON
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "MotionVectors"
            Tags
            {
                "LightMode" = "MotionVectors"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskMV]
        Ref [_StencilRefMV]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options renderinglayer
        #pragma target 5.0
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma hull Hull
        #pragma domain Domain
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ WRITE_NORMAL_BUFFER
        #pragma shader_feature_local_domain _ _TESSELLATION_PHONG
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ WRITE_DECAL_BUFFER
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_MOTION_VECTORS
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define TESSELLATION_ON 1
        #define HAVE_TESSELLATION_MODIFICATION 1
        
            #ifdef TESSELLATION_ON
            // World and normal are always available
                #define VARYINGS_DS_NEED_TANGENT
            #define VARYINGS_DS_NEED_TEXCOORD0
            #define VARYINGS_DS_NEED_TEXCOORD1
            #define VARYINGS_DS_NEED_TEXCOORD2
                #define VARYINGS_DS_NEED_COLOR
        	#endif
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _Tesselation_Factor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float2 _NoiseTiling;
        float4 _Noise_TexelSize;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _Tess_Height_1_Min;
        float _Tess_Height_2_Min;
        float _Tess_Height_1_Max;
        float _Tess_Height_2_Max;
        float _Tess_Height_1_Offset;
        float _Tess_Height_2_Offset;
        float _Tess_Height_Blend_Transition;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _TessellationFactorMinDistance;
        float _TessellationFactorMaxDistance;
        float _TessellationFactorTriangleSize;
        float _TessellationShapeFactor;
        float _TessellationBackFaceCullEpsilon;
        float _TessellationMaxDisplacement;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv1 : TEXCOORD1;
             float4 uv2 : TEXCOORD2;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToDS
        {
             float3 positionRWS;
             float3 positionPredisplacementRWS;
             float tessellationFactor;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 WorldSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        struct PackedVaryingsMeshToDS
        {
             float4 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float3 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
             float4 interp6 : INTERP6;
             float4 interp7 : INTERP7;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
             float4 interp6 : INTERP6;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToDS PackVaryingsMeshToDS (VaryingsMeshToDS input)
        {
            PackedVaryingsMeshToDS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToDS, output);
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.positionPredisplacementRWS;
            output.interp0.w =  input.tessellationFactor;
            output.interp2.xyz =  input.normalWS;
            output.interp3.xyzw =  input.tangentWS;
            output.interp4.xyzw =  input.texCoord0;
            output.interp5.xyzw =  input.texCoord1;
            output.interp6.xyzw =  input.texCoord2;
            output.interp7.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToDS UnpackVaryingsMeshToDS (PackedVaryingsMeshToDS input)
        {
            VaryingsMeshToDS output;
            output.positionRWS = input.interp0.xyz;
            output.positionPredisplacementRWS = input.interp1.xyz;
            output.tessellationFactor = input.interp0.w;
            output.normalWS = input.interp2.xyz;
            output.tangentWS = input.interp3.xyzw;
            output.texCoord0 = input.interp4.xyzw;
            output.texCoord1 = input.interp5.xyzw;
            output.texCoord2 = input.interp6.xyzw;
            output.color = input.interp7.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.texCoord1;
            output.interp5.xyzw =  input.texCoord2;
            output.interp6.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.texCoord1 = input.interp4.xyzw;
            output.texCoord2 = input.interp5.xyzw;
            output.color = input.interp6.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
          float4 _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0 = float4(0.0f, 0.0f, 0.0f, 1.0f);
        #else
          float4 _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0 = SAMPLE_TEXTURE2D_LOD(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3), 0);
        #endif
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_R_5 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.r;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_G_6 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.g;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_B_7 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.b;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_A_8 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.a;
        XZ_2 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A * B;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float TessellationFactor;
            float3 TessellationDisplacement;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            float _Property_4ce4eaefdd25487c81be7b77fded0e8e_Out_0 = _Tesselation_Factor;
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd;
            _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd.uv0 = IN.uv0;
            float4 _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2;
            SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd, _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2);
            float _Split_44fceac2f3ee418191b4553af6521c38_R_1 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[0];
            float _Split_44fceac2f3ee418191b4553af6521c38_G_2 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[1];
            float _Split_44fceac2f3ee418191b4553af6521c38_B_3 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[2];
            float _Split_44fceac2f3ee418191b4553af6521c38_A_4 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[3];
            float _Property_5cf4fd27daa14e02beb11bde8618dc1e_Out_0 = _Tess_Height_1_Min;
            float _Property_a9fd3adbddb24ff0b202f15d317d6251_Out_0 = _Tess_Height_1_Max;
            float2 _Vector2_4b26dbfd9f4e41ae9fc52ffe3b6c2743_Out_0 = float2(_Property_5cf4fd27daa14e02beb11bde8618dc1e_Out_0, _Property_a9fd3adbddb24ff0b202f15d317d6251_Out_0);
            float _Property_454bc81a8b1d4b91a1cdf06a95389fb8_Out_0 = _Tess_Height_1_Offset;
            float2 _Add_2e98ee41829843038c7084b5bc960d61_Out_2;
            Unity_Add_float2(_Vector2_4b26dbfd9f4e41ae9fc52ffe3b6c2743_Out_0, (_Property_454bc81a8b1d4b91a1cdf06a95389fb8_Out_0.xx), _Add_2e98ee41829843038c7084b5bc960d61_Out_2);
            float _Remap_027c62ebc97a45008874341269c98bdf_Out_3;
            Unity_Remap_float(_Split_44fceac2f3ee418191b4553af6521c38_B_3, float2 (0, 1), _Add_2e98ee41829843038c7084b5bc960d61_Out_2, _Remap_027c62ebc97a45008874341269c98bdf_Out_3);
            float _Property_22defdb92c8c4d2d97399b5fa41a900f_Out_0 = _HeightMin;
            float _Property_4de33eacfaf44d23b70a35429cce4ab5_Out_0 = _HeightMax;
            float2 _Vector2_e0dfbebd413e42a096904d5153c239d6_Out_0 = float2(_Property_22defdb92c8c4d2d97399b5fa41a900f_Out_0, _Property_4de33eacfaf44d23b70a35429cce4ab5_Out_0);
            float _Property_5f63683b3cf342e784b5d7ba224281eb_Out_0 = _HeightOffset;
            float2 _Add_1232537e8b9e4b739b5ebf05db959350_Out_2;
            Unity_Add_float2(_Vector2_e0dfbebd413e42a096904d5153c239d6_Out_0, (_Property_5f63683b3cf342e784b5d7ba224281eb_Out_0.xx), _Add_1232537e8b9e4b739b5ebf05db959350_Out_2);
            float _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3;
            Unity_Remap_float(_Split_44fceac2f3ee418191b4553af6521c38_B_3, float2 (0, 1), _Add_1232537e8b9e4b739b5ebf05db959350_Out_2, _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3;
            Unity_Clamp_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, 0, 1, _Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3);
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
              float4 _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0 = float4(0.0f, 0.0f, 0.0f, 1.0f);
            #else
              float4 _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0 = SAMPLE_TEXTURE2D_LOD(_Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.tex, _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.samplerstate, _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.GetTransformedUV(IN.uv0.xy), 0);
            #endif
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.r;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_G_6 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.g;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_B_7 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.b;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_A_8 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.a;
            float _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1;
            Unity_OneMinus_float(_SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5, _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1);
            float _Branch_5983f2479e684f37be29feca5608cf23_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1, _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5, _Branch_5983f2479e684f37be29feca5608cf23_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1;
            _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1.uv0 = IN.uv0;
            float4 _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2;
            SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1, _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2);
            float _Split_b681fe64892d4ccb828e0f6e32843516_R_1 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[0];
            float _Split_b681fe64892d4ccb828e0f6e32843516_G_2 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[1];
            float _Split_b681fe64892d4ccb828e0f6e32843516_B_3 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[2];
            float _Split_b681fe64892d4ccb828e0f6e32843516_A_4 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[3];
            float _Property_dfc13ef2f2dc4782800213462a60264e_Out_0 = _Tess_Height_2_Min;
            float _Property_a7a0d4e5a55541c496131ce65673dc91_Out_0 = _Tess_Height_2_Max;
            float2 _Vector2_680472357da14269b3fcb86a2574fd4e_Out_0 = float2(_Property_dfc13ef2f2dc4782800213462a60264e_Out_0, _Property_a7a0d4e5a55541c496131ce65673dc91_Out_0);
            float _Property_d4c81546338c4021943305435fad6d47_Out_0 = _Tess_Height_2_Offset;
            float2 _Add_685eacdaa4e14198a337eb5f87657041_Out_2;
            Unity_Add_float2(_Vector2_680472357da14269b3fcb86a2574fd4e_Out_0, (_Property_d4c81546338c4021943305435fad6d47_Out_0.xx), _Add_685eacdaa4e14198a337eb5f87657041_Out_2);
            float _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3;
            Unity_Remap_float(_Split_b681fe64892d4ccb828e0f6e32843516_B_3, float2 (0, 1), _Add_685eacdaa4e14198a337eb5f87657041_Out_2, _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3);
            float _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2;
            Unity_Multiply_float_float(_Branch_5983f2479e684f37be29feca5608cf23_Out_3, _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3, _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2);
            float _Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2;
            Unity_Multiply_float_float(_Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3, _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2, _Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2);
            float _Property_64ab9d23c014488e89cccc873cdd95d7_Out_0 = _HeightMin2;
            float _Property_c48827db27c44115952bbfdea9c70def_Out_0 = _HeightMax2;
            float2 _Vector2_ce60d322af6d4a1f9d3d0c93c9a597bb_Out_0 = float2(_Property_64ab9d23c014488e89cccc873cdd95d7_Out_0, _Property_c48827db27c44115952bbfdea9c70def_Out_0);
            float _Property_2d4e482f9b1749e69d85da504f5cbb13_Out_0 = _HeightOffset2;
            float2 _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2;
            Unity_Add_float2(_Vector2_ce60d322af6d4a1f9d3d0c93c9a597bb_Out_0, (_Property_2d4e482f9b1749e69d85da504f5cbb13_Out_0.xx), _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2);
            float _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3;
            Unity_Remap_float(_Split_b681fe64892d4ccb828e0f6e32843516_B_3, float2 (0, 1), _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2, _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3);
            float _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2;
            Unity_Multiply_float_float(_Branch_5983f2479e684f37be29feca5608cf23_Out_3, _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3, _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2);
            float _Multiply_e114c6909b264a3f880f484d068fa807_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2, _Multiply_e114c6909b264a3f880f484d068fa807_Out_2);
            float _Property_2bf75be176a5486b910544b5f36208a2_Out_0 = _Tess_Height_Blend_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_764bb1d66e274c1c986dcc710a41100e;
            float4 _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Remap_027c62ebc97a45008874341269c98bdf_Out_3.xxxx), _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3, (_Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2.xxxx), _Multiply_e114c6909b264a3f880f484d068fa807_Out_2, _Property_2bf75be176a5486b910544b5f36208a2_Out_0, _HeightBlend4_764bb1d66e274c1c986dcc710a41100e, _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1);
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_R_1 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[0];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_G_2 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[1];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_B_3 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[2];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_A_4 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[3];
            float3 _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2;
            Unity_Multiply_float3_float3(IN.WorldSpaceNormal, (_Split_6bbe578103fb4f3b81bea9f6e7100d4e_R_1.xxx), _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2);
            description.Position = IN.ObjectSpacePosition;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            description.TessellationFactor = _Property_4ce4eaefdd25487c81be7b77fded0e8e_Out_0;
            description.TessellationDisplacement = _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_07d75b1d2628da808a2efb93a1d6219e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.uv0 = IN.uv0;
            float4 _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_07d75b1d2628da808a2efb93a1d6219e_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2);
            float4 _Property_b83097c58639858680bf43881a95b0af_Out_0 = _BaseColor;
            float4 _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2, _Property_b83097c58639858680bf43881a95b0af_Out_0, _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2);
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[0];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[1];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[2];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_A_4 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[3];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_R_1 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[0];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_G_2 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[1];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_B_3 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[2];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_A_4 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[3];
            float _Property_04a7bb2753456b8293b3e46e346b646e_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0 = float2(_Property_04a7bb2753456b8293b3e46e346b646e_Out_0, _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0);
            float _Remap_65ca5af95590f88da70777476b6efd40_Out_3;
            Unity_Remap_float(_Split_6a373913f8b5c587b3b25440e2351a6f_A_4, float2 (0, 1), _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float4 _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4;
            float3 _Combine_d07fea824e695b839a48350dc82f464b_RGB_5;
            float2 _Combine_d07fea824e695b839a48350dc82f464b_RG_6;
            Unity_Combine_float(_Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1, _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2, _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3, _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Combine_d07fea824e695b839a48350dc82f464b_RGB_5, _Combine_d07fea824e695b839a48350dc82f464b_RG_6);
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_4245c3b264047180b5c90a697d6cb278;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.uv0 = IN.uv0;
            float4 _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_4245c3b264047180b5c90a697d6cb278, _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2);
            float _Split_91a015dea8acd38b904ba0935328a5bc_R_1 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[0];
            float _Split_91a015dea8acd38b904ba0935328a5bc_G_2 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[1];
            float _Split_91a015dea8acd38b904ba0935328a5bc_B_3 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[2];
            float _Split_91a015dea8acd38b904ba0935328a5bc_A_4 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[3];
            float _Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0 = _HeightMin;
            float _Property_9df7a44c8225168683743ac60c0c3c34_Out_0 = _HeightMax;
            float2 _Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0 = float2(_Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0, _Property_9df7a44c8225168683743ac60c0c3c34_Out_0);
            float _Property_29ca14fd0b712983a38d63d2dd326e96_Out_0 = _HeightOffset;
            float2 _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2;
            Unity_Add_float2(_Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0, (_Property_29ca14fd0b712983a38d63d2dd326e96_Out_0.xx), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2);
            float _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_B_3, float2 (0, 1), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3);
            UnityTexture2D _Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.uv0 = IN.uv0;
            float4 _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2);
            float4 _Property_3561b11b899bda8e855826445cf628aa_Out_0 = _Base2Color;
            float4 _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2, _Property_3561b11b899bda8e855826445cf628aa_Out_0, _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2);
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[0];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[1];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[2];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_A_4 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[3];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_R_1 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[0];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_G_2 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[1];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_B_3 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[2];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[3];
            float _Property_159cd47513de4f85a992da1f43f77c51_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0 = float2(_Property_159cd47513de4f85a992da1f43f77c51_Out_0, _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0);
            float _Remap_1214803bb0f7c387adc088fb938f7971_Out_3;
            Unity_Remap_float(_Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4, float2 (0, 1), _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3);
            float4 _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4;
            float3 _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5;
            float2 _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6;
            Unity_Combine_float(_Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1, _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2, _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5, _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.tex, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.samplerstate, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.r;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_G_5 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.g;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_B_6 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.b;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_A_7 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.a;
            float _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1);
            float _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1, _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d5657f470f05ef839e4c257a20ace8cb;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.uv0 = IN.uv0;
            float4 _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2);
            float _Split_83ec66b648ab6c84848b42686c256cd7_R_1 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[0];
            float _Split_83ec66b648ab6c84848b42686c256cd7_G_2 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[1];
            float _Split_83ec66b648ab6c84848b42686c256cd7_B_3 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[2];
            float _Split_83ec66b648ab6c84848b42686c256cd7_A_4 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[3];
            float _Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0 = _HeightMin2;
            float _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0 = _HeightMax2;
            float2 _Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0 = float2(_Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0, _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0);
            float _Property_151ae2702b614585af2000f0a812960f_Out_0 = _HeightOffset2;
            float2 _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2;
            Unity_Add_float2(_Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0, (_Property_151ae2702b614585af2000f0a812960f_Out_0.xx), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2);
            float _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_B_3, float2 (0, 1), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3);
            float _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2;
            Unity_Multiply_float_float(_Branch_af0c5e511241ce8eae748ae487df50fa_Out_3, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2);
            float _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2);
            float _Property_818c8af4b930138e81034c886614171d_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8;
            float4 _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1);
            float _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3;
            Unity_Lerp_float(0, _Split_91a015dea8acd38b904ba0935328a5bc_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3);
            float _Property_956d1a93cb804081b21a76fd0c75a806_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2;
            Unity_Multiply_float_float(_Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3, _Property_956d1a93cb804081b21a76fd0c75a806_Out_0, _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2);
            float _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1;
            Unity_Absolute_float(_Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2, _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1);
            float _Property_96173fa32f95148fa9d2a017748d5235_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_d81ebc6955897c87b8fb462f713aae50_Out_2;
            Unity_Power_float(_Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1, _Property_96173fa32f95148fa9d2a017748d5235_Out_0, _Power_d81ebc6955897c87b8fb462f713aae50_Out_2);
            float _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3;
            Unity_Lerp_float(0, _Split_83ec66b648ab6c84848b42686c256cd7_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3);
            float _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2;
            Unity_Multiply_float_float(_Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3, _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0, _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2);
            float _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1;
            Unity_Absolute_float(_Multiply_b761b264ce901b81b32b974d83993b3d_Out_2, _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1);
            float _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2;
            Unity_Power_float(_Absolute_2511aaf2b812e58b93d44253984de16c_Out_1, _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2);
            float _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3;
            Unity_Lerp_float(_Power_d81ebc6955897c87b8fb462f713aae50_Out_2, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3);
            float4 _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_5933ed525fc7068893db7db94870134a_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0, _Multiply_5933ed525fc7068893db7db94870134a_Out_2);
            UnityTexture2D _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0 = IN.uv0;
            float2 _Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0 = _NoiseSpeed;
            float2 _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2;
            Unity_Multiply_float2_float2(_Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0, (IN.TimeParameters.x.xx), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2);
            float2 _Add_bc688882d8fee68487424542b1a69952_Out_2;
            Unity_Add_float2((_UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0.xy), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2, _Add_bc688882d8fee68487424542b1a69952_Out_2);
            float4 _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_bc688882d8fee68487424542b1a69952_Out_2));
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_R_4 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.r;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_G_5 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.g;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_B_6 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.b;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.a;
            float2 _Multiply_d613a21978306a858470588fdf147e8f_Out_2;
            Unity_Multiply_float2_float2(_Add_bc688882d8fee68487424542b1a69952_Out_2, float2(-1.2, -0.9), _Multiply_d613a21978306a858470588fdf147e8f_Out_2);
            float2 _Add_888a259bce586985b790e81a5145084b_Out_2;
            Unity_Add_float2(_Multiply_d613a21978306a858470588fdf147e8f_Out_2, float2(0.5, 0.5), _Add_888a259bce586985b790e81a5145084b_Out_2);
            float4 _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_888a259bce586985b790e81a5145084b_Out_2));
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_R_4 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.r;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_G_5 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.g;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_B_6 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.b;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.a;
            float _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2;
            Unity_Minimum_float(_SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7, _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7, _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2);
            float _Absolute_20087090b3600b8d97155e3798d64011_Out_1;
            Unity_Absolute_float(_Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2, _Absolute_20087090b3600b8d97155e3798d64011_Out_1);
            float _Property_7a2d696ef1d8028a966365137be9d25e_Out_0 = _EmissionNoisePower;
            float _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2;
            Unity_Power_float(_Absolute_20087090b3600b8d97155e3798d64011_Out_1, _Property_7a2d696ef1d8028a966365137be9d25e_Out_0, _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2);
            float _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2;
            Unity_Multiply_float_float(_Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2, 20, _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2);
            float _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3;
            Unity_Clamp_float(_Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2, 0.05, 1.2, _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3);
            float4 _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2;
            Unity_Multiply_float4_float4(_Multiply_5933ed525fc7068893db7db94870134a_Out_2, (_Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3.xxxx), _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2);
            float4 _Property_c805fa28a9c59b8e93d45497d3768156_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            UnityTexture2D _Property_7c7049e15fdff386b535790d8666f609_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.uv0 = IN.uv0;
            float4 _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_7c7049e15fdff386b535790d8666f609_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2);
            float _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2.xyz), _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0, _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2);
            UnityTexture2D _Property_fa9f7890b20ad481a92543c04b237bde_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.uv0 = IN.uv0;
            float4 _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_fa9f7890b20ad481a92543c04b237bde_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2);
            float _Property_8c31443b776727819a663c7ddce79064_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2.xyz), _Property_8c31443b776727819a663c7ddce79064_Out_0, _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2;
            float4 _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1);
            float3 _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1);
            float _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2;
            Unity_DotProduct_float3((_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz), _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1, _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2);
            float _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1;
            Unity_Saturate_float(_DotProduct_21807a3955457c888958cf9b7de210fc_Out_2, _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1);
            float _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1;
            Unity_OneMinus_float(_Saturate_5e97c86e74edb580abca053af090c6f7_Out_1, _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1);
            float _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1;
            Unity_Absolute_float(_OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1, _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1);
            float _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2;
            Unity_Power_float(_Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1, 10, _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2);
            float4 _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2;
            Unity_Multiply_float4_float4(_Property_c805fa28a9c59b8e93d45497d3768156_Out_0, (_Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2.xxxx), _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2);
            float _Property_23902821969b7a8aabcaa150279da760_Out_0 = _RimLightPower;
            float4 _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2;
            Unity_Multiply_float4_float4(_Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2, (_Property_23902821969b7a8aabcaa150279da760_Out_0.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2);
            float4 _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2);
            float4 _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2;
            Unity_Add_float4(_Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2, _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2);
            float4 _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3;
            Unity_Clamp_float4(_Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, float4(0, 0, 0, 0), _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3);
            float _Split_579bec1940604a80b8bf85fbd157877e_R_1 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[0];
            float _Split_579bec1940604a80b8bf85fbd157877e_G_2 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[1];
            float _Split_579bec1940604a80b8bf85fbd157877e_B_3 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[2];
            float _Split_579bec1940604a80b8bf85fbd157877e_A_4 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[3];
            float _Property_afd0f3561038ef8487e614f350d364dd_Out_0 = _BaseMetallic;
            float _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2;
            Unity_Multiply_float_float(_Split_91a015dea8acd38b904ba0935328a5bc_R_1, _Property_afd0f3561038ef8487e614f350d364dd_Out_0, _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2);
            float _Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0 = _BaseAORemapMin;
            float _Property_9d07c7a09a85da809f1d4661406e0888_Out_0 = _BaseAORemapMax;
            float2 _Vector2_10162c774de2a7838426399cfe98be82_Out_0 = float2(_Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0, _Property_9d07c7a09a85da809f1d4661406e0888_Out_0);
            float _Remap_c45fda31db668c81a9e89e11297ec993_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_G_2, float2 (0, 1), _Vector2_10162c774de2a7838426399cfe98be82_Out_0, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3);
            float3 _Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0 = float3(_Multiply_154e0f89b19c8e86926222afb13691e3_Out_2, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0 = _Base2Metallic;
            float _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2;
            Unity_Multiply_float_float(_Split_83ec66b648ab6c84848b42686c256cd7_R_1, _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0, _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2);
            float _Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0 = _Base2AORemapMin;
            float _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0 = _Base2AORemapMax;
            float2 _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0 = float2(_Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0, _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0);
            float _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_G_2, float2 (0, 1), _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3);
            float3 _Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0 = float3(_Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_a5073733c462898f8bf5761db76cd246;
            float4 _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_a5073733c462898f8bf5761db76cd246, _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1);
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[0];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[1];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_B_3 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[2];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_A_4 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[3];
            surface.BaseColor = (_HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1.xyz);
            surface.Emission = (_Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_579bec1940604a80b8bf85fbd157877e_A_4;
            surface.Occlusion = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2;
            surface.NormalTS = (_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz);
            surface.Metallic = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.WorldSpaceNormal =                           TransformObjectToWorldNormal(input.normalOS);
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(TransformObjectToWorld(input.positionOS).xyz);
            output.uv0 =                                        input.uv0;
            output.VertexColor =                                input.color;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord1 =                  input.texCoord1;
            output.texCoord2 =                  input.texCoord2;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            #ifdef TESSELLATION_ON
        
        float GetTessellationFactor(AttributesMesh input)
        {
            float tessellationFactor = 1.0;
        
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            tessellationFactor = vertexDescription.TessellationFactor;
        
            return tessellationFactor;
        }
        
        float GetMaxDisplacement()
        {
            return _TessellationMaxDisplacement;
        }
        
        // TODO: We should generate this struct like all the other varying struct
        VaryingsMeshToDS InterpolateWithBaryCoordsMeshToDS(VaryingsMeshToDS input0, VaryingsMeshToDS input1, VaryingsMeshToDS input2, float3 baryCoords)
        {
            VaryingsMeshToDS output;
        
            UNITY_TRANSFER_INSTANCE_ID(input0, output);
        
            TESSELLATION_INTERPOLATE_BARY(positionRWS, baryCoords);
            output.positionPredisplacementRWS = output.positionRWS;
            TESSELLATION_INTERPOLATE_BARY(normalWS, baryCoords);
        #ifdef VARYINGS_DS_NEED_TANGENT
            // This will interpolate the sign but should be ok in practice as we may expect a triangle to have same sign (? TO CHECK)
            TESSELLATION_INTERPOLATE_BARY(tangentWS, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD0
            TESSELLATION_INTERPOLATE_BARY(texCoord0, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD1
            TESSELLATION_INTERPOLATE_BARY(texCoord1, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD2
            TESSELLATION_INTERPOLATE_BARY(texCoord2, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD3
            TESSELLATION_INTERPOLATE_BARY(texCoord3, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_COLOR
            TESSELLATION_INTERPOLATE_BARY(color, baryCoords);
        #endif
        
            // Pass-Through for custom interpolator
            
        
            return output;
        }
        
        VertexDescriptionInputs VaryingsMeshToDSToVertexDescriptionInputs(VaryingsMeshToDS input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal = TransformWorldToObjectNormal(input.normalWS);
            output.WorldSpaceNormal = input.normalWS;
            output.ObjectSpaceTangent = TransformWorldToObjectDir(input.tangentWS.xyz);
            output.ObjectSpacePosition = TransformWorldToObject(input.positionRWS);
            output.AbsoluteWorldSpacePosition = GetAbsolutePositionWS(input.positionRWS.xyz);
            output.uv0 = input.texCoord0;
            output.VertexColor = input.color;
        
            return output;
        }
        
        #ifdef HAVE_TESSELLATION_MODIFICATION
        // tessellationFactors
        // x - 1->2 edge
        // y - 2->0 edge
        // z - 0->1 edge
        // w - inside tessellation factor
        VaryingsMeshToDS ApplyTessellationModification(VaryingsMeshToDS input, float3 timeParameters)
        {
            // HACK: As there is no specific tessellation stage for now in shadergraph, we reuse the vertex description mechanism.
            // It mean we store TessellationFactor inside vertex description causing extra read on both vertex and hull stage, but unusued paramater are optimize out by the shader compiler, so no impact.
            VertexDescriptionInputs vertexDescriptionInputs = VaryingsMeshToDSToVertexDescriptionInputs(input);
            // Override time paramters with used one (This is required to correctly handle motion vector for tessellation animation based on time)
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            input.positionRWS += vertexDescription.TessellationDisplacement;
        
            return input;
        }
        
        #endif
        
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
        
        // This will evaluate the custom interpolator and update the varying structure
        void VertMeshTesselationCustomInterpolation(VaryingsMeshToDS input, inout VaryingsMeshToPS output)
        {
            
        }
        
        #endif // USE_CUSTOMINTERP_SUBSTRUCT
        
        #endif // TESSELLATION_ON
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassMotionVectors.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "TransparentDepthPrepass"
            Tags
            {
                "LightMode" = "TransparentDepthPrepass"
            }
        
            // Render State
            Cull [_CullMode]
        Blend One Zero
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskDepth]
        Ref [_StencilRefDepth]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma target 5.0
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma hull Hull
        #pragma domain Domain
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_domain _ _TESSELLATION_PHONG
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_TRANSPARENT_DEPTH_PREPASS
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define TESSELLATION_ON 1
        #define HAVE_TESSELLATION_MODIFICATION 1
        
            #ifdef TESSELLATION_ON
            // World and normal are always available
                #define VARYINGS_DS_NEED_TANGENT
            #define VARYINGS_DS_NEED_TEXCOORD0
                        #define VARYINGS_DS_NEED_COLOR
        	#endif
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _Tesselation_Factor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float2 _NoiseTiling;
        float4 _Noise_TexelSize;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _Tess_Height_1_Min;
        float _Tess_Height_2_Min;
        float _Tess_Height_1_Max;
        float _Tess_Height_2_Max;
        float _Tess_Height_1_Offset;
        float _Tess_Height_2_Offset;
        float _Tess_Height_Blend_Transition;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _TessellationFactorMinDistance;
        float _TessellationFactorMaxDistance;
        float _TessellationFactorTriangleSize;
        float _TessellationShapeFactor;
        float _TessellationBackFaceCullEpsilon;
        float _TessellationMaxDisplacement;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToDS
        {
             float3 positionRWS;
             float3 positionPredisplacementRWS;
             float tessellationFactor;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 WorldSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToDS
        {
             float4 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float3 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToDS PackVaryingsMeshToDS (VaryingsMeshToDS input)
        {
            PackedVaryingsMeshToDS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToDS, output);
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.positionPredisplacementRWS;
            output.interp0.w =  input.tessellationFactor;
            output.interp2.xyz =  input.normalWS;
            output.interp3.xyzw =  input.tangentWS;
            output.interp4.xyzw =  input.texCoord0;
            output.interp5.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToDS UnpackVaryingsMeshToDS (PackedVaryingsMeshToDS input)
        {
            VaryingsMeshToDS output;
            output.positionRWS = input.interp0.xyz;
            output.positionPredisplacementRWS = input.interp1.xyz;
            output.tessellationFactor = input.interp0.w;
            output.normalWS = input.interp2.xyz;
            output.tangentWS = input.interp3.xyzw;
            output.texCoord0 = input.interp4.xyzw;
            output.color = input.interp5.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
          float4 _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0 = float4(0.0f, 0.0f, 0.0f, 1.0f);
        #else
          float4 _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0 = SAMPLE_TEXTURE2D_LOD(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3), 0);
        #endif
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_R_5 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.r;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_G_6 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.g;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_B_7 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.b;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_A_8 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.a;
        XZ_2 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A * B;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float TessellationFactor;
            float3 TessellationDisplacement;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            float _Property_4ce4eaefdd25487c81be7b77fded0e8e_Out_0 = _Tesselation_Factor;
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd;
            _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd.uv0 = IN.uv0;
            float4 _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2;
            SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd, _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2);
            float _Split_44fceac2f3ee418191b4553af6521c38_R_1 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[0];
            float _Split_44fceac2f3ee418191b4553af6521c38_G_2 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[1];
            float _Split_44fceac2f3ee418191b4553af6521c38_B_3 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[2];
            float _Split_44fceac2f3ee418191b4553af6521c38_A_4 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[3];
            float _Property_5cf4fd27daa14e02beb11bde8618dc1e_Out_0 = _Tess_Height_1_Min;
            float _Property_a9fd3adbddb24ff0b202f15d317d6251_Out_0 = _Tess_Height_1_Max;
            float2 _Vector2_4b26dbfd9f4e41ae9fc52ffe3b6c2743_Out_0 = float2(_Property_5cf4fd27daa14e02beb11bde8618dc1e_Out_0, _Property_a9fd3adbddb24ff0b202f15d317d6251_Out_0);
            float _Property_454bc81a8b1d4b91a1cdf06a95389fb8_Out_0 = _Tess_Height_1_Offset;
            float2 _Add_2e98ee41829843038c7084b5bc960d61_Out_2;
            Unity_Add_float2(_Vector2_4b26dbfd9f4e41ae9fc52ffe3b6c2743_Out_0, (_Property_454bc81a8b1d4b91a1cdf06a95389fb8_Out_0.xx), _Add_2e98ee41829843038c7084b5bc960d61_Out_2);
            float _Remap_027c62ebc97a45008874341269c98bdf_Out_3;
            Unity_Remap_float(_Split_44fceac2f3ee418191b4553af6521c38_B_3, float2 (0, 1), _Add_2e98ee41829843038c7084b5bc960d61_Out_2, _Remap_027c62ebc97a45008874341269c98bdf_Out_3);
            float _Property_22defdb92c8c4d2d97399b5fa41a900f_Out_0 = _HeightMin;
            float _Property_4de33eacfaf44d23b70a35429cce4ab5_Out_0 = _HeightMax;
            float2 _Vector2_e0dfbebd413e42a096904d5153c239d6_Out_0 = float2(_Property_22defdb92c8c4d2d97399b5fa41a900f_Out_0, _Property_4de33eacfaf44d23b70a35429cce4ab5_Out_0);
            float _Property_5f63683b3cf342e784b5d7ba224281eb_Out_0 = _HeightOffset;
            float2 _Add_1232537e8b9e4b739b5ebf05db959350_Out_2;
            Unity_Add_float2(_Vector2_e0dfbebd413e42a096904d5153c239d6_Out_0, (_Property_5f63683b3cf342e784b5d7ba224281eb_Out_0.xx), _Add_1232537e8b9e4b739b5ebf05db959350_Out_2);
            float _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3;
            Unity_Remap_float(_Split_44fceac2f3ee418191b4553af6521c38_B_3, float2 (0, 1), _Add_1232537e8b9e4b739b5ebf05db959350_Out_2, _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3;
            Unity_Clamp_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, 0, 1, _Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3);
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
              float4 _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0 = float4(0.0f, 0.0f, 0.0f, 1.0f);
            #else
              float4 _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0 = SAMPLE_TEXTURE2D_LOD(_Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.tex, _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.samplerstate, _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.GetTransformedUV(IN.uv0.xy), 0);
            #endif
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.r;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_G_6 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.g;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_B_7 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.b;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_A_8 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.a;
            float _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1;
            Unity_OneMinus_float(_SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5, _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1);
            float _Branch_5983f2479e684f37be29feca5608cf23_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1, _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5, _Branch_5983f2479e684f37be29feca5608cf23_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1;
            _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1.uv0 = IN.uv0;
            float4 _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2;
            SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1, _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2);
            float _Split_b681fe64892d4ccb828e0f6e32843516_R_1 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[0];
            float _Split_b681fe64892d4ccb828e0f6e32843516_G_2 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[1];
            float _Split_b681fe64892d4ccb828e0f6e32843516_B_3 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[2];
            float _Split_b681fe64892d4ccb828e0f6e32843516_A_4 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[3];
            float _Property_dfc13ef2f2dc4782800213462a60264e_Out_0 = _Tess_Height_2_Min;
            float _Property_a7a0d4e5a55541c496131ce65673dc91_Out_0 = _Tess_Height_2_Max;
            float2 _Vector2_680472357da14269b3fcb86a2574fd4e_Out_0 = float2(_Property_dfc13ef2f2dc4782800213462a60264e_Out_0, _Property_a7a0d4e5a55541c496131ce65673dc91_Out_0);
            float _Property_d4c81546338c4021943305435fad6d47_Out_0 = _Tess_Height_2_Offset;
            float2 _Add_685eacdaa4e14198a337eb5f87657041_Out_2;
            Unity_Add_float2(_Vector2_680472357da14269b3fcb86a2574fd4e_Out_0, (_Property_d4c81546338c4021943305435fad6d47_Out_0.xx), _Add_685eacdaa4e14198a337eb5f87657041_Out_2);
            float _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3;
            Unity_Remap_float(_Split_b681fe64892d4ccb828e0f6e32843516_B_3, float2 (0, 1), _Add_685eacdaa4e14198a337eb5f87657041_Out_2, _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3);
            float _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2;
            Unity_Multiply_float_float(_Branch_5983f2479e684f37be29feca5608cf23_Out_3, _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3, _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2);
            float _Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2;
            Unity_Multiply_float_float(_Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3, _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2, _Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2);
            float _Property_64ab9d23c014488e89cccc873cdd95d7_Out_0 = _HeightMin2;
            float _Property_c48827db27c44115952bbfdea9c70def_Out_0 = _HeightMax2;
            float2 _Vector2_ce60d322af6d4a1f9d3d0c93c9a597bb_Out_0 = float2(_Property_64ab9d23c014488e89cccc873cdd95d7_Out_0, _Property_c48827db27c44115952bbfdea9c70def_Out_0);
            float _Property_2d4e482f9b1749e69d85da504f5cbb13_Out_0 = _HeightOffset2;
            float2 _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2;
            Unity_Add_float2(_Vector2_ce60d322af6d4a1f9d3d0c93c9a597bb_Out_0, (_Property_2d4e482f9b1749e69d85da504f5cbb13_Out_0.xx), _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2);
            float _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3;
            Unity_Remap_float(_Split_b681fe64892d4ccb828e0f6e32843516_B_3, float2 (0, 1), _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2, _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3);
            float _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2;
            Unity_Multiply_float_float(_Branch_5983f2479e684f37be29feca5608cf23_Out_3, _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3, _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2);
            float _Multiply_e114c6909b264a3f880f484d068fa807_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2, _Multiply_e114c6909b264a3f880f484d068fa807_Out_2);
            float _Property_2bf75be176a5486b910544b5f36208a2_Out_0 = _Tess_Height_Blend_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_764bb1d66e274c1c986dcc710a41100e;
            float4 _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Remap_027c62ebc97a45008874341269c98bdf_Out_3.xxxx), _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3, (_Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2.xxxx), _Multiply_e114c6909b264a3f880f484d068fa807_Out_2, _Property_2bf75be176a5486b910544b5f36208a2_Out_0, _HeightBlend4_764bb1d66e274c1c986dcc710a41100e, _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1);
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_R_1 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[0];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_G_2 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[1];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_B_3 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[2];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_A_4 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[3];
            float3 _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2;
            Unity_Multiply_float3_float3(IN.WorldSpaceNormal, (_Split_6bbe578103fb4f3b81bea9f6e7100d4e_R_1.xxx), _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2);
            description.Position = IN.ObjectSpacePosition;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            description.TessellationFactor = _Property_4ce4eaefdd25487c81be7b77fded0e8e_Out_0;
            description.TessellationDisplacement = _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float Alpha;
            float3 NormalTS;
            float Smoothness;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_7c7049e15fdff386b535790d8666f609_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.uv0 = IN.uv0;
            float4 _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_7c7049e15fdff386b535790d8666f609_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2);
            float _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2.xyz), _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0, _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2);
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_4245c3b264047180b5c90a697d6cb278;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.uv0 = IN.uv0;
            float4 _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_4245c3b264047180b5c90a697d6cb278, _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2);
            float _Split_91a015dea8acd38b904ba0935328a5bc_R_1 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[0];
            float _Split_91a015dea8acd38b904ba0935328a5bc_G_2 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[1];
            float _Split_91a015dea8acd38b904ba0935328a5bc_B_3 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[2];
            float _Split_91a015dea8acd38b904ba0935328a5bc_A_4 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[3];
            float _Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0 = _HeightMin;
            float _Property_9df7a44c8225168683743ac60c0c3c34_Out_0 = _HeightMax;
            float2 _Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0 = float2(_Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0, _Property_9df7a44c8225168683743ac60c0c3c34_Out_0);
            float _Property_29ca14fd0b712983a38d63d2dd326e96_Out_0 = _HeightOffset;
            float2 _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2;
            Unity_Add_float2(_Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0, (_Property_29ca14fd0b712983a38d63d2dd326e96_Out_0.xx), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2);
            float _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_B_3, float2 (0, 1), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3);
            UnityTexture2D _Property_fa9f7890b20ad481a92543c04b237bde_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.uv0 = IN.uv0;
            float4 _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_fa9f7890b20ad481a92543c04b237bde_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2);
            float _Property_8c31443b776727819a663c7ddce79064_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2.xyz), _Property_8c31443b776727819a663c7ddce79064_Out_0, _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.tex, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.samplerstate, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.r;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_G_5 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.g;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_B_6 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.b;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_A_7 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.a;
            float _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1);
            float _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1, _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d5657f470f05ef839e4c257a20ace8cb;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.uv0 = IN.uv0;
            float4 _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2);
            float _Split_83ec66b648ab6c84848b42686c256cd7_R_1 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[0];
            float _Split_83ec66b648ab6c84848b42686c256cd7_G_2 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[1];
            float _Split_83ec66b648ab6c84848b42686c256cd7_B_3 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[2];
            float _Split_83ec66b648ab6c84848b42686c256cd7_A_4 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[3];
            float _Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0 = _HeightMin2;
            float _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0 = _HeightMax2;
            float2 _Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0 = float2(_Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0, _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0);
            float _Property_151ae2702b614585af2000f0a812960f_Out_0 = _HeightOffset2;
            float2 _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2;
            Unity_Add_float2(_Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0, (_Property_151ae2702b614585af2000f0a812960f_Out_0.xx), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2);
            float _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_B_3, float2 (0, 1), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3);
            float _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2;
            Unity_Multiply_float_float(_Branch_af0c5e511241ce8eae748ae487df50fa_Out_3, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2);
            float _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2);
            float _Property_818c8af4b930138e81034c886614171d_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2;
            float4 _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1);
            UnityTexture2D _Property_07d75b1d2628da808a2efb93a1d6219e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.uv0 = IN.uv0;
            float4 _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_07d75b1d2628da808a2efb93a1d6219e_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2);
            float4 _Property_b83097c58639858680bf43881a95b0af_Out_0 = _BaseColor;
            float4 _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2, _Property_b83097c58639858680bf43881a95b0af_Out_0, _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2);
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[0];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[1];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[2];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_A_4 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[3];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_R_1 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[0];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_G_2 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[1];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_B_3 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[2];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_A_4 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[3];
            float _Property_04a7bb2753456b8293b3e46e346b646e_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0 = float2(_Property_04a7bb2753456b8293b3e46e346b646e_Out_0, _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0);
            float _Remap_65ca5af95590f88da70777476b6efd40_Out_3;
            Unity_Remap_float(_Split_6a373913f8b5c587b3b25440e2351a6f_A_4, float2 (0, 1), _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float4 _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4;
            float3 _Combine_d07fea824e695b839a48350dc82f464b_RGB_5;
            float2 _Combine_d07fea824e695b839a48350dc82f464b_RG_6;
            Unity_Combine_float(_Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1, _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2, _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3, _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Combine_d07fea824e695b839a48350dc82f464b_RGB_5, _Combine_d07fea824e695b839a48350dc82f464b_RG_6);
            UnityTexture2D _Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.uv0 = IN.uv0;
            float4 _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2);
            float4 _Property_3561b11b899bda8e855826445cf628aa_Out_0 = _Base2Color;
            float4 _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2, _Property_3561b11b899bda8e855826445cf628aa_Out_0, _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2);
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[0];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[1];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[2];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_A_4 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[3];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_R_1 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[0];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_G_2 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[1];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_B_3 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[2];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[3];
            float _Property_159cd47513de4f85a992da1f43f77c51_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0 = float2(_Property_159cd47513de4f85a992da1f43f77c51_Out_0, _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0);
            float _Remap_1214803bb0f7c387adc088fb938f7971_Out_3;
            Unity_Remap_float(_Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4, float2 (0, 1), _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3);
            float4 _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4;
            float3 _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5;
            float2 _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6;
            Unity_Combine_float(_Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1, _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2, _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5, _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8;
            float4 _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1);
            float _Split_579bec1940604a80b8bf85fbd157877e_R_1 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[0];
            float _Split_579bec1940604a80b8bf85fbd157877e_G_2 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[1];
            float _Split_579bec1940604a80b8bf85fbd157877e_B_3 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[2];
            float _Split_579bec1940604a80b8bf85fbd157877e_A_4 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[3];
            surface.Alpha = 1;
            surface.NormalTS = (_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz);
            surface.Smoothness = _Split_579bec1940604a80b8bf85fbd157877e_A_4;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.WorldSpaceNormal =                           TransformObjectToWorldNormal(input.normalOS);
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(TransformObjectToWorld(input.positionOS).xyz);
            output.uv0 =                                        input.uv0;
            output.VertexColor =                                input.color;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            #ifdef TESSELLATION_ON
        
        float GetTessellationFactor(AttributesMesh input)
        {
            float tessellationFactor = 1.0;
        
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            tessellationFactor = vertexDescription.TessellationFactor;
        
            return tessellationFactor;
        }
        
        float GetMaxDisplacement()
        {
            return _TessellationMaxDisplacement;
        }
        
        // TODO: We should generate this struct like all the other varying struct
        VaryingsMeshToDS InterpolateWithBaryCoordsMeshToDS(VaryingsMeshToDS input0, VaryingsMeshToDS input1, VaryingsMeshToDS input2, float3 baryCoords)
        {
            VaryingsMeshToDS output;
        
            UNITY_TRANSFER_INSTANCE_ID(input0, output);
        
            TESSELLATION_INTERPOLATE_BARY(positionRWS, baryCoords);
            output.positionPredisplacementRWS = output.positionRWS;
            TESSELLATION_INTERPOLATE_BARY(normalWS, baryCoords);
        #ifdef VARYINGS_DS_NEED_TANGENT
            // This will interpolate the sign but should be ok in practice as we may expect a triangle to have same sign (? TO CHECK)
            TESSELLATION_INTERPOLATE_BARY(tangentWS, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD0
            TESSELLATION_INTERPOLATE_BARY(texCoord0, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD1
            TESSELLATION_INTERPOLATE_BARY(texCoord1, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD2
            TESSELLATION_INTERPOLATE_BARY(texCoord2, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD3
            TESSELLATION_INTERPOLATE_BARY(texCoord3, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_COLOR
            TESSELLATION_INTERPOLATE_BARY(color, baryCoords);
        #endif
        
            // Pass-Through for custom interpolator
            
        
            return output;
        }
        
        VertexDescriptionInputs VaryingsMeshToDSToVertexDescriptionInputs(VaryingsMeshToDS input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal = TransformWorldToObjectNormal(input.normalWS);
            output.WorldSpaceNormal = input.normalWS;
            output.ObjectSpaceTangent = TransformWorldToObjectDir(input.tangentWS.xyz);
            output.ObjectSpacePosition = TransformWorldToObject(input.positionRWS);
            output.AbsoluteWorldSpacePosition = GetAbsolutePositionWS(input.positionRWS.xyz);
            output.uv0 = input.texCoord0;
            output.VertexColor = input.color;
        
            return output;
        }
        
        #ifdef HAVE_TESSELLATION_MODIFICATION
        // tessellationFactors
        // x - 1->2 edge
        // y - 2->0 edge
        // z - 0->1 edge
        // w - inside tessellation factor
        VaryingsMeshToDS ApplyTessellationModification(VaryingsMeshToDS input, float3 timeParameters)
        {
            // HACK: As there is no specific tessellation stage for now in shadergraph, we reuse the vertex description mechanism.
            // It mean we store TessellationFactor inside vertex description causing extra read on both vertex and hull stage, but unusued paramater are optimize out by the shader compiler, so no impact.
            VertexDescriptionInputs vertexDescriptionInputs = VaryingsMeshToDSToVertexDescriptionInputs(input);
            // Override time paramters with used one (This is required to correctly handle motion vector for tessellation animation based on time)
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            input.positionRWS += vertexDescription.TessellationDisplacement;
        
            return input;
        }
        
        #endif
        
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
        
        // This will evaluate the custom interpolator and update the varying structure
        void VertMeshTesselationCustomInterpolation(VaryingsMeshToDS input, inout VaryingsMeshToPS output)
        {
            
        }
        
        #endif // USE_CUSTOMINTERP_SUBSTRUCT
        
        #endif // TESSELLATION_ON
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "FullScreenDebug"
            Tags
            {
                "LightMode" = "FullScreenDebug"
            }
        
            // Render State
            Cull [_CullMode]
        ZTest LEqual
        ZWrite Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options renderinglayer
        #pragma target 5.0
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma hull Hull
        #pragma domain Domain
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_domain _ _TESSELLATION_PHONG
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_FULL_SCREEN_DEBUG
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define TESSELLATION_ON 1
        #define HAVE_TESSELLATION_MODIFICATION 1
        
            #ifdef TESSELLATION_ON
            // World and normal are always available
                #define VARYINGS_DS_NEED_TANGENT
            #define VARYINGS_DS_NEED_TEXCOORD0
                        #define VARYINGS_DS_NEED_COLOR
        	#endif
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _Tesselation_Factor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float2 _NoiseTiling;
        float4 _Noise_TexelSize;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _Tess_Height_1_Min;
        float _Tess_Height_2_Min;
        float _Tess_Height_1_Max;
        float _Tess_Height_2_Max;
        float _Tess_Height_1_Offset;
        float _Tess_Height_2_Offset;
        float _Tess_Height_Blend_Transition;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _TessellationFactorMinDistance;
        float _TessellationFactorMaxDistance;
        float _TessellationFactorTriangleSize;
        float _TessellationShapeFactor;
        float _TessellationBackFaceCullEpsilon;
        float _TessellationMaxDisplacement;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToDS
        {
             float3 positionRWS;
             float3 positionPredisplacementRWS;
             float tessellationFactor;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 WorldSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        struct PackedVaryingsMeshToDS
        {
             float4 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float3 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToDS PackVaryingsMeshToDS (VaryingsMeshToDS input)
        {
            PackedVaryingsMeshToDS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToDS, output);
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.positionPredisplacementRWS;
            output.interp0.w =  input.tessellationFactor;
            output.interp2.xyz =  input.normalWS;
            output.interp3.xyzw =  input.tangentWS;
            output.interp4.xyzw =  input.texCoord0;
            output.interp5.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToDS UnpackVaryingsMeshToDS (PackedVaryingsMeshToDS input)
        {
            VaryingsMeshToDS output;
            output.positionRWS = input.interp0.xyz;
            output.positionPredisplacementRWS = input.interp1.xyz;
            output.tessellationFactor = input.interp0.w;
            output.normalWS = input.interp2.xyz;
            output.tangentWS = input.interp3.xyzw;
            output.texCoord0 = input.interp4.xyzw;
            output.color = input.interp5.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
          float4 _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0 = float4(0.0f, 0.0f, 0.0f, 1.0f);
        #else
          float4 _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0 = SAMPLE_TEXTURE2D_LOD(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3), 0);
        #endif
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_R_5 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.r;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_G_6 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.g;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_B_7 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.b;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_A_8 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.a;
        XZ_2 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A * B;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float TessellationFactor;
            float3 TessellationDisplacement;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            float _Property_4ce4eaefdd25487c81be7b77fded0e8e_Out_0 = _Tesselation_Factor;
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd;
            _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd.uv0 = IN.uv0;
            float4 _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2;
            SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd, _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2);
            float _Split_44fceac2f3ee418191b4553af6521c38_R_1 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[0];
            float _Split_44fceac2f3ee418191b4553af6521c38_G_2 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[1];
            float _Split_44fceac2f3ee418191b4553af6521c38_B_3 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[2];
            float _Split_44fceac2f3ee418191b4553af6521c38_A_4 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[3];
            float _Property_5cf4fd27daa14e02beb11bde8618dc1e_Out_0 = _Tess_Height_1_Min;
            float _Property_a9fd3adbddb24ff0b202f15d317d6251_Out_0 = _Tess_Height_1_Max;
            float2 _Vector2_4b26dbfd9f4e41ae9fc52ffe3b6c2743_Out_0 = float2(_Property_5cf4fd27daa14e02beb11bde8618dc1e_Out_0, _Property_a9fd3adbddb24ff0b202f15d317d6251_Out_0);
            float _Property_454bc81a8b1d4b91a1cdf06a95389fb8_Out_0 = _Tess_Height_1_Offset;
            float2 _Add_2e98ee41829843038c7084b5bc960d61_Out_2;
            Unity_Add_float2(_Vector2_4b26dbfd9f4e41ae9fc52ffe3b6c2743_Out_0, (_Property_454bc81a8b1d4b91a1cdf06a95389fb8_Out_0.xx), _Add_2e98ee41829843038c7084b5bc960d61_Out_2);
            float _Remap_027c62ebc97a45008874341269c98bdf_Out_3;
            Unity_Remap_float(_Split_44fceac2f3ee418191b4553af6521c38_B_3, float2 (0, 1), _Add_2e98ee41829843038c7084b5bc960d61_Out_2, _Remap_027c62ebc97a45008874341269c98bdf_Out_3);
            float _Property_22defdb92c8c4d2d97399b5fa41a900f_Out_0 = _HeightMin;
            float _Property_4de33eacfaf44d23b70a35429cce4ab5_Out_0 = _HeightMax;
            float2 _Vector2_e0dfbebd413e42a096904d5153c239d6_Out_0 = float2(_Property_22defdb92c8c4d2d97399b5fa41a900f_Out_0, _Property_4de33eacfaf44d23b70a35429cce4ab5_Out_0);
            float _Property_5f63683b3cf342e784b5d7ba224281eb_Out_0 = _HeightOffset;
            float2 _Add_1232537e8b9e4b739b5ebf05db959350_Out_2;
            Unity_Add_float2(_Vector2_e0dfbebd413e42a096904d5153c239d6_Out_0, (_Property_5f63683b3cf342e784b5d7ba224281eb_Out_0.xx), _Add_1232537e8b9e4b739b5ebf05db959350_Out_2);
            float _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3;
            Unity_Remap_float(_Split_44fceac2f3ee418191b4553af6521c38_B_3, float2 (0, 1), _Add_1232537e8b9e4b739b5ebf05db959350_Out_2, _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3;
            Unity_Clamp_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, 0, 1, _Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3);
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
              float4 _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0 = float4(0.0f, 0.0f, 0.0f, 1.0f);
            #else
              float4 _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0 = SAMPLE_TEXTURE2D_LOD(_Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.tex, _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.samplerstate, _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.GetTransformedUV(IN.uv0.xy), 0);
            #endif
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.r;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_G_6 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.g;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_B_7 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.b;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_A_8 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.a;
            float _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1;
            Unity_OneMinus_float(_SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5, _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1);
            float _Branch_5983f2479e684f37be29feca5608cf23_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1, _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5, _Branch_5983f2479e684f37be29feca5608cf23_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1;
            _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1.uv0 = IN.uv0;
            float4 _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2;
            SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1, _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2);
            float _Split_b681fe64892d4ccb828e0f6e32843516_R_1 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[0];
            float _Split_b681fe64892d4ccb828e0f6e32843516_G_2 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[1];
            float _Split_b681fe64892d4ccb828e0f6e32843516_B_3 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[2];
            float _Split_b681fe64892d4ccb828e0f6e32843516_A_4 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[3];
            float _Property_dfc13ef2f2dc4782800213462a60264e_Out_0 = _Tess_Height_2_Min;
            float _Property_a7a0d4e5a55541c496131ce65673dc91_Out_0 = _Tess_Height_2_Max;
            float2 _Vector2_680472357da14269b3fcb86a2574fd4e_Out_0 = float2(_Property_dfc13ef2f2dc4782800213462a60264e_Out_0, _Property_a7a0d4e5a55541c496131ce65673dc91_Out_0);
            float _Property_d4c81546338c4021943305435fad6d47_Out_0 = _Tess_Height_2_Offset;
            float2 _Add_685eacdaa4e14198a337eb5f87657041_Out_2;
            Unity_Add_float2(_Vector2_680472357da14269b3fcb86a2574fd4e_Out_0, (_Property_d4c81546338c4021943305435fad6d47_Out_0.xx), _Add_685eacdaa4e14198a337eb5f87657041_Out_2);
            float _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3;
            Unity_Remap_float(_Split_b681fe64892d4ccb828e0f6e32843516_B_3, float2 (0, 1), _Add_685eacdaa4e14198a337eb5f87657041_Out_2, _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3);
            float _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2;
            Unity_Multiply_float_float(_Branch_5983f2479e684f37be29feca5608cf23_Out_3, _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3, _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2);
            float _Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2;
            Unity_Multiply_float_float(_Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3, _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2, _Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2);
            float _Property_64ab9d23c014488e89cccc873cdd95d7_Out_0 = _HeightMin2;
            float _Property_c48827db27c44115952bbfdea9c70def_Out_0 = _HeightMax2;
            float2 _Vector2_ce60d322af6d4a1f9d3d0c93c9a597bb_Out_0 = float2(_Property_64ab9d23c014488e89cccc873cdd95d7_Out_0, _Property_c48827db27c44115952bbfdea9c70def_Out_0);
            float _Property_2d4e482f9b1749e69d85da504f5cbb13_Out_0 = _HeightOffset2;
            float2 _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2;
            Unity_Add_float2(_Vector2_ce60d322af6d4a1f9d3d0c93c9a597bb_Out_0, (_Property_2d4e482f9b1749e69d85da504f5cbb13_Out_0.xx), _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2);
            float _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3;
            Unity_Remap_float(_Split_b681fe64892d4ccb828e0f6e32843516_B_3, float2 (0, 1), _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2, _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3);
            float _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2;
            Unity_Multiply_float_float(_Branch_5983f2479e684f37be29feca5608cf23_Out_3, _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3, _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2);
            float _Multiply_e114c6909b264a3f880f484d068fa807_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2, _Multiply_e114c6909b264a3f880f484d068fa807_Out_2);
            float _Property_2bf75be176a5486b910544b5f36208a2_Out_0 = _Tess_Height_Blend_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_764bb1d66e274c1c986dcc710a41100e;
            float4 _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Remap_027c62ebc97a45008874341269c98bdf_Out_3.xxxx), _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3, (_Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2.xxxx), _Multiply_e114c6909b264a3f880f484d068fa807_Out_2, _Property_2bf75be176a5486b910544b5f36208a2_Out_0, _HeightBlend4_764bb1d66e274c1c986dcc710a41100e, _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1);
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_R_1 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[0];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_G_2 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[1];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_B_3 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[2];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_A_4 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[3];
            float3 _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2;
            Unity_Multiply_float3_float3(IN.WorldSpaceNormal, (_Split_6bbe578103fb4f3b81bea9f6e7100d4e_R_1.xxx), _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2);
            description.Position = IN.ObjectSpacePosition;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            description.TessellationFactor = _Property_4ce4eaefdd25487c81be7b77fded0e8e_Out_0;
            description.TessellationDisplacement = _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_07d75b1d2628da808a2efb93a1d6219e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.uv0 = IN.uv0;
            float4 _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_07d75b1d2628da808a2efb93a1d6219e_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2);
            float4 _Property_b83097c58639858680bf43881a95b0af_Out_0 = _BaseColor;
            float4 _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2, _Property_b83097c58639858680bf43881a95b0af_Out_0, _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2);
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[0];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[1];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[2];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_A_4 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[3];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_R_1 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[0];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_G_2 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[1];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_B_3 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[2];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_A_4 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[3];
            float _Property_04a7bb2753456b8293b3e46e346b646e_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0 = float2(_Property_04a7bb2753456b8293b3e46e346b646e_Out_0, _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0);
            float _Remap_65ca5af95590f88da70777476b6efd40_Out_3;
            Unity_Remap_float(_Split_6a373913f8b5c587b3b25440e2351a6f_A_4, float2 (0, 1), _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float4 _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4;
            float3 _Combine_d07fea824e695b839a48350dc82f464b_RGB_5;
            float2 _Combine_d07fea824e695b839a48350dc82f464b_RG_6;
            Unity_Combine_float(_Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1, _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2, _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3, _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Combine_d07fea824e695b839a48350dc82f464b_RGB_5, _Combine_d07fea824e695b839a48350dc82f464b_RG_6);
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_4245c3b264047180b5c90a697d6cb278;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.uv0 = IN.uv0;
            float4 _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_4245c3b264047180b5c90a697d6cb278, _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2);
            float _Split_91a015dea8acd38b904ba0935328a5bc_R_1 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[0];
            float _Split_91a015dea8acd38b904ba0935328a5bc_G_2 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[1];
            float _Split_91a015dea8acd38b904ba0935328a5bc_B_3 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[2];
            float _Split_91a015dea8acd38b904ba0935328a5bc_A_4 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[3];
            float _Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0 = _HeightMin;
            float _Property_9df7a44c8225168683743ac60c0c3c34_Out_0 = _HeightMax;
            float2 _Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0 = float2(_Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0, _Property_9df7a44c8225168683743ac60c0c3c34_Out_0);
            float _Property_29ca14fd0b712983a38d63d2dd326e96_Out_0 = _HeightOffset;
            float2 _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2;
            Unity_Add_float2(_Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0, (_Property_29ca14fd0b712983a38d63d2dd326e96_Out_0.xx), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2);
            float _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_B_3, float2 (0, 1), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3);
            UnityTexture2D _Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.uv0 = IN.uv0;
            float4 _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2);
            float4 _Property_3561b11b899bda8e855826445cf628aa_Out_0 = _Base2Color;
            float4 _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2, _Property_3561b11b899bda8e855826445cf628aa_Out_0, _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2);
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[0];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[1];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[2];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_A_4 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[3];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_R_1 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[0];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_G_2 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[1];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_B_3 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[2];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[3];
            float _Property_159cd47513de4f85a992da1f43f77c51_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0 = float2(_Property_159cd47513de4f85a992da1f43f77c51_Out_0, _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0);
            float _Remap_1214803bb0f7c387adc088fb938f7971_Out_3;
            Unity_Remap_float(_Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4, float2 (0, 1), _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3);
            float4 _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4;
            float3 _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5;
            float2 _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6;
            Unity_Combine_float(_Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1, _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2, _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5, _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.tex, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.samplerstate, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.r;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_G_5 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.g;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_B_6 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.b;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_A_7 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.a;
            float _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1);
            float _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1, _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d5657f470f05ef839e4c257a20ace8cb;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.uv0 = IN.uv0;
            float4 _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2);
            float _Split_83ec66b648ab6c84848b42686c256cd7_R_1 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[0];
            float _Split_83ec66b648ab6c84848b42686c256cd7_G_2 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[1];
            float _Split_83ec66b648ab6c84848b42686c256cd7_B_3 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[2];
            float _Split_83ec66b648ab6c84848b42686c256cd7_A_4 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[3];
            float _Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0 = _HeightMin2;
            float _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0 = _HeightMax2;
            float2 _Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0 = float2(_Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0, _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0);
            float _Property_151ae2702b614585af2000f0a812960f_Out_0 = _HeightOffset2;
            float2 _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2;
            Unity_Add_float2(_Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0, (_Property_151ae2702b614585af2000f0a812960f_Out_0.xx), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2);
            float _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_B_3, float2 (0, 1), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3);
            float _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2;
            Unity_Multiply_float_float(_Branch_af0c5e511241ce8eae748ae487df50fa_Out_3, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2);
            float _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2);
            float _Property_818c8af4b930138e81034c886614171d_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8;
            float4 _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1);
            float _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3;
            Unity_Lerp_float(0, _Split_91a015dea8acd38b904ba0935328a5bc_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3);
            float _Property_956d1a93cb804081b21a76fd0c75a806_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2;
            Unity_Multiply_float_float(_Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3, _Property_956d1a93cb804081b21a76fd0c75a806_Out_0, _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2);
            float _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1;
            Unity_Absolute_float(_Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2, _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1);
            float _Property_96173fa32f95148fa9d2a017748d5235_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_d81ebc6955897c87b8fb462f713aae50_Out_2;
            Unity_Power_float(_Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1, _Property_96173fa32f95148fa9d2a017748d5235_Out_0, _Power_d81ebc6955897c87b8fb462f713aae50_Out_2);
            float _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3;
            Unity_Lerp_float(0, _Split_83ec66b648ab6c84848b42686c256cd7_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3);
            float _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2;
            Unity_Multiply_float_float(_Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3, _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0, _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2);
            float _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1;
            Unity_Absolute_float(_Multiply_b761b264ce901b81b32b974d83993b3d_Out_2, _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1);
            float _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2;
            Unity_Power_float(_Absolute_2511aaf2b812e58b93d44253984de16c_Out_1, _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2);
            float _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3;
            Unity_Lerp_float(_Power_d81ebc6955897c87b8fb462f713aae50_Out_2, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3);
            float4 _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_5933ed525fc7068893db7db94870134a_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0, _Multiply_5933ed525fc7068893db7db94870134a_Out_2);
            UnityTexture2D _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0 = IN.uv0;
            float2 _Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0 = _NoiseSpeed;
            float2 _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2;
            Unity_Multiply_float2_float2(_Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0, (IN.TimeParameters.x.xx), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2);
            float2 _Add_bc688882d8fee68487424542b1a69952_Out_2;
            Unity_Add_float2((_UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0.xy), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2, _Add_bc688882d8fee68487424542b1a69952_Out_2);
            float4 _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_bc688882d8fee68487424542b1a69952_Out_2));
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_R_4 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.r;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_G_5 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.g;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_B_6 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.b;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.a;
            float2 _Multiply_d613a21978306a858470588fdf147e8f_Out_2;
            Unity_Multiply_float2_float2(_Add_bc688882d8fee68487424542b1a69952_Out_2, float2(-1.2, -0.9), _Multiply_d613a21978306a858470588fdf147e8f_Out_2);
            float2 _Add_888a259bce586985b790e81a5145084b_Out_2;
            Unity_Add_float2(_Multiply_d613a21978306a858470588fdf147e8f_Out_2, float2(0.5, 0.5), _Add_888a259bce586985b790e81a5145084b_Out_2);
            float4 _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_888a259bce586985b790e81a5145084b_Out_2));
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_R_4 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.r;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_G_5 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.g;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_B_6 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.b;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.a;
            float _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2;
            Unity_Minimum_float(_SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7, _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7, _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2);
            float _Absolute_20087090b3600b8d97155e3798d64011_Out_1;
            Unity_Absolute_float(_Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2, _Absolute_20087090b3600b8d97155e3798d64011_Out_1);
            float _Property_7a2d696ef1d8028a966365137be9d25e_Out_0 = _EmissionNoisePower;
            float _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2;
            Unity_Power_float(_Absolute_20087090b3600b8d97155e3798d64011_Out_1, _Property_7a2d696ef1d8028a966365137be9d25e_Out_0, _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2);
            float _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2;
            Unity_Multiply_float_float(_Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2, 20, _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2);
            float _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3;
            Unity_Clamp_float(_Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2, 0.05, 1.2, _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3);
            float4 _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2;
            Unity_Multiply_float4_float4(_Multiply_5933ed525fc7068893db7db94870134a_Out_2, (_Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3.xxxx), _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2);
            float4 _Property_c805fa28a9c59b8e93d45497d3768156_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            UnityTexture2D _Property_7c7049e15fdff386b535790d8666f609_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.uv0 = IN.uv0;
            float4 _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_7c7049e15fdff386b535790d8666f609_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2);
            float _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2.xyz), _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0, _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2);
            UnityTexture2D _Property_fa9f7890b20ad481a92543c04b237bde_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.uv0 = IN.uv0;
            float4 _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_fa9f7890b20ad481a92543c04b237bde_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2);
            float _Property_8c31443b776727819a663c7ddce79064_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2.xyz), _Property_8c31443b776727819a663c7ddce79064_Out_0, _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2;
            float4 _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1);
            float3 _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1);
            float _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2;
            Unity_DotProduct_float3((_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz), _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1, _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2);
            float _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1;
            Unity_Saturate_float(_DotProduct_21807a3955457c888958cf9b7de210fc_Out_2, _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1);
            float _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1;
            Unity_OneMinus_float(_Saturate_5e97c86e74edb580abca053af090c6f7_Out_1, _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1);
            float _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1;
            Unity_Absolute_float(_OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1, _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1);
            float _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2;
            Unity_Power_float(_Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1, 10, _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2);
            float4 _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2;
            Unity_Multiply_float4_float4(_Property_c805fa28a9c59b8e93d45497d3768156_Out_0, (_Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2.xxxx), _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2);
            float _Property_23902821969b7a8aabcaa150279da760_Out_0 = _RimLightPower;
            float4 _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2;
            Unity_Multiply_float4_float4(_Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2, (_Property_23902821969b7a8aabcaa150279da760_Out_0.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2);
            float4 _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2);
            float4 _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2;
            Unity_Add_float4(_Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2, _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2);
            float4 _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3;
            Unity_Clamp_float4(_Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, float4(0, 0, 0, 0), _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3);
            float _Split_579bec1940604a80b8bf85fbd157877e_R_1 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[0];
            float _Split_579bec1940604a80b8bf85fbd157877e_G_2 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[1];
            float _Split_579bec1940604a80b8bf85fbd157877e_B_3 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[2];
            float _Split_579bec1940604a80b8bf85fbd157877e_A_4 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[3];
            float _Property_afd0f3561038ef8487e614f350d364dd_Out_0 = _BaseMetallic;
            float _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2;
            Unity_Multiply_float_float(_Split_91a015dea8acd38b904ba0935328a5bc_R_1, _Property_afd0f3561038ef8487e614f350d364dd_Out_0, _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2);
            float _Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0 = _BaseAORemapMin;
            float _Property_9d07c7a09a85da809f1d4661406e0888_Out_0 = _BaseAORemapMax;
            float2 _Vector2_10162c774de2a7838426399cfe98be82_Out_0 = float2(_Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0, _Property_9d07c7a09a85da809f1d4661406e0888_Out_0);
            float _Remap_c45fda31db668c81a9e89e11297ec993_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_G_2, float2 (0, 1), _Vector2_10162c774de2a7838426399cfe98be82_Out_0, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3);
            float3 _Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0 = float3(_Multiply_154e0f89b19c8e86926222afb13691e3_Out_2, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0 = _Base2Metallic;
            float _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2;
            Unity_Multiply_float_float(_Split_83ec66b648ab6c84848b42686c256cd7_R_1, _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0, _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2);
            float _Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0 = _Base2AORemapMin;
            float _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0 = _Base2AORemapMax;
            float2 _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0 = float2(_Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0, _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0);
            float _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_G_2, float2 (0, 1), _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3);
            float3 _Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0 = float3(_Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_a5073733c462898f8bf5761db76cd246;
            float4 _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_a5073733c462898f8bf5761db76cd246, _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1);
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[0];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[1];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_B_3 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[2];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_A_4 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[3];
            surface.BaseColor = (_HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1.xyz);
            surface.Emission = (_Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_579bec1940604a80b8bf85fbd157877e_A_4;
            surface.Occlusion = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2;
            surface.NormalTS = (_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz);
            surface.Metallic = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.WorldSpaceNormal =                           TransformObjectToWorldNormal(input.normalOS);
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(TransformObjectToWorld(input.positionOS).xyz);
            output.uv0 =                                        input.uv0;
            output.VertexColor =                                input.color;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            #ifdef TESSELLATION_ON
        
        float GetTessellationFactor(AttributesMesh input)
        {
            float tessellationFactor = 1.0;
        
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            tessellationFactor = vertexDescription.TessellationFactor;
        
            return tessellationFactor;
        }
        
        float GetMaxDisplacement()
        {
            return _TessellationMaxDisplacement;
        }
        
        // TODO: We should generate this struct like all the other varying struct
        VaryingsMeshToDS InterpolateWithBaryCoordsMeshToDS(VaryingsMeshToDS input0, VaryingsMeshToDS input1, VaryingsMeshToDS input2, float3 baryCoords)
        {
            VaryingsMeshToDS output;
        
            UNITY_TRANSFER_INSTANCE_ID(input0, output);
        
            TESSELLATION_INTERPOLATE_BARY(positionRWS, baryCoords);
            output.positionPredisplacementRWS = output.positionRWS;
            TESSELLATION_INTERPOLATE_BARY(normalWS, baryCoords);
        #ifdef VARYINGS_DS_NEED_TANGENT
            // This will interpolate the sign but should be ok in practice as we may expect a triangle to have same sign (? TO CHECK)
            TESSELLATION_INTERPOLATE_BARY(tangentWS, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD0
            TESSELLATION_INTERPOLATE_BARY(texCoord0, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD1
            TESSELLATION_INTERPOLATE_BARY(texCoord1, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD2
            TESSELLATION_INTERPOLATE_BARY(texCoord2, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD3
            TESSELLATION_INTERPOLATE_BARY(texCoord3, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_COLOR
            TESSELLATION_INTERPOLATE_BARY(color, baryCoords);
        #endif
        
            // Pass-Through for custom interpolator
            
        
            return output;
        }
        
        VertexDescriptionInputs VaryingsMeshToDSToVertexDescriptionInputs(VaryingsMeshToDS input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal = TransformWorldToObjectNormal(input.normalWS);
            output.WorldSpaceNormal = input.normalWS;
            output.ObjectSpaceTangent = TransformWorldToObjectDir(input.tangentWS.xyz);
            output.ObjectSpacePosition = TransformWorldToObject(input.positionRWS);
            output.AbsoluteWorldSpacePosition = GetAbsolutePositionWS(input.positionRWS.xyz);
            output.uv0 = input.texCoord0;
            output.VertexColor = input.color;
        
            return output;
        }
        
        #ifdef HAVE_TESSELLATION_MODIFICATION
        // tessellationFactors
        // x - 1->2 edge
        // y - 2->0 edge
        // z - 0->1 edge
        // w - inside tessellation factor
        VaryingsMeshToDS ApplyTessellationModification(VaryingsMeshToDS input, float3 timeParameters)
        {
            // HACK: As there is no specific tessellation stage for now in shadergraph, we reuse the vertex description mechanism.
            // It mean we store TessellationFactor inside vertex description causing extra read on both vertex and hull stage, but unusued paramater are optimize out by the shader compiler, so no impact.
            VertexDescriptionInputs vertexDescriptionInputs = VaryingsMeshToDSToVertexDescriptionInputs(input);
            // Override time paramters with used one (This is required to correctly handle motion vector for tessellation animation based on time)
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            input.positionRWS += vertexDescription.TessellationDisplacement;
        
            return input;
        }
        
        #endif
        
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
        
        // This will evaluate the custom interpolator and update the varying structure
        void VertMeshTesselationCustomInterpolation(VaryingsMeshToDS input, inout VaryingsMeshToPS output)
        {
            
        }
        
        #endif // USE_CUSTOMINTERP_SUBSTRUCT
        
        #endif // TESSELLATION_ON
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassFullScreenDebug.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "DepthOnly"
            Tags
            {
                "LightMode" = "DepthOnly"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskDepth]
        Ref [_StencilRefDepth]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma target 5.0
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma hull Hull
        #pragma domain Domain
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma multi_compile _ WRITE_NORMAL_BUFFER
        #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_domain _ _TESSELLATION_PHONG
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ WRITE_DECAL_BUFFER
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define TESSELLATION_ON 1
        #define HAVE_TESSELLATION_MODIFICATION 1
        
            #ifdef TESSELLATION_ON
            // World and normal are always available
                #define VARYINGS_DS_NEED_TANGENT
            #define VARYINGS_DS_NEED_TEXCOORD0
                        #define VARYINGS_DS_NEED_COLOR
        	#endif
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _Tesselation_Factor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float2 _NoiseTiling;
        float4 _Noise_TexelSize;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _Tess_Height_1_Min;
        float _Tess_Height_2_Min;
        float _Tess_Height_1_Max;
        float _Tess_Height_2_Max;
        float _Tess_Height_1_Offset;
        float _Tess_Height_2_Offset;
        float _Tess_Height_Blend_Transition;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _TessellationFactorMinDistance;
        float _TessellationFactorMaxDistance;
        float _TessellationFactorTriangleSize;
        float _TessellationShapeFactor;
        float _TessellationBackFaceCullEpsilon;
        float _TessellationMaxDisplacement;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToDS
        {
             float3 positionRWS;
             float3 positionPredisplacementRWS;
             float tessellationFactor;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 WorldSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        struct PackedVaryingsMeshToDS
        {
             float4 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float3 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToDS PackVaryingsMeshToDS (VaryingsMeshToDS input)
        {
            PackedVaryingsMeshToDS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToDS, output);
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.positionPredisplacementRWS;
            output.interp0.w =  input.tessellationFactor;
            output.interp2.xyz =  input.normalWS;
            output.interp3.xyzw =  input.tangentWS;
            output.interp4.xyzw =  input.texCoord0;
            output.interp5.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToDS UnpackVaryingsMeshToDS (PackedVaryingsMeshToDS input)
        {
            VaryingsMeshToDS output;
            output.positionRWS = input.interp0.xyz;
            output.positionPredisplacementRWS = input.interp1.xyz;
            output.tessellationFactor = input.interp0.w;
            output.normalWS = input.interp2.xyz;
            output.tangentWS = input.interp3.xyzw;
            output.texCoord0 = input.interp4.xyzw;
            output.color = input.interp5.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
          float4 _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0 = float4(0.0f, 0.0f, 0.0f, 1.0f);
        #else
          float4 _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0 = SAMPLE_TEXTURE2D_LOD(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3), 0);
        #endif
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_R_5 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.r;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_G_6 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.g;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_B_7 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.b;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_A_8 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.a;
        XZ_2 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A * B;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float TessellationFactor;
            float3 TessellationDisplacement;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            float _Property_4ce4eaefdd25487c81be7b77fded0e8e_Out_0 = _Tesselation_Factor;
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd;
            _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd.uv0 = IN.uv0;
            float4 _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2;
            SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd, _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2);
            float _Split_44fceac2f3ee418191b4553af6521c38_R_1 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[0];
            float _Split_44fceac2f3ee418191b4553af6521c38_G_2 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[1];
            float _Split_44fceac2f3ee418191b4553af6521c38_B_3 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[2];
            float _Split_44fceac2f3ee418191b4553af6521c38_A_4 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[3];
            float _Property_5cf4fd27daa14e02beb11bde8618dc1e_Out_0 = _Tess_Height_1_Min;
            float _Property_a9fd3adbddb24ff0b202f15d317d6251_Out_0 = _Tess_Height_1_Max;
            float2 _Vector2_4b26dbfd9f4e41ae9fc52ffe3b6c2743_Out_0 = float2(_Property_5cf4fd27daa14e02beb11bde8618dc1e_Out_0, _Property_a9fd3adbddb24ff0b202f15d317d6251_Out_0);
            float _Property_454bc81a8b1d4b91a1cdf06a95389fb8_Out_0 = _Tess_Height_1_Offset;
            float2 _Add_2e98ee41829843038c7084b5bc960d61_Out_2;
            Unity_Add_float2(_Vector2_4b26dbfd9f4e41ae9fc52ffe3b6c2743_Out_0, (_Property_454bc81a8b1d4b91a1cdf06a95389fb8_Out_0.xx), _Add_2e98ee41829843038c7084b5bc960d61_Out_2);
            float _Remap_027c62ebc97a45008874341269c98bdf_Out_3;
            Unity_Remap_float(_Split_44fceac2f3ee418191b4553af6521c38_B_3, float2 (0, 1), _Add_2e98ee41829843038c7084b5bc960d61_Out_2, _Remap_027c62ebc97a45008874341269c98bdf_Out_3);
            float _Property_22defdb92c8c4d2d97399b5fa41a900f_Out_0 = _HeightMin;
            float _Property_4de33eacfaf44d23b70a35429cce4ab5_Out_0 = _HeightMax;
            float2 _Vector2_e0dfbebd413e42a096904d5153c239d6_Out_0 = float2(_Property_22defdb92c8c4d2d97399b5fa41a900f_Out_0, _Property_4de33eacfaf44d23b70a35429cce4ab5_Out_0);
            float _Property_5f63683b3cf342e784b5d7ba224281eb_Out_0 = _HeightOffset;
            float2 _Add_1232537e8b9e4b739b5ebf05db959350_Out_2;
            Unity_Add_float2(_Vector2_e0dfbebd413e42a096904d5153c239d6_Out_0, (_Property_5f63683b3cf342e784b5d7ba224281eb_Out_0.xx), _Add_1232537e8b9e4b739b5ebf05db959350_Out_2);
            float _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3;
            Unity_Remap_float(_Split_44fceac2f3ee418191b4553af6521c38_B_3, float2 (0, 1), _Add_1232537e8b9e4b739b5ebf05db959350_Out_2, _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3;
            Unity_Clamp_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, 0, 1, _Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3);
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
              float4 _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0 = float4(0.0f, 0.0f, 0.0f, 1.0f);
            #else
              float4 _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0 = SAMPLE_TEXTURE2D_LOD(_Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.tex, _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.samplerstate, _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.GetTransformedUV(IN.uv0.xy), 0);
            #endif
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.r;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_G_6 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.g;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_B_7 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.b;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_A_8 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.a;
            float _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1;
            Unity_OneMinus_float(_SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5, _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1);
            float _Branch_5983f2479e684f37be29feca5608cf23_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1, _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5, _Branch_5983f2479e684f37be29feca5608cf23_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1;
            _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1.uv0 = IN.uv0;
            float4 _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2;
            SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1, _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2);
            float _Split_b681fe64892d4ccb828e0f6e32843516_R_1 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[0];
            float _Split_b681fe64892d4ccb828e0f6e32843516_G_2 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[1];
            float _Split_b681fe64892d4ccb828e0f6e32843516_B_3 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[2];
            float _Split_b681fe64892d4ccb828e0f6e32843516_A_4 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[3];
            float _Property_dfc13ef2f2dc4782800213462a60264e_Out_0 = _Tess_Height_2_Min;
            float _Property_a7a0d4e5a55541c496131ce65673dc91_Out_0 = _Tess_Height_2_Max;
            float2 _Vector2_680472357da14269b3fcb86a2574fd4e_Out_0 = float2(_Property_dfc13ef2f2dc4782800213462a60264e_Out_0, _Property_a7a0d4e5a55541c496131ce65673dc91_Out_0);
            float _Property_d4c81546338c4021943305435fad6d47_Out_0 = _Tess_Height_2_Offset;
            float2 _Add_685eacdaa4e14198a337eb5f87657041_Out_2;
            Unity_Add_float2(_Vector2_680472357da14269b3fcb86a2574fd4e_Out_0, (_Property_d4c81546338c4021943305435fad6d47_Out_0.xx), _Add_685eacdaa4e14198a337eb5f87657041_Out_2);
            float _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3;
            Unity_Remap_float(_Split_b681fe64892d4ccb828e0f6e32843516_B_3, float2 (0, 1), _Add_685eacdaa4e14198a337eb5f87657041_Out_2, _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3);
            float _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2;
            Unity_Multiply_float_float(_Branch_5983f2479e684f37be29feca5608cf23_Out_3, _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3, _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2);
            float _Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2;
            Unity_Multiply_float_float(_Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3, _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2, _Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2);
            float _Property_64ab9d23c014488e89cccc873cdd95d7_Out_0 = _HeightMin2;
            float _Property_c48827db27c44115952bbfdea9c70def_Out_0 = _HeightMax2;
            float2 _Vector2_ce60d322af6d4a1f9d3d0c93c9a597bb_Out_0 = float2(_Property_64ab9d23c014488e89cccc873cdd95d7_Out_0, _Property_c48827db27c44115952bbfdea9c70def_Out_0);
            float _Property_2d4e482f9b1749e69d85da504f5cbb13_Out_0 = _HeightOffset2;
            float2 _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2;
            Unity_Add_float2(_Vector2_ce60d322af6d4a1f9d3d0c93c9a597bb_Out_0, (_Property_2d4e482f9b1749e69d85da504f5cbb13_Out_0.xx), _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2);
            float _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3;
            Unity_Remap_float(_Split_b681fe64892d4ccb828e0f6e32843516_B_3, float2 (0, 1), _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2, _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3);
            float _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2;
            Unity_Multiply_float_float(_Branch_5983f2479e684f37be29feca5608cf23_Out_3, _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3, _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2);
            float _Multiply_e114c6909b264a3f880f484d068fa807_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2, _Multiply_e114c6909b264a3f880f484d068fa807_Out_2);
            float _Property_2bf75be176a5486b910544b5f36208a2_Out_0 = _Tess_Height_Blend_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_764bb1d66e274c1c986dcc710a41100e;
            float4 _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Remap_027c62ebc97a45008874341269c98bdf_Out_3.xxxx), _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3, (_Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2.xxxx), _Multiply_e114c6909b264a3f880f484d068fa807_Out_2, _Property_2bf75be176a5486b910544b5f36208a2_Out_0, _HeightBlend4_764bb1d66e274c1c986dcc710a41100e, _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1);
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_R_1 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[0];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_G_2 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[1];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_B_3 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[2];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_A_4 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[3];
            float3 _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2;
            Unity_Multiply_float3_float3(IN.WorldSpaceNormal, (_Split_6bbe578103fb4f3b81bea9f6e7100d4e_R_1.xxx), _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2);
            description.Position = IN.ObjectSpacePosition;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            description.TessellationFactor = _Property_4ce4eaefdd25487c81be7b77fded0e8e_Out_0;
            description.TessellationDisplacement = _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_07d75b1d2628da808a2efb93a1d6219e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.uv0 = IN.uv0;
            float4 _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_07d75b1d2628da808a2efb93a1d6219e_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2);
            float4 _Property_b83097c58639858680bf43881a95b0af_Out_0 = _BaseColor;
            float4 _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2, _Property_b83097c58639858680bf43881a95b0af_Out_0, _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2);
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[0];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[1];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[2];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_A_4 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[3];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_R_1 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[0];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_G_2 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[1];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_B_3 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[2];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_A_4 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[3];
            float _Property_04a7bb2753456b8293b3e46e346b646e_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0 = float2(_Property_04a7bb2753456b8293b3e46e346b646e_Out_0, _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0);
            float _Remap_65ca5af95590f88da70777476b6efd40_Out_3;
            Unity_Remap_float(_Split_6a373913f8b5c587b3b25440e2351a6f_A_4, float2 (0, 1), _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float4 _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4;
            float3 _Combine_d07fea824e695b839a48350dc82f464b_RGB_5;
            float2 _Combine_d07fea824e695b839a48350dc82f464b_RG_6;
            Unity_Combine_float(_Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1, _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2, _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3, _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Combine_d07fea824e695b839a48350dc82f464b_RGB_5, _Combine_d07fea824e695b839a48350dc82f464b_RG_6);
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_4245c3b264047180b5c90a697d6cb278;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.uv0 = IN.uv0;
            float4 _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_4245c3b264047180b5c90a697d6cb278, _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2);
            float _Split_91a015dea8acd38b904ba0935328a5bc_R_1 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[0];
            float _Split_91a015dea8acd38b904ba0935328a5bc_G_2 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[1];
            float _Split_91a015dea8acd38b904ba0935328a5bc_B_3 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[2];
            float _Split_91a015dea8acd38b904ba0935328a5bc_A_4 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[3];
            float _Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0 = _HeightMin;
            float _Property_9df7a44c8225168683743ac60c0c3c34_Out_0 = _HeightMax;
            float2 _Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0 = float2(_Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0, _Property_9df7a44c8225168683743ac60c0c3c34_Out_0);
            float _Property_29ca14fd0b712983a38d63d2dd326e96_Out_0 = _HeightOffset;
            float2 _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2;
            Unity_Add_float2(_Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0, (_Property_29ca14fd0b712983a38d63d2dd326e96_Out_0.xx), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2);
            float _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_B_3, float2 (0, 1), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3);
            UnityTexture2D _Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.uv0 = IN.uv0;
            float4 _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2);
            float4 _Property_3561b11b899bda8e855826445cf628aa_Out_0 = _Base2Color;
            float4 _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2, _Property_3561b11b899bda8e855826445cf628aa_Out_0, _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2);
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[0];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[1];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[2];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_A_4 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[3];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_R_1 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[0];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_G_2 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[1];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_B_3 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[2];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[3];
            float _Property_159cd47513de4f85a992da1f43f77c51_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0 = float2(_Property_159cd47513de4f85a992da1f43f77c51_Out_0, _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0);
            float _Remap_1214803bb0f7c387adc088fb938f7971_Out_3;
            Unity_Remap_float(_Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4, float2 (0, 1), _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3);
            float4 _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4;
            float3 _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5;
            float2 _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6;
            Unity_Combine_float(_Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1, _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2, _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5, _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.tex, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.samplerstate, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.r;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_G_5 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.g;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_B_6 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.b;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_A_7 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.a;
            float _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1);
            float _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1, _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d5657f470f05ef839e4c257a20ace8cb;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.uv0 = IN.uv0;
            float4 _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2);
            float _Split_83ec66b648ab6c84848b42686c256cd7_R_1 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[0];
            float _Split_83ec66b648ab6c84848b42686c256cd7_G_2 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[1];
            float _Split_83ec66b648ab6c84848b42686c256cd7_B_3 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[2];
            float _Split_83ec66b648ab6c84848b42686c256cd7_A_4 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[3];
            float _Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0 = _HeightMin2;
            float _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0 = _HeightMax2;
            float2 _Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0 = float2(_Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0, _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0);
            float _Property_151ae2702b614585af2000f0a812960f_Out_0 = _HeightOffset2;
            float2 _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2;
            Unity_Add_float2(_Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0, (_Property_151ae2702b614585af2000f0a812960f_Out_0.xx), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2);
            float _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_B_3, float2 (0, 1), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3);
            float _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2;
            Unity_Multiply_float_float(_Branch_af0c5e511241ce8eae748ae487df50fa_Out_3, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2);
            float _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2);
            float _Property_818c8af4b930138e81034c886614171d_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8;
            float4 _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1);
            float _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3;
            Unity_Lerp_float(0, _Split_91a015dea8acd38b904ba0935328a5bc_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3);
            float _Property_956d1a93cb804081b21a76fd0c75a806_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2;
            Unity_Multiply_float_float(_Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3, _Property_956d1a93cb804081b21a76fd0c75a806_Out_0, _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2);
            float _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1;
            Unity_Absolute_float(_Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2, _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1);
            float _Property_96173fa32f95148fa9d2a017748d5235_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_d81ebc6955897c87b8fb462f713aae50_Out_2;
            Unity_Power_float(_Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1, _Property_96173fa32f95148fa9d2a017748d5235_Out_0, _Power_d81ebc6955897c87b8fb462f713aae50_Out_2);
            float _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3;
            Unity_Lerp_float(0, _Split_83ec66b648ab6c84848b42686c256cd7_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3);
            float _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2;
            Unity_Multiply_float_float(_Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3, _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0, _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2);
            float _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1;
            Unity_Absolute_float(_Multiply_b761b264ce901b81b32b974d83993b3d_Out_2, _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1);
            float _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2;
            Unity_Power_float(_Absolute_2511aaf2b812e58b93d44253984de16c_Out_1, _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2);
            float _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3;
            Unity_Lerp_float(_Power_d81ebc6955897c87b8fb462f713aae50_Out_2, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3);
            float4 _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_5933ed525fc7068893db7db94870134a_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0, _Multiply_5933ed525fc7068893db7db94870134a_Out_2);
            UnityTexture2D _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0 = IN.uv0;
            float2 _Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0 = _NoiseSpeed;
            float2 _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2;
            Unity_Multiply_float2_float2(_Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0, (IN.TimeParameters.x.xx), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2);
            float2 _Add_bc688882d8fee68487424542b1a69952_Out_2;
            Unity_Add_float2((_UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0.xy), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2, _Add_bc688882d8fee68487424542b1a69952_Out_2);
            float4 _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_bc688882d8fee68487424542b1a69952_Out_2));
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_R_4 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.r;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_G_5 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.g;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_B_6 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.b;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.a;
            float2 _Multiply_d613a21978306a858470588fdf147e8f_Out_2;
            Unity_Multiply_float2_float2(_Add_bc688882d8fee68487424542b1a69952_Out_2, float2(-1.2, -0.9), _Multiply_d613a21978306a858470588fdf147e8f_Out_2);
            float2 _Add_888a259bce586985b790e81a5145084b_Out_2;
            Unity_Add_float2(_Multiply_d613a21978306a858470588fdf147e8f_Out_2, float2(0.5, 0.5), _Add_888a259bce586985b790e81a5145084b_Out_2);
            float4 _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_888a259bce586985b790e81a5145084b_Out_2));
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_R_4 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.r;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_G_5 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.g;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_B_6 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.b;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.a;
            float _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2;
            Unity_Minimum_float(_SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7, _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7, _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2);
            float _Absolute_20087090b3600b8d97155e3798d64011_Out_1;
            Unity_Absolute_float(_Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2, _Absolute_20087090b3600b8d97155e3798d64011_Out_1);
            float _Property_7a2d696ef1d8028a966365137be9d25e_Out_0 = _EmissionNoisePower;
            float _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2;
            Unity_Power_float(_Absolute_20087090b3600b8d97155e3798d64011_Out_1, _Property_7a2d696ef1d8028a966365137be9d25e_Out_0, _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2);
            float _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2;
            Unity_Multiply_float_float(_Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2, 20, _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2);
            float _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3;
            Unity_Clamp_float(_Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2, 0.05, 1.2, _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3);
            float4 _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2;
            Unity_Multiply_float4_float4(_Multiply_5933ed525fc7068893db7db94870134a_Out_2, (_Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3.xxxx), _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2);
            float4 _Property_c805fa28a9c59b8e93d45497d3768156_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            UnityTexture2D _Property_7c7049e15fdff386b535790d8666f609_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.uv0 = IN.uv0;
            float4 _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_7c7049e15fdff386b535790d8666f609_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2);
            float _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2.xyz), _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0, _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2);
            UnityTexture2D _Property_fa9f7890b20ad481a92543c04b237bde_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.uv0 = IN.uv0;
            float4 _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_fa9f7890b20ad481a92543c04b237bde_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2);
            float _Property_8c31443b776727819a663c7ddce79064_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2.xyz), _Property_8c31443b776727819a663c7ddce79064_Out_0, _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2;
            float4 _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1);
            float3 _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1);
            float _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2;
            Unity_DotProduct_float3((_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz), _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1, _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2);
            float _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1;
            Unity_Saturate_float(_DotProduct_21807a3955457c888958cf9b7de210fc_Out_2, _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1);
            float _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1;
            Unity_OneMinus_float(_Saturate_5e97c86e74edb580abca053af090c6f7_Out_1, _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1);
            float _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1;
            Unity_Absolute_float(_OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1, _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1);
            float _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2;
            Unity_Power_float(_Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1, 10, _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2);
            float4 _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2;
            Unity_Multiply_float4_float4(_Property_c805fa28a9c59b8e93d45497d3768156_Out_0, (_Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2.xxxx), _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2);
            float _Property_23902821969b7a8aabcaa150279da760_Out_0 = _RimLightPower;
            float4 _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2;
            Unity_Multiply_float4_float4(_Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2, (_Property_23902821969b7a8aabcaa150279da760_Out_0.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2);
            float4 _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2);
            float4 _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2;
            Unity_Add_float4(_Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2, _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2);
            float4 _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3;
            Unity_Clamp_float4(_Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, float4(0, 0, 0, 0), _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3);
            float _Split_579bec1940604a80b8bf85fbd157877e_R_1 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[0];
            float _Split_579bec1940604a80b8bf85fbd157877e_G_2 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[1];
            float _Split_579bec1940604a80b8bf85fbd157877e_B_3 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[2];
            float _Split_579bec1940604a80b8bf85fbd157877e_A_4 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[3];
            float _Property_afd0f3561038ef8487e614f350d364dd_Out_0 = _BaseMetallic;
            float _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2;
            Unity_Multiply_float_float(_Split_91a015dea8acd38b904ba0935328a5bc_R_1, _Property_afd0f3561038ef8487e614f350d364dd_Out_0, _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2);
            float _Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0 = _BaseAORemapMin;
            float _Property_9d07c7a09a85da809f1d4661406e0888_Out_0 = _BaseAORemapMax;
            float2 _Vector2_10162c774de2a7838426399cfe98be82_Out_0 = float2(_Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0, _Property_9d07c7a09a85da809f1d4661406e0888_Out_0);
            float _Remap_c45fda31db668c81a9e89e11297ec993_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_G_2, float2 (0, 1), _Vector2_10162c774de2a7838426399cfe98be82_Out_0, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3);
            float3 _Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0 = float3(_Multiply_154e0f89b19c8e86926222afb13691e3_Out_2, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0 = _Base2Metallic;
            float _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2;
            Unity_Multiply_float_float(_Split_83ec66b648ab6c84848b42686c256cd7_R_1, _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0, _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2);
            float _Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0 = _Base2AORemapMin;
            float _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0 = _Base2AORemapMax;
            float2 _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0 = float2(_Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0, _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0);
            float _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_G_2, float2 (0, 1), _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3);
            float3 _Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0 = float3(_Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_a5073733c462898f8bf5761db76cd246;
            float4 _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_a5073733c462898f8bf5761db76cd246, _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1);
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[0];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[1];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_B_3 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[2];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_A_4 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[3];
            surface.BaseColor = (_HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1.xyz);
            surface.Emission = (_Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_579bec1940604a80b8bf85fbd157877e_A_4;
            surface.Occlusion = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2;
            surface.NormalTS = (_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz);
            surface.Metallic = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.WorldSpaceNormal =                           TransformObjectToWorldNormal(input.normalOS);
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(TransformObjectToWorld(input.positionOS).xyz);
            output.uv0 =                                        input.uv0;
            output.VertexColor =                                input.color;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            #ifdef TESSELLATION_ON
        
        float GetTessellationFactor(AttributesMesh input)
        {
            float tessellationFactor = 1.0;
        
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            tessellationFactor = vertexDescription.TessellationFactor;
        
            return tessellationFactor;
        }
        
        float GetMaxDisplacement()
        {
            return _TessellationMaxDisplacement;
        }
        
        // TODO: We should generate this struct like all the other varying struct
        VaryingsMeshToDS InterpolateWithBaryCoordsMeshToDS(VaryingsMeshToDS input0, VaryingsMeshToDS input1, VaryingsMeshToDS input2, float3 baryCoords)
        {
            VaryingsMeshToDS output;
        
            UNITY_TRANSFER_INSTANCE_ID(input0, output);
        
            TESSELLATION_INTERPOLATE_BARY(positionRWS, baryCoords);
            output.positionPredisplacementRWS = output.positionRWS;
            TESSELLATION_INTERPOLATE_BARY(normalWS, baryCoords);
        #ifdef VARYINGS_DS_NEED_TANGENT
            // This will interpolate the sign but should be ok in practice as we may expect a triangle to have same sign (? TO CHECK)
            TESSELLATION_INTERPOLATE_BARY(tangentWS, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD0
            TESSELLATION_INTERPOLATE_BARY(texCoord0, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD1
            TESSELLATION_INTERPOLATE_BARY(texCoord1, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD2
            TESSELLATION_INTERPOLATE_BARY(texCoord2, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD3
            TESSELLATION_INTERPOLATE_BARY(texCoord3, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_COLOR
            TESSELLATION_INTERPOLATE_BARY(color, baryCoords);
        #endif
        
            // Pass-Through for custom interpolator
            
        
            return output;
        }
        
        VertexDescriptionInputs VaryingsMeshToDSToVertexDescriptionInputs(VaryingsMeshToDS input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal = TransformWorldToObjectNormal(input.normalWS);
            output.WorldSpaceNormal = input.normalWS;
            output.ObjectSpaceTangent = TransformWorldToObjectDir(input.tangentWS.xyz);
            output.ObjectSpacePosition = TransformWorldToObject(input.positionRWS);
            output.AbsoluteWorldSpacePosition = GetAbsolutePositionWS(input.positionRWS.xyz);
            output.uv0 = input.texCoord0;
            output.VertexColor = input.color;
        
            return output;
        }
        
        #ifdef HAVE_TESSELLATION_MODIFICATION
        // tessellationFactors
        // x - 1->2 edge
        // y - 2->0 edge
        // z - 0->1 edge
        // w - inside tessellation factor
        VaryingsMeshToDS ApplyTessellationModification(VaryingsMeshToDS input, float3 timeParameters)
        {
            // HACK: As there is no specific tessellation stage for now in shadergraph, we reuse the vertex description mechanism.
            // It mean we store TessellationFactor inside vertex description causing extra read on both vertex and hull stage, but unusued paramater are optimize out by the shader compiler, so no impact.
            VertexDescriptionInputs vertexDescriptionInputs = VaryingsMeshToDSToVertexDescriptionInputs(input);
            // Override time paramters with used one (This is required to correctly handle motion vector for tessellation animation based on time)
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            input.positionRWS += vertexDescription.TessellationDisplacement;
        
            return input;
        }
        
        #endif
        
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
        
        // This will evaluate the custom interpolator and update the varying structure
        void VertMeshTesselationCustomInterpolation(VaryingsMeshToDS input, inout VaryingsMeshToPS output)
        {
            
        }
        
        #endif // USE_CUSTOMINTERP_SUBSTRUCT
        
        #endif // TESSELLATION_ON
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "GBuffer"
            Tags
            {
                "LightMode" = "GBuffer"
            }
        
            // Render State
            Cull [_CullMode]
        ZTest [_ZTestGBuffer]
        Stencil
        {
        WriteMask [_StencilWriteMaskGBuffer]
        Ref [_StencilRefGBuffer]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma target 5.0
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma hull Hull
        #pragma domain Domain
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma multi_compile_fragment _ LIGHT_LAYERS
        #pragma multi_compile_raytracing _ LIGHT_LAYERS
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_domain _ _TESSELLATION_PHONG
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
        #pragma multi_compile_raytracing _ SHADOWS_SHADOWMASK
        #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
        #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_GBUFFER
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define TESSELLATION_ON 1
        #define HAVE_TESSELLATION_MODIFICATION 1
        
            #ifdef TESSELLATION_ON
            // World and normal are always available
                #define VARYINGS_DS_NEED_TANGENT
            #define VARYINGS_DS_NEED_TEXCOORD0
            #define VARYINGS_DS_NEED_TEXCOORD1
            #define VARYINGS_DS_NEED_TEXCOORD2
                #define VARYINGS_DS_NEED_COLOR
        	#endif
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _Tesselation_Factor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float2 _NoiseTiling;
        float4 _Noise_TexelSize;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _Tess_Height_1_Min;
        float _Tess_Height_2_Min;
        float _Tess_Height_1_Max;
        float _Tess_Height_2_Max;
        float _Tess_Height_1_Offset;
        float _Tess_Height_2_Offset;
        float _Tess_Height_Blend_Transition;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _TessellationFactorMinDistance;
        float _TessellationFactorMaxDistance;
        float _TessellationFactorTriangleSize;
        float _TessellationShapeFactor;
        float _TessellationBackFaceCullEpsilon;
        float _TessellationMaxDisplacement;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv1 : TEXCOORD1;
             float4 uv2 : TEXCOORD2;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToDS
        {
             float3 positionRWS;
             float3 positionPredisplacementRWS;
             float tessellationFactor;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 WorldSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        struct PackedVaryingsMeshToDS
        {
             float4 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float3 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
             float4 interp6 : INTERP6;
             float4 interp7 : INTERP7;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
             float4 interp6 : INTERP6;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToDS PackVaryingsMeshToDS (VaryingsMeshToDS input)
        {
            PackedVaryingsMeshToDS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToDS, output);
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.positionPredisplacementRWS;
            output.interp0.w =  input.tessellationFactor;
            output.interp2.xyz =  input.normalWS;
            output.interp3.xyzw =  input.tangentWS;
            output.interp4.xyzw =  input.texCoord0;
            output.interp5.xyzw =  input.texCoord1;
            output.interp6.xyzw =  input.texCoord2;
            output.interp7.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToDS UnpackVaryingsMeshToDS (PackedVaryingsMeshToDS input)
        {
            VaryingsMeshToDS output;
            output.positionRWS = input.interp0.xyz;
            output.positionPredisplacementRWS = input.interp1.xyz;
            output.tessellationFactor = input.interp0.w;
            output.normalWS = input.interp2.xyz;
            output.tangentWS = input.interp3.xyzw;
            output.texCoord0 = input.interp4.xyzw;
            output.texCoord1 = input.interp5.xyzw;
            output.texCoord2 = input.interp6.xyzw;
            output.color = input.interp7.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.texCoord1;
            output.interp5.xyzw =  input.texCoord2;
            output.interp6.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.texCoord1 = input.interp4.xyzw;
            output.texCoord2 = input.interp5.xyzw;
            output.color = input.interp6.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
          float4 _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0 = float4(0.0f, 0.0f, 0.0f, 1.0f);
        #else
          float4 _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0 = SAMPLE_TEXTURE2D_LOD(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3), 0);
        #endif
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_R_5 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.r;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_G_6 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.g;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_B_7 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.b;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_A_8 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.a;
        XZ_2 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A * B;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float TessellationFactor;
            float3 TessellationDisplacement;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            float _Property_4ce4eaefdd25487c81be7b77fded0e8e_Out_0 = _Tesselation_Factor;
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd;
            _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd.uv0 = IN.uv0;
            float4 _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2;
            SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd, _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2);
            float _Split_44fceac2f3ee418191b4553af6521c38_R_1 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[0];
            float _Split_44fceac2f3ee418191b4553af6521c38_G_2 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[1];
            float _Split_44fceac2f3ee418191b4553af6521c38_B_3 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[2];
            float _Split_44fceac2f3ee418191b4553af6521c38_A_4 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[3];
            float _Property_5cf4fd27daa14e02beb11bde8618dc1e_Out_0 = _Tess_Height_1_Min;
            float _Property_a9fd3adbddb24ff0b202f15d317d6251_Out_0 = _Tess_Height_1_Max;
            float2 _Vector2_4b26dbfd9f4e41ae9fc52ffe3b6c2743_Out_0 = float2(_Property_5cf4fd27daa14e02beb11bde8618dc1e_Out_0, _Property_a9fd3adbddb24ff0b202f15d317d6251_Out_0);
            float _Property_454bc81a8b1d4b91a1cdf06a95389fb8_Out_0 = _Tess_Height_1_Offset;
            float2 _Add_2e98ee41829843038c7084b5bc960d61_Out_2;
            Unity_Add_float2(_Vector2_4b26dbfd9f4e41ae9fc52ffe3b6c2743_Out_0, (_Property_454bc81a8b1d4b91a1cdf06a95389fb8_Out_0.xx), _Add_2e98ee41829843038c7084b5bc960d61_Out_2);
            float _Remap_027c62ebc97a45008874341269c98bdf_Out_3;
            Unity_Remap_float(_Split_44fceac2f3ee418191b4553af6521c38_B_3, float2 (0, 1), _Add_2e98ee41829843038c7084b5bc960d61_Out_2, _Remap_027c62ebc97a45008874341269c98bdf_Out_3);
            float _Property_22defdb92c8c4d2d97399b5fa41a900f_Out_0 = _HeightMin;
            float _Property_4de33eacfaf44d23b70a35429cce4ab5_Out_0 = _HeightMax;
            float2 _Vector2_e0dfbebd413e42a096904d5153c239d6_Out_0 = float2(_Property_22defdb92c8c4d2d97399b5fa41a900f_Out_0, _Property_4de33eacfaf44d23b70a35429cce4ab5_Out_0);
            float _Property_5f63683b3cf342e784b5d7ba224281eb_Out_0 = _HeightOffset;
            float2 _Add_1232537e8b9e4b739b5ebf05db959350_Out_2;
            Unity_Add_float2(_Vector2_e0dfbebd413e42a096904d5153c239d6_Out_0, (_Property_5f63683b3cf342e784b5d7ba224281eb_Out_0.xx), _Add_1232537e8b9e4b739b5ebf05db959350_Out_2);
            float _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3;
            Unity_Remap_float(_Split_44fceac2f3ee418191b4553af6521c38_B_3, float2 (0, 1), _Add_1232537e8b9e4b739b5ebf05db959350_Out_2, _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3;
            Unity_Clamp_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, 0, 1, _Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3);
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
              float4 _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0 = float4(0.0f, 0.0f, 0.0f, 1.0f);
            #else
              float4 _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0 = SAMPLE_TEXTURE2D_LOD(_Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.tex, _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.samplerstate, _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.GetTransformedUV(IN.uv0.xy), 0);
            #endif
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.r;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_G_6 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.g;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_B_7 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.b;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_A_8 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.a;
            float _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1;
            Unity_OneMinus_float(_SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5, _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1);
            float _Branch_5983f2479e684f37be29feca5608cf23_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1, _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5, _Branch_5983f2479e684f37be29feca5608cf23_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1;
            _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1.uv0 = IN.uv0;
            float4 _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2;
            SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1, _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2);
            float _Split_b681fe64892d4ccb828e0f6e32843516_R_1 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[0];
            float _Split_b681fe64892d4ccb828e0f6e32843516_G_2 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[1];
            float _Split_b681fe64892d4ccb828e0f6e32843516_B_3 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[2];
            float _Split_b681fe64892d4ccb828e0f6e32843516_A_4 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[3];
            float _Property_dfc13ef2f2dc4782800213462a60264e_Out_0 = _Tess_Height_2_Min;
            float _Property_a7a0d4e5a55541c496131ce65673dc91_Out_0 = _Tess_Height_2_Max;
            float2 _Vector2_680472357da14269b3fcb86a2574fd4e_Out_0 = float2(_Property_dfc13ef2f2dc4782800213462a60264e_Out_0, _Property_a7a0d4e5a55541c496131ce65673dc91_Out_0);
            float _Property_d4c81546338c4021943305435fad6d47_Out_0 = _Tess_Height_2_Offset;
            float2 _Add_685eacdaa4e14198a337eb5f87657041_Out_2;
            Unity_Add_float2(_Vector2_680472357da14269b3fcb86a2574fd4e_Out_0, (_Property_d4c81546338c4021943305435fad6d47_Out_0.xx), _Add_685eacdaa4e14198a337eb5f87657041_Out_2);
            float _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3;
            Unity_Remap_float(_Split_b681fe64892d4ccb828e0f6e32843516_B_3, float2 (0, 1), _Add_685eacdaa4e14198a337eb5f87657041_Out_2, _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3);
            float _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2;
            Unity_Multiply_float_float(_Branch_5983f2479e684f37be29feca5608cf23_Out_3, _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3, _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2);
            float _Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2;
            Unity_Multiply_float_float(_Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3, _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2, _Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2);
            float _Property_64ab9d23c014488e89cccc873cdd95d7_Out_0 = _HeightMin2;
            float _Property_c48827db27c44115952bbfdea9c70def_Out_0 = _HeightMax2;
            float2 _Vector2_ce60d322af6d4a1f9d3d0c93c9a597bb_Out_0 = float2(_Property_64ab9d23c014488e89cccc873cdd95d7_Out_0, _Property_c48827db27c44115952bbfdea9c70def_Out_0);
            float _Property_2d4e482f9b1749e69d85da504f5cbb13_Out_0 = _HeightOffset2;
            float2 _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2;
            Unity_Add_float2(_Vector2_ce60d322af6d4a1f9d3d0c93c9a597bb_Out_0, (_Property_2d4e482f9b1749e69d85da504f5cbb13_Out_0.xx), _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2);
            float _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3;
            Unity_Remap_float(_Split_b681fe64892d4ccb828e0f6e32843516_B_3, float2 (0, 1), _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2, _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3);
            float _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2;
            Unity_Multiply_float_float(_Branch_5983f2479e684f37be29feca5608cf23_Out_3, _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3, _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2);
            float _Multiply_e114c6909b264a3f880f484d068fa807_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2, _Multiply_e114c6909b264a3f880f484d068fa807_Out_2);
            float _Property_2bf75be176a5486b910544b5f36208a2_Out_0 = _Tess_Height_Blend_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_764bb1d66e274c1c986dcc710a41100e;
            float4 _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Remap_027c62ebc97a45008874341269c98bdf_Out_3.xxxx), _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3, (_Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2.xxxx), _Multiply_e114c6909b264a3f880f484d068fa807_Out_2, _Property_2bf75be176a5486b910544b5f36208a2_Out_0, _HeightBlend4_764bb1d66e274c1c986dcc710a41100e, _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1);
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_R_1 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[0];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_G_2 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[1];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_B_3 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[2];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_A_4 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[3];
            float3 _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2;
            Unity_Multiply_float3_float3(IN.WorldSpaceNormal, (_Split_6bbe578103fb4f3b81bea9f6e7100d4e_R_1.xxx), _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2);
            description.Position = IN.ObjectSpacePosition;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            description.TessellationFactor = _Property_4ce4eaefdd25487c81be7b77fded0e8e_Out_0;
            description.TessellationDisplacement = _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
            float4 VTPackedFeedback;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_07d75b1d2628da808a2efb93a1d6219e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.uv0 = IN.uv0;
            float4 _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_07d75b1d2628da808a2efb93a1d6219e_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2);
            float4 _Property_b83097c58639858680bf43881a95b0af_Out_0 = _BaseColor;
            float4 _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2, _Property_b83097c58639858680bf43881a95b0af_Out_0, _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2);
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[0];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[1];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[2];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_A_4 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[3];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_R_1 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[0];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_G_2 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[1];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_B_3 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[2];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_A_4 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[3];
            float _Property_04a7bb2753456b8293b3e46e346b646e_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0 = float2(_Property_04a7bb2753456b8293b3e46e346b646e_Out_0, _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0);
            float _Remap_65ca5af95590f88da70777476b6efd40_Out_3;
            Unity_Remap_float(_Split_6a373913f8b5c587b3b25440e2351a6f_A_4, float2 (0, 1), _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float4 _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4;
            float3 _Combine_d07fea824e695b839a48350dc82f464b_RGB_5;
            float2 _Combine_d07fea824e695b839a48350dc82f464b_RG_6;
            Unity_Combine_float(_Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1, _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2, _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3, _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Combine_d07fea824e695b839a48350dc82f464b_RGB_5, _Combine_d07fea824e695b839a48350dc82f464b_RG_6);
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_4245c3b264047180b5c90a697d6cb278;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.uv0 = IN.uv0;
            float4 _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_4245c3b264047180b5c90a697d6cb278, _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2);
            float _Split_91a015dea8acd38b904ba0935328a5bc_R_1 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[0];
            float _Split_91a015dea8acd38b904ba0935328a5bc_G_2 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[1];
            float _Split_91a015dea8acd38b904ba0935328a5bc_B_3 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[2];
            float _Split_91a015dea8acd38b904ba0935328a5bc_A_4 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[3];
            float _Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0 = _HeightMin;
            float _Property_9df7a44c8225168683743ac60c0c3c34_Out_0 = _HeightMax;
            float2 _Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0 = float2(_Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0, _Property_9df7a44c8225168683743ac60c0c3c34_Out_0);
            float _Property_29ca14fd0b712983a38d63d2dd326e96_Out_0 = _HeightOffset;
            float2 _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2;
            Unity_Add_float2(_Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0, (_Property_29ca14fd0b712983a38d63d2dd326e96_Out_0.xx), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2);
            float _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_B_3, float2 (0, 1), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3);
            UnityTexture2D _Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.uv0 = IN.uv0;
            float4 _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2);
            float4 _Property_3561b11b899bda8e855826445cf628aa_Out_0 = _Base2Color;
            float4 _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2, _Property_3561b11b899bda8e855826445cf628aa_Out_0, _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2);
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[0];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[1];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[2];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_A_4 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[3];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_R_1 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[0];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_G_2 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[1];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_B_3 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[2];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[3];
            float _Property_159cd47513de4f85a992da1f43f77c51_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0 = float2(_Property_159cd47513de4f85a992da1f43f77c51_Out_0, _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0);
            float _Remap_1214803bb0f7c387adc088fb938f7971_Out_3;
            Unity_Remap_float(_Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4, float2 (0, 1), _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3);
            float4 _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4;
            float3 _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5;
            float2 _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6;
            Unity_Combine_float(_Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1, _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2, _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5, _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.tex, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.samplerstate, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.r;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_G_5 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.g;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_B_6 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.b;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_A_7 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.a;
            float _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1);
            float _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1, _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d5657f470f05ef839e4c257a20ace8cb;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.uv0 = IN.uv0;
            float4 _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2);
            float _Split_83ec66b648ab6c84848b42686c256cd7_R_1 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[0];
            float _Split_83ec66b648ab6c84848b42686c256cd7_G_2 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[1];
            float _Split_83ec66b648ab6c84848b42686c256cd7_B_3 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[2];
            float _Split_83ec66b648ab6c84848b42686c256cd7_A_4 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[3];
            float _Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0 = _HeightMin2;
            float _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0 = _HeightMax2;
            float2 _Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0 = float2(_Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0, _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0);
            float _Property_151ae2702b614585af2000f0a812960f_Out_0 = _HeightOffset2;
            float2 _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2;
            Unity_Add_float2(_Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0, (_Property_151ae2702b614585af2000f0a812960f_Out_0.xx), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2);
            float _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_B_3, float2 (0, 1), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3);
            float _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2;
            Unity_Multiply_float_float(_Branch_af0c5e511241ce8eae748ae487df50fa_Out_3, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2);
            float _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2);
            float _Property_818c8af4b930138e81034c886614171d_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8;
            float4 _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1);
            float _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3;
            Unity_Lerp_float(0, _Split_91a015dea8acd38b904ba0935328a5bc_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3);
            float _Property_956d1a93cb804081b21a76fd0c75a806_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2;
            Unity_Multiply_float_float(_Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3, _Property_956d1a93cb804081b21a76fd0c75a806_Out_0, _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2);
            float _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1;
            Unity_Absolute_float(_Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2, _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1);
            float _Property_96173fa32f95148fa9d2a017748d5235_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_d81ebc6955897c87b8fb462f713aae50_Out_2;
            Unity_Power_float(_Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1, _Property_96173fa32f95148fa9d2a017748d5235_Out_0, _Power_d81ebc6955897c87b8fb462f713aae50_Out_2);
            float _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3;
            Unity_Lerp_float(0, _Split_83ec66b648ab6c84848b42686c256cd7_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3);
            float _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2;
            Unity_Multiply_float_float(_Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3, _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0, _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2);
            float _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1;
            Unity_Absolute_float(_Multiply_b761b264ce901b81b32b974d83993b3d_Out_2, _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1);
            float _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2;
            Unity_Power_float(_Absolute_2511aaf2b812e58b93d44253984de16c_Out_1, _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2);
            float _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3;
            Unity_Lerp_float(_Power_d81ebc6955897c87b8fb462f713aae50_Out_2, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3);
            float4 _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_5933ed525fc7068893db7db94870134a_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0, _Multiply_5933ed525fc7068893db7db94870134a_Out_2);
            UnityTexture2D _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0 = IN.uv0;
            float2 _Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0 = _NoiseSpeed;
            float2 _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2;
            Unity_Multiply_float2_float2(_Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0, (IN.TimeParameters.x.xx), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2);
            float2 _Add_bc688882d8fee68487424542b1a69952_Out_2;
            Unity_Add_float2((_UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0.xy), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2, _Add_bc688882d8fee68487424542b1a69952_Out_2);
            float4 _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_bc688882d8fee68487424542b1a69952_Out_2));
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_R_4 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.r;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_G_5 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.g;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_B_6 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.b;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.a;
            float2 _Multiply_d613a21978306a858470588fdf147e8f_Out_2;
            Unity_Multiply_float2_float2(_Add_bc688882d8fee68487424542b1a69952_Out_2, float2(-1.2, -0.9), _Multiply_d613a21978306a858470588fdf147e8f_Out_2);
            float2 _Add_888a259bce586985b790e81a5145084b_Out_2;
            Unity_Add_float2(_Multiply_d613a21978306a858470588fdf147e8f_Out_2, float2(0.5, 0.5), _Add_888a259bce586985b790e81a5145084b_Out_2);
            float4 _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_888a259bce586985b790e81a5145084b_Out_2));
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_R_4 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.r;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_G_5 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.g;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_B_6 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.b;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.a;
            float _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2;
            Unity_Minimum_float(_SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7, _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7, _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2);
            float _Absolute_20087090b3600b8d97155e3798d64011_Out_1;
            Unity_Absolute_float(_Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2, _Absolute_20087090b3600b8d97155e3798d64011_Out_1);
            float _Property_7a2d696ef1d8028a966365137be9d25e_Out_0 = _EmissionNoisePower;
            float _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2;
            Unity_Power_float(_Absolute_20087090b3600b8d97155e3798d64011_Out_1, _Property_7a2d696ef1d8028a966365137be9d25e_Out_0, _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2);
            float _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2;
            Unity_Multiply_float_float(_Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2, 20, _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2);
            float _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3;
            Unity_Clamp_float(_Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2, 0.05, 1.2, _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3);
            float4 _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2;
            Unity_Multiply_float4_float4(_Multiply_5933ed525fc7068893db7db94870134a_Out_2, (_Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3.xxxx), _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2);
            float4 _Property_c805fa28a9c59b8e93d45497d3768156_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            UnityTexture2D _Property_7c7049e15fdff386b535790d8666f609_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.uv0 = IN.uv0;
            float4 _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_7c7049e15fdff386b535790d8666f609_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2);
            float _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2.xyz), _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0, _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2);
            UnityTexture2D _Property_fa9f7890b20ad481a92543c04b237bde_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.uv0 = IN.uv0;
            float4 _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_fa9f7890b20ad481a92543c04b237bde_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2);
            float _Property_8c31443b776727819a663c7ddce79064_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2.xyz), _Property_8c31443b776727819a663c7ddce79064_Out_0, _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2;
            float4 _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1);
            float3 _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1);
            float _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2;
            Unity_DotProduct_float3((_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz), _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1, _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2);
            float _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1;
            Unity_Saturate_float(_DotProduct_21807a3955457c888958cf9b7de210fc_Out_2, _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1);
            float _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1;
            Unity_OneMinus_float(_Saturate_5e97c86e74edb580abca053af090c6f7_Out_1, _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1);
            float _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1;
            Unity_Absolute_float(_OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1, _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1);
            float _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2;
            Unity_Power_float(_Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1, 10, _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2);
            float4 _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2;
            Unity_Multiply_float4_float4(_Property_c805fa28a9c59b8e93d45497d3768156_Out_0, (_Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2.xxxx), _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2);
            float _Property_23902821969b7a8aabcaa150279da760_Out_0 = _RimLightPower;
            float4 _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2;
            Unity_Multiply_float4_float4(_Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2, (_Property_23902821969b7a8aabcaa150279da760_Out_0.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2);
            float4 _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2);
            float4 _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2;
            Unity_Add_float4(_Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2, _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2);
            float4 _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3;
            Unity_Clamp_float4(_Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, float4(0, 0, 0, 0), _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3);
            float _Split_579bec1940604a80b8bf85fbd157877e_R_1 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[0];
            float _Split_579bec1940604a80b8bf85fbd157877e_G_2 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[1];
            float _Split_579bec1940604a80b8bf85fbd157877e_B_3 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[2];
            float _Split_579bec1940604a80b8bf85fbd157877e_A_4 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[3];
            float _Property_afd0f3561038ef8487e614f350d364dd_Out_0 = _BaseMetallic;
            float _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2;
            Unity_Multiply_float_float(_Split_91a015dea8acd38b904ba0935328a5bc_R_1, _Property_afd0f3561038ef8487e614f350d364dd_Out_0, _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2);
            float _Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0 = _BaseAORemapMin;
            float _Property_9d07c7a09a85da809f1d4661406e0888_Out_0 = _BaseAORemapMax;
            float2 _Vector2_10162c774de2a7838426399cfe98be82_Out_0 = float2(_Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0, _Property_9d07c7a09a85da809f1d4661406e0888_Out_0);
            float _Remap_c45fda31db668c81a9e89e11297ec993_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_G_2, float2 (0, 1), _Vector2_10162c774de2a7838426399cfe98be82_Out_0, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3);
            float3 _Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0 = float3(_Multiply_154e0f89b19c8e86926222afb13691e3_Out_2, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0 = _Base2Metallic;
            float _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2;
            Unity_Multiply_float_float(_Split_83ec66b648ab6c84848b42686c256cd7_R_1, _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0, _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2);
            float _Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0 = _Base2AORemapMin;
            float _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0 = _Base2AORemapMax;
            float2 _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0 = float2(_Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0, _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0);
            float _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_G_2, float2 (0, 1), _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3);
            float3 _Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0 = float3(_Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_a5073733c462898f8bf5761db76cd246;
            float4 _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_a5073733c462898f8bf5761db76cd246, _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1);
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[0];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[1];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_B_3 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[2];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_A_4 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[3];
            surface.BaseColor = (_HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1.xyz);
            surface.Emission = (_Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_579bec1940604a80b8bf85fbd157877e_A_4;
            surface.Occlusion = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2;
            surface.NormalTS = (_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz);
            surface.Metallic = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1;
            {
                surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
            }
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.WorldSpaceNormal =                           TransformObjectToWorldNormal(input.normalOS);
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(TransformObjectToWorld(input.positionOS).xyz);
            output.uv0 =                                        input.uv0;
            output.VertexColor =                                input.color;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord1 =                  input.texCoord1;
            output.texCoord2 =                  input.texCoord2;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            #ifdef TESSELLATION_ON
        
        float GetTessellationFactor(AttributesMesh input)
        {
            float tessellationFactor = 1.0;
        
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            tessellationFactor = vertexDescription.TessellationFactor;
        
            return tessellationFactor;
        }
        
        float GetMaxDisplacement()
        {
            return _TessellationMaxDisplacement;
        }
        
        // TODO: We should generate this struct like all the other varying struct
        VaryingsMeshToDS InterpolateWithBaryCoordsMeshToDS(VaryingsMeshToDS input0, VaryingsMeshToDS input1, VaryingsMeshToDS input2, float3 baryCoords)
        {
            VaryingsMeshToDS output;
        
            UNITY_TRANSFER_INSTANCE_ID(input0, output);
        
            TESSELLATION_INTERPOLATE_BARY(positionRWS, baryCoords);
            output.positionPredisplacementRWS = output.positionRWS;
            TESSELLATION_INTERPOLATE_BARY(normalWS, baryCoords);
        #ifdef VARYINGS_DS_NEED_TANGENT
            // This will interpolate the sign but should be ok in practice as we may expect a triangle to have same sign (? TO CHECK)
            TESSELLATION_INTERPOLATE_BARY(tangentWS, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD0
            TESSELLATION_INTERPOLATE_BARY(texCoord0, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD1
            TESSELLATION_INTERPOLATE_BARY(texCoord1, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD2
            TESSELLATION_INTERPOLATE_BARY(texCoord2, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD3
            TESSELLATION_INTERPOLATE_BARY(texCoord3, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_COLOR
            TESSELLATION_INTERPOLATE_BARY(color, baryCoords);
        #endif
        
            // Pass-Through for custom interpolator
            
        
            return output;
        }
        
        VertexDescriptionInputs VaryingsMeshToDSToVertexDescriptionInputs(VaryingsMeshToDS input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal = TransformWorldToObjectNormal(input.normalWS);
            output.WorldSpaceNormal = input.normalWS;
            output.ObjectSpaceTangent = TransformWorldToObjectDir(input.tangentWS.xyz);
            output.ObjectSpacePosition = TransformWorldToObject(input.positionRWS);
            output.AbsoluteWorldSpacePosition = GetAbsolutePositionWS(input.positionRWS.xyz);
            output.uv0 = input.texCoord0;
            output.VertexColor = input.color;
        
            return output;
        }
        
        #ifdef HAVE_TESSELLATION_MODIFICATION
        // tessellationFactors
        // x - 1->2 edge
        // y - 2->0 edge
        // z - 0->1 edge
        // w - inside tessellation factor
        VaryingsMeshToDS ApplyTessellationModification(VaryingsMeshToDS input, float3 timeParameters)
        {
            // HACK: As there is no specific tessellation stage for now in shadergraph, we reuse the vertex description mechanism.
            // It mean we store TessellationFactor inside vertex description causing extra read on both vertex and hull stage, but unusued paramater are optimize out by the shader compiler, so no impact.
            VertexDescriptionInputs vertexDescriptionInputs = VaryingsMeshToDSToVertexDescriptionInputs(input);
            // Override time paramters with used one (This is required to correctly handle motion vector for tessellation animation based on time)
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            input.positionRWS += vertexDescription.TessellationDisplacement;
        
            return input;
        }
        
        #endif
        
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
        
        // This will evaluate the custom interpolator and update the varying structure
        void VertMeshTesselationCustomInterpolation(VaryingsMeshToDS input, inout VaryingsMeshToPS output)
        {
            
        }
        
        #endif // USE_CUSTOMINTERP_SUBSTRUCT
        
        #endif // TESSELLATION_ON
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassGBuffer.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "Forward"
            Tags
            {
                "LightMode" = "Forward"
            }
        
            // Render State
            Cull [_CullModeForward]
        Blend [_SrcBlend] [_DstBlend], [_AlphaSrcBlend] [_AlphaDstBlend]
        ZTest [_ZTestDepthEqualForOpaque]
        ZWrite [_ZWrite]
        ColorMask [_ColorMaskTransparentVelOne] 1
        ColorMask [_ColorMaskTransparentVelTwo] 2
        Stencil
        {
        WriteMask [_StencilWriteMask]
        Ref [_StencilRef]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma target 5.0
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma hull Hull
        #pragma domain Domain
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_domain _ _TESSELLATION_PHONG
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
        #pragma multi_compile_raytracing _ SHADOWS_SHADOWMASK
        #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
        #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
        #pragma multi_compile_fragment SHADOW_LOW SHADOW_MEDIUM SHADOW_HIGH SHADOW_VERY_HIGH
        #pragma multi_compile_fragment SCREEN_SPACE_SHADOWS_OFF SCREEN_SPACE_SHADOWS_ON
        #pragma multi_compile_fragment USE_FPTL_LIGHTLIST USE_CLUSTERED_LIGHTLIST
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_FORWARD
        #define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING 1
        #define HAS_LIGHTLOOP 1
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SHADER_LIT 1
        #define TESSELLATION_ON 1
        #define HAVE_TESSELLATION_MODIFICATION 1
        
            #ifdef TESSELLATION_ON
            // World and normal are always available
                #define VARYINGS_DS_NEED_TANGENT
            #define VARYINGS_DS_NEED_TEXCOORD0
            #define VARYINGS_DS_NEED_TEXCOORD1
            #define VARYINGS_DS_NEED_TEXCOORD2
                #define VARYINGS_DS_NEED_COLOR
        	#endif
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _Tesselation_Factor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float2 _NoiseTiling;
        float4 _Noise_TexelSize;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _Tess_Height_1_Min;
        float _Tess_Height_2_Min;
        float _Tess_Height_1_Max;
        float _Tess_Height_2_Max;
        float _Tess_Height_1_Offset;
        float _Tess_Height_2_Offset;
        float _Tess_Height_Blend_Transition;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _TessellationFactorMinDistance;
        float _TessellationFactorMaxDistance;
        float _TessellationFactorTriangleSize;
        float _TessellationShapeFactor;
        float _TessellationBackFaceCullEpsilon;
        float _TessellationMaxDisplacement;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv1 : TEXCOORD1;
             float4 uv2 : TEXCOORD2;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToDS
        {
             float3 positionRWS;
             float3 positionPredisplacementRWS;
             float tessellationFactor;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 WorldSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        struct PackedVaryingsMeshToDS
        {
             float4 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float3 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
             float4 interp6 : INTERP6;
             float4 interp7 : INTERP7;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
             float4 interp6 : INTERP6;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToDS PackVaryingsMeshToDS (VaryingsMeshToDS input)
        {
            PackedVaryingsMeshToDS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToDS, output);
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.positionPredisplacementRWS;
            output.interp0.w =  input.tessellationFactor;
            output.interp2.xyz =  input.normalWS;
            output.interp3.xyzw =  input.tangentWS;
            output.interp4.xyzw =  input.texCoord0;
            output.interp5.xyzw =  input.texCoord1;
            output.interp6.xyzw =  input.texCoord2;
            output.interp7.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToDS UnpackVaryingsMeshToDS (PackedVaryingsMeshToDS input)
        {
            VaryingsMeshToDS output;
            output.positionRWS = input.interp0.xyz;
            output.positionPredisplacementRWS = input.interp1.xyz;
            output.tessellationFactor = input.interp0.w;
            output.normalWS = input.interp2.xyz;
            output.tangentWS = input.interp3.xyzw;
            output.texCoord0 = input.interp4.xyzw;
            output.texCoord1 = input.interp5.xyzw;
            output.texCoord2 = input.interp6.xyzw;
            output.color = input.interp7.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.texCoord1;
            output.interp5.xyzw =  input.texCoord2;
            output.interp6.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.texCoord1 = input.interp4.xyzw;
            output.texCoord2 = input.interp5.xyzw;
            output.color = input.interp6.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
          float4 _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0 = float4(0.0f, 0.0f, 0.0f, 1.0f);
        #else
          float4 _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0 = SAMPLE_TEXTURE2D_LOD(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3), 0);
        #endif
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_R_5 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.r;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_G_6 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.g;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_B_7 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.b;
        float _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_A_8 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0.a;
        XZ_2 = _SampleTexture2DLOD_6fb8cb3cf11947c7a8b87cf6363933ef_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A * B;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float TessellationFactor;
            float3 TessellationDisplacement;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            float _Property_4ce4eaefdd25487c81be7b77fded0e8e_Out_0 = _Tesselation_Factor;
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd;
            _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd.uv0 = IN.uv0;
            float4 _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2;
            SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd, _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2);
            float _Split_44fceac2f3ee418191b4553af6521c38_R_1 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[0];
            float _Split_44fceac2f3ee418191b4553af6521c38_G_2 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[1];
            float _Split_44fceac2f3ee418191b4553af6521c38_B_3 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[2];
            float _Split_44fceac2f3ee418191b4553af6521c38_A_4 = _PlanarNMLod_4e6303fa76724795a6879efcca9ea4dd_XZ_2[3];
            float _Property_5cf4fd27daa14e02beb11bde8618dc1e_Out_0 = _Tess_Height_1_Min;
            float _Property_a9fd3adbddb24ff0b202f15d317d6251_Out_0 = _Tess_Height_1_Max;
            float2 _Vector2_4b26dbfd9f4e41ae9fc52ffe3b6c2743_Out_0 = float2(_Property_5cf4fd27daa14e02beb11bde8618dc1e_Out_0, _Property_a9fd3adbddb24ff0b202f15d317d6251_Out_0);
            float _Property_454bc81a8b1d4b91a1cdf06a95389fb8_Out_0 = _Tess_Height_1_Offset;
            float2 _Add_2e98ee41829843038c7084b5bc960d61_Out_2;
            Unity_Add_float2(_Vector2_4b26dbfd9f4e41ae9fc52ffe3b6c2743_Out_0, (_Property_454bc81a8b1d4b91a1cdf06a95389fb8_Out_0.xx), _Add_2e98ee41829843038c7084b5bc960d61_Out_2);
            float _Remap_027c62ebc97a45008874341269c98bdf_Out_3;
            Unity_Remap_float(_Split_44fceac2f3ee418191b4553af6521c38_B_3, float2 (0, 1), _Add_2e98ee41829843038c7084b5bc960d61_Out_2, _Remap_027c62ebc97a45008874341269c98bdf_Out_3);
            float _Property_22defdb92c8c4d2d97399b5fa41a900f_Out_0 = _HeightMin;
            float _Property_4de33eacfaf44d23b70a35429cce4ab5_Out_0 = _HeightMax;
            float2 _Vector2_e0dfbebd413e42a096904d5153c239d6_Out_0 = float2(_Property_22defdb92c8c4d2d97399b5fa41a900f_Out_0, _Property_4de33eacfaf44d23b70a35429cce4ab5_Out_0);
            float _Property_5f63683b3cf342e784b5d7ba224281eb_Out_0 = _HeightOffset;
            float2 _Add_1232537e8b9e4b739b5ebf05db959350_Out_2;
            Unity_Add_float2(_Vector2_e0dfbebd413e42a096904d5153c239d6_Out_0, (_Property_5f63683b3cf342e784b5d7ba224281eb_Out_0.xx), _Add_1232537e8b9e4b739b5ebf05db959350_Out_2);
            float _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3;
            Unity_Remap_float(_Split_44fceac2f3ee418191b4553af6521c38_B_3, float2 (0, 1), _Add_1232537e8b9e4b739b5ebf05db959350_Out_2, _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3;
            Unity_Clamp_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, 0, 1, _Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3);
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
              float4 _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0 = float4(0.0f, 0.0f, 0.0f, 1.0f);
            #else
              float4 _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0 = SAMPLE_TEXTURE2D_LOD(_Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.tex, _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.samplerstate, _Property_b05d8abd9d7642f4bbfc0b1292ae313e_Out_0.GetTransformedUV(IN.uv0.xy), 0);
            #endif
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.r;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_G_6 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.g;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_B_7 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.b;
            float _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_A_8 = _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_RGBA_0.a;
            float _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1;
            Unity_OneMinus_float(_SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5, _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1);
            float _Branch_5983f2479e684f37be29feca5608cf23_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_35bfab9de02f4d06b9ce78f0951f9061_Out_1, _SampleTexture2DLOD_14f1afbad9404eb69440e1abb3ae49ec_R_5, _Branch_5983f2479e684f37be29feca5608cf23_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1;
            _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1.uv0 = IN.uv0;
            float4 _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2;
            SG_PlanarNMLod_9ee0e43e3ae06244a8ae7f6eb1166bfb_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1, _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2);
            float _Split_b681fe64892d4ccb828e0f6e32843516_R_1 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[0];
            float _Split_b681fe64892d4ccb828e0f6e32843516_G_2 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[1];
            float _Split_b681fe64892d4ccb828e0f6e32843516_B_3 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[2];
            float _Split_b681fe64892d4ccb828e0f6e32843516_A_4 = _PlanarNMLod_75d67bbfd55f4605828df01e64f319e1_XZ_2[3];
            float _Property_dfc13ef2f2dc4782800213462a60264e_Out_0 = _Tess_Height_2_Min;
            float _Property_a7a0d4e5a55541c496131ce65673dc91_Out_0 = _Tess_Height_2_Max;
            float2 _Vector2_680472357da14269b3fcb86a2574fd4e_Out_0 = float2(_Property_dfc13ef2f2dc4782800213462a60264e_Out_0, _Property_a7a0d4e5a55541c496131ce65673dc91_Out_0);
            float _Property_d4c81546338c4021943305435fad6d47_Out_0 = _Tess_Height_2_Offset;
            float2 _Add_685eacdaa4e14198a337eb5f87657041_Out_2;
            Unity_Add_float2(_Vector2_680472357da14269b3fcb86a2574fd4e_Out_0, (_Property_d4c81546338c4021943305435fad6d47_Out_0.xx), _Add_685eacdaa4e14198a337eb5f87657041_Out_2);
            float _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3;
            Unity_Remap_float(_Split_b681fe64892d4ccb828e0f6e32843516_B_3, float2 (0, 1), _Add_685eacdaa4e14198a337eb5f87657041_Out_2, _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3);
            float _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2;
            Unity_Multiply_float_float(_Branch_5983f2479e684f37be29feca5608cf23_Out_3, _Remap_ae77ec2130d84d20a0682e3e66e3395f_Out_3, _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2);
            float _Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2;
            Unity_Multiply_float_float(_Clamp_0092d22cf3f645ebbdbd8b36cdbb2ba9_Out_3, _Multiply_4a5ab2abe0b24337b2ed5efa817650cd_Out_2, _Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2);
            float _Property_64ab9d23c014488e89cccc873cdd95d7_Out_0 = _HeightMin2;
            float _Property_c48827db27c44115952bbfdea9c70def_Out_0 = _HeightMax2;
            float2 _Vector2_ce60d322af6d4a1f9d3d0c93c9a597bb_Out_0 = float2(_Property_64ab9d23c014488e89cccc873cdd95d7_Out_0, _Property_c48827db27c44115952bbfdea9c70def_Out_0);
            float _Property_2d4e482f9b1749e69d85da504f5cbb13_Out_0 = _HeightOffset2;
            float2 _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2;
            Unity_Add_float2(_Vector2_ce60d322af6d4a1f9d3d0c93c9a597bb_Out_0, (_Property_2d4e482f9b1749e69d85da504f5cbb13_Out_0.xx), _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2);
            float _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3;
            Unity_Remap_float(_Split_b681fe64892d4ccb828e0f6e32843516_B_3, float2 (0, 1), _Add_4347288a1704484ea4aa8f91d8f15dc9_Out_2, _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3);
            float _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2;
            Unity_Multiply_float_float(_Branch_5983f2479e684f37be29feca5608cf23_Out_3, _Remap_76d840f4ccb64f609543cf6d6914ac47_Out_3, _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2);
            float _Multiply_e114c6909b264a3f880f484d068fa807_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_ec86b9fc307140a882b590a5c1d44215_Out_2, _Multiply_e114c6909b264a3f880f484d068fa807_Out_2);
            float _Property_2bf75be176a5486b910544b5f36208a2_Out_0 = _Tess_Height_Blend_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_764bb1d66e274c1c986dcc710a41100e;
            float4 _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Remap_027c62ebc97a45008874341269c98bdf_Out_3.xxxx), _Remap_dfe9354a6a1943abadc3586523dabbb9_Out_3, (_Multiply_d6c90b09afa84b2cae59a44374ee1a41_Out_2.xxxx), _Multiply_e114c6909b264a3f880f484d068fa807_Out_2, _Property_2bf75be176a5486b910544b5f36208a2_Out_0, _HeightBlend4_764bb1d66e274c1c986dcc710a41100e, _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1);
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_R_1 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[0];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_G_2 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[1];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_B_3 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[2];
            float _Split_6bbe578103fb4f3b81bea9f6e7100d4e_A_4 = _HeightBlend4_764bb1d66e274c1c986dcc710a41100e_OutVector4_1[3];
            float3 _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2;
            Unity_Multiply_float3_float3(IN.WorldSpaceNormal, (_Split_6bbe578103fb4f3b81bea9f6e7100d4e_R_1.xxx), _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2);
            description.Position = IN.ObjectSpacePosition;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            description.TessellationFactor = _Property_4ce4eaefdd25487c81be7b77fded0e8e_Out_0;
            description.TessellationDisplacement = _Multiply_a57b926552c9488a9315749a8c8f2af2_Out_2;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
            float4 VTPackedFeedback;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_07d75b1d2628da808a2efb93a1d6219e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.uv0 = IN.uv0;
            float4 _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_07d75b1d2628da808a2efb93a1d6219e_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2);
            float4 _Property_b83097c58639858680bf43881a95b0af_Out_0 = _BaseColor;
            float4 _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2, _Property_b83097c58639858680bf43881a95b0af_Out_0, _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2);
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[0];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[1];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[2];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_A_4 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[3];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_R_1 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[0];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_G_2 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[1];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_B_3 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[2];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_A_4 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[3];
            float _Property_04a7bb2753456b8293b3e46e346b646e_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0 = float2(_Property_04a7bb2753456b8293b3e46e346b646e_Out_0, _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0);
            float _Remap_65ca5af95590f88da70777476b6efd40_Out_3;
            Unity_Remap_float(_Split_6a373913f8b5c587b3b25440e2351a6f_A_4, float2 (0, 1), _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float4 _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4;
            float3 _Combine_d07fea824e695b839a48350dc82f464b_RGB_5;
            float2 _Combine_d07fea824e695b839a48350dc82f464b_RG_6;
            Unity_Combine_float(_Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1, _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2, _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3, _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Combine_d07fea824e695b839a48350dc82f464b_RGB_5, _Combine_d07fea824e695b839a48350dc82f464b_RG_6);
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_4245c3b264047180b5c90a697d6cb278;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.uv0 = IN.uv0;
            float4 _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_4245c3b264047180b5c90a697d6cb278, _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2);
            float _Split_91a015dea8acd38b904ba0935328a5bc_R_1 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[0];
            float _Split_91a015dea8acd38b904ba0935328a5bc_G_2 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[1];
            float _Split_91a015dea8acd38b904ba0935328a5bc_B_3 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[2];
            float _Split_91a015dea8acd38b904ba0935328a5bc_A_4 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[3];
            float _Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0 = _HeightMin;
            float _Property_9df7a44c8225168683743ac60c0c3c34_Out_0 = _HeightMax;
            float2 _Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0 = float2(_Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0, _Property_9df7a44c8225168683743ac60c0c3c34_Out_0);
            float _Property_29ca14fd0b712983a38d63d2dd326e96_Out_0 = _HeightOffset;
            float2 _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2;
            Unity_Add_float2(_Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0, (_Property_29ca14fd0b712983a38d63d2dd326e96_Out_0.xx), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2);
            float _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_B_3, float2 (0, 1), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3);
            UnityTexture2D _Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.uv0 = IN.uv0;
            float4 _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2);
            float4 _Property_3561b11b899bda8e855826445cf628aa_Out_0 = _Base2Color;
            float4 _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2, _Property_3561b11b899bda8e855826445cf628aa_Out_0, _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2);
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[0];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[1];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[2];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_A_4 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[3];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_R_1 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[0];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_G_2 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[1];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_B_3 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[2];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[3];
            float _Property_159cd47513de4f85a992da1f43f77c51_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0 = float2(_Property_159cd47513de4f85a992da1f43f77c51_Out_0, _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0);
            float _Remap_1214803bb0f7c387adc088fb938f7971_Out_3;
            Unity_Remap_float(_Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4, float2 (0, 1), _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3);
            float4 _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4;
            float3 _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5;
            float2 _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6;
            Unity_Combine_float(_Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1, _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2, _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5, _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.tex, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.samplerstate, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.r;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_G_5 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.g;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_B_6 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.b;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_A_7 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.a;
            float _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1);
            float _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1, _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d5657f470f05ef839e4c257a20ace8cb;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.uv0 = IN.uv0;
            float4 _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2);
            float _Split_83ec66b648ab6c84848b42686c256cd7_R_1 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[0];
            float _Split_83ec66b648ab6c84848b42686c256cd7_G_2 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[1];
            float _Split_83ec66b648ab6c84848b42686c256cd7_B_3 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[2];
            float _Split_83ec66b648ab6c84848b42686c256cd7_A_4 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[3];
            float _Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0 = _HeightMin2;
            float _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0 = _HeightMax2;
            float2 _Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0 = float2(_Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0, _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0);
            float _Property_151ae2702b614585af2000f0a812960f_Out_0 = _HeightOffset2;
            float2 _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2;
            Unity_Add_float2(_Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0, (_Property_151ae2702b614585af2000f0a812960f_Out_0.xx), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2);
            float _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_B_3, float2 (0, 1), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3);
            float _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2;
            Unity_Multiply_float_float(_Branch_af0c5e511241ce8eae748ae487df50fa_Out_3, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2);
            float _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2);
            float _Property_818c8af4b930138e81034c886614171d_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8;
            float4 _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1);
            float _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3;
            Unity_Lerp_float(0, _Split_91a015dea8acd38b904ba0935328a5bc_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3);
            float _Property_956d1a93cb804081b21a76fd0c75a806_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2;
            Unity_Multiply_float_float(_Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3, _Property_956d1a93cb804081b21a76fd0c75a806_Out_0, _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2);
            float _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1;
            Unity_Absolute_float(_Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2, _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1);
            float _Property_96173fa32f95148fa9d2a017748d5235_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_d81ebc6955897c87b8fb462f713aae50_Out_2;
            Unity_Power_float(_Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1, _Property_96173fa32f95148fa9d2a017748d5235_Out_0, _Power_d81ebc6955897c87b8fb462f713aae50_Out_2);
            float _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3;
            Unity_Lerp_float(0, _Split_83ec66b648ab6c84848b42686c256cd7_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3);
            float _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2;
            Unity_Multiply_float_float(_Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3, _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0, _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2);
            float _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1;
            Unity_Absolute_float(_Multiply_b761b264ce901b81b32b974d83993b3d_Out_2, _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1);
            float _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2;
            Unity_Power_float(_Absolute_2511aaf2b812e58b93d44253984de16c_Out_1, _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2);
            float _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3;
            Unity_Lerp_float(_Power_d81ebc6955897c87b8fb462f713aae50_Out_2, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3);
            float4 _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_5933ed525fc7068893db7db94870134a_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0, _Multiply_5933ed525fc7068893db7db94870134a_Out_2);
            UnityTexture2D _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0 = IN.uv0;
            float2 _Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0 = _NoiseSpeed;
            float2 _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2;
            Unity_Multiply_float2_float2(_Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0, (IN.TimeParameters.x.xx), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2);
            float2 _Add_bc688882d8fee68487424542b1a69952_Out_2;
            Unity_Add_float2((_UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0.xy), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2, _Add_bc688882d8fee68487424542b1a69952_Out_2);
            float4 _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_bc688882d8fee68487424542b1a69952_Out_2));
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_R_4 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.r;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_G_5 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.g;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_B_6 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.b;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.a;
            float2 _Multiply_d613a21978306a858470588fdf147e8f_Out_2;
            Unity_Multiply_float2_float2(_Add_bc688882d8fee68487424542b1a69952_Out_2, float2(-1.2, -0.9), _Multiply_d613a21978306a858470588fdf147e8f_Out_2);
            float2 _Add_888a259bce586985b790e81a5145084b_Out_2;
            Unity_Add_float2(_Multiply_d613a21978306a858470588fdf147e8f_Out_2, float2(0.5, 0.5), _Add_888a259bce586985b790e81a5145084b_Out_2);
            float4 _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_888a259bce586985b790e81a5145084b_Out_2));
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_R_4 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.r;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_G_5 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.g;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_B_6 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.b;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.a;
            float _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2;
            Unity_Minimum_float(_SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7, _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7, _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2);
            float _Absolute_20087090b3600b8d97155e3798d64011_Out_1;
            Unity_Absolute_float(_Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2, _Absolute_20087090b3600b8d97155e3798d64011_Out_1);
            float _Property_7a2d696ef1d8028a966365137be9d25e_Out_0 = _EmissionNoisePower;
            float _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2;
            Unity_Power_float(_Absolute_20087090b3600b8d97155e3798d64011_Out_1, _Property_7a2d696ef1d8028a966365137be9d25e_Out_0, _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2);
            float _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2;
            Unity_Multiply_float_float(_Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2, 20, _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2);
            float _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3;
            Unity_Clamp_float(_Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2, 0.05, 1.2, _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3);
            float4 _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2;
            Unity_Multiply_float4_float4(_Multiply_5933ed525fc7068893db7db94870134a_Out_2, (_Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3.xxxx), _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2);
            float4 _Property_c805fa28a9c59b8e93d45497d3768156_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            UnityTexture2D _Property_7c7049e15fdff386b535790d8666f609_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.uv0 = IN.uv0;
            float4 _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_7c7049e15fdff386b535790d8666f609_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2);
            float _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2.xyz), _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0, _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2);
            UnityTexture2D _Property_fa9f7890b20ad481a92543c04b237bde_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.uv0 = IN.uv0;
            float4 _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_fa9f7890b20ad481a92543c04b237bde_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2);
            float _Property_8c31443b776727819a663c7ddce79064_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2.xyz), _Property_8c31443b776727819a663c7ddce79064_Out_0, _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2;
            float4 _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1);
            float3 _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1);
            float _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2;
            Unity_DotProduct_float3((_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz), _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1, _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2);
            float _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1;
            Unity_Saturate_float(_DotProduct_21807a3955457c888958cf9b7de210fc_Out_2, _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1);
            float _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1;
            Unity_OneMinus_float(_Saturate_5e97c86e74edb580abca053af090c6f7_Out_1, _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1);
            float _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1;
            Unity_Absolute_float(_OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1, _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1);
            float _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2;
            Unity_Power_float(_Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1, 10, _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2);
            float4 _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2;
            Unity_Multiply_float4_float4(_Property_c805fa28a9c59b8e93d45497d3768156_Out_0, (_Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2.xxxx), _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2);
            float _Property_23902821969b7a8aabcaa150279da760_Out_0 = _RimLightPower;
            float4 _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2;
            Unity_Multiply_float4_float4(_Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2, (_Property_23902821969b7a8aabcaa150279da760_Out_0.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2);
            float4 _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2);
            float4 _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2;
            Unity_Add_float4(_Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2, _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2);
            float4 _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3;
            Unity_Clamp_float4(_Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, float4(0, 0, 0, 0), _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3);
            float _Split_579bec1940604a80b8bf85fbd157877e_R_1 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[0];
            float _Split_579bec1940604a80b8bf85fbd157877e_G_2 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[1];
            float _Split_579bec1940604a80b8bf85fbd157877e_B_3 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[2];
            float _Split_579bec1940604a80b8bf85fbd157877e_A_4 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[3];
            float _Property_afd0f3561038ef8487e614f350d364dd_Out_0 = _BaseMetallic;
            float _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2;
            Unity_Multiply_float_float(_Split_91a015dea8acd38b904ba0935328a5bc_R_1, _Property_afd0f3561038ef8487e614f350d364dd_Out_0, _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2);
            float _Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0 = _BaseAORemapMin;
            float _Property_9d07c7a09a85da809f1d4661406e0888_Out_0 = _BaseAORemapMax;
            float2 _Vector2_10162c774de2a7838426399cfe98be82_Out_0 = float2(_Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0, _Property_9d07c7a09a85da809f1d4661406e0888_Out_0);
            float _Remap_c45fda31db668c81a9e89e11297ec993_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_G_2, float2 (0, 1), _Vector2_10162c774de2a7838426399cfe98be82_Out_0, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3);
            float3 _Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0 = float3(_Multiply_154e0f89b19c8e86926222afb13691e3_Out_2, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0 = _Base2Metallic;
            float _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2;
            Unity_Multiply_float_float(_Split_83ec66b648ab6c84848b42686c256cd7_R_1, _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0, _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2);
            float _Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0 = _Base2AORemapMin;
            float _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0 = _Base2AORemapMax;
            float2 _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0 = float2(_Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0, _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0);
            float _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_G_2, float2 (0, 1), _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3);
            float3 _Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0 = float3(_Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_a5073733c462898f8bf5761db76cd246;
            float4 _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_a5073733c462898f8bf5761db76cd246, _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1);
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[0];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[1];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_B_3 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[2];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_A_4 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[3];
            surface.BaseColor = (_HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1.xyz);
            surface.Emission = (_Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_579bec1940604a80b8bf85fbd157877e_A_4;
            surface.Occlusion = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2;
            surface.NormalTS = (_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz);
            surface.Metallic = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1;
            {
                surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
            }
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.WorldSpaceNormal =                           TransformObjectToWorldNormal(input.normalOS);
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(TransformObjectToWorld(input.positionOS).xyz);
            output.uv0 =                                        input.uv0;
            output.VertexColor =                                input.color;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord1 =                  input.texCoord1;
            output.texCoord2 =                  input.texCoord2;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            #ifdef TESSELLATION_ON
        
        float GetTessellationFactor(AttributesMesh input)
        {
            float tessellationFactor = 1.0;
        
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            tessellationFactor = vertexDescription.TessellationFactor;
        
            return tessellationFactor;
        }
        
        float GetMaxDisplacement()
        {
            return _TessellationMaxDisplacement;
        }
        
        // TODO: We should generate this struct like all the other varying struct
        VaryingsMeshToDS InterpolateWithBaryCoordsMeshToDS(VaryingsMeshToDS input0, VaryingsMeshToDS input1, VaryingsMeshToDS input2, float3 baryCoords)
        {
            VaryingsMeshToDS output;
        
            UNITY_TRANSFER_INSTANCE_ID(input0, output);
        
            TESSELLATION_INTERPOLATE_BARY(positionRWS, baryCoords);
            output.positionPredisplacementRWS = output.positionRWS;
            TESSELLATION_INTERPOLATE_BARY(normalWS, baryCoords);
        #ifdef VARYINGS_DS_NEED_TANGENT
            // This will interpolate the sign but should be ok in practice as we may expect a triangle to have same sign (? TO CHECK)
            TESSELLATION_INTERPOLATE_BARY(tangentWS, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD0
            TESSELLATION_INTERPOLATE_BARY(texCoord0, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD1
            TESSELLATION_INTERPOLATE_BARY(texCoord1, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD2
            TESSELLATION_INTERPOLATE_BARY(texCoord2, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD3
            TESSELLATION_INTERPOLATE_BARY(texCoord3, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_COLOR
            TESSELLATION_INTERPOLATE_BARY(color, baryCoords);
        #endif
        
            // Pass-Through for custom interpolator
            
        
            return output;
        }
        
        VertexDescriptionInputs VaryingsMeshToDSToVertexDescriptionInputs(VaryingsMeshToDS input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal = TransformWorldToObjectNormal(input.normalWS);
            output.WorldSpaceNormal = input.normalWS;
            output.ObjectSpaceTangent = TransformWorldToObjectDir(input.tangentWS.xyz);
            output.ObjectSpacePosition = TransformWorldToObject(input.positionRWS);
            output.AbsoluteWorldSpacePosition = GetAbsolutePositionWS(input.positionRWS.xyz);
            output.uv0 = input.texCoord0;
            output.VertexColor = input.color;
        
            return output;
        }
        
        #ifdef HAVE_TESSELLATION_MODIFICATION
        // tessellationFactors
        // x - 1->2 edge
        // y - 2->0 edge
        // z - 0->1 edge
        // w - inside tessellation factor
        VaryingsMeshToDS ApplyTessellationModification(VaryingsMeshToDS input, float3 timeParameters)
        {
            // HACK: As there is no specific tessellation stage for now in shadergraph, we reuse the vertex description mechanism.
            // It mean we store TessellationFactor inside vertex description causing extra read on both vertex and hull stage, but unusued paramater are optimize out by the shader compiler, so no impact.
            VertexDescriptionInputs vertexDescriptionInputs = VaryingsMeshToDSToVertexDescriptionInputs(input);
            // Override time paramters with used one (This is required to correctly handle motion vector for tessellation animation based on time)
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            input.positionRWS += vertexDescription.TessellationDisplacement;
        
            return input;
        }
        
        #endif
        
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
        
        // This will evaluate the custom interpolator and update the varying structure
        void VertMeshTesselationCustomInterpolation(VaryingsMeshToDS input, inout VaryingsMeshToPS output)
        {
            
        }
        
        #endif // USE_CUSTOMINTERP_SUBSTRUCT
        
        #endif // TESSELLATION_ON
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassForward.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
    }
    SubShader
    {
        Tags
        {
            "RenderPipeline"="HDRenderPipeline"
            "RenderType"="HDLitShader"
            "Queue"="Geometry+225"
            "ShaderGraphShader"="true"
            "ShaderGraphTargetId"="HDLitSubTarget"
        }
        Pass
        {
            Name "IndirectDXR"
            Tags
            {
                "LightMode" = "IndirectDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 ps5
        
            // Keywords
            #pragma multi_compile _ MULTI_BOUNCE_INDIRECT
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_INDIRECT
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        #define HAS_LIGHTLOOP 1
        
            #ifdef TESSELLATION_ON
            // World and normal are always available
                #define VARYINGS_DS_NEED_TANGENT
            #define VARYINGS_DS_NEED_TEXCOORD0
            #define VARYINGS_DS_NEED_TEXCOORD1
            #define VARYINGS_DS_NEED_TEXCOORD2
                #define VARYINGS_DS_NEED_COLOR
        	#endif
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _Tesselation_Factor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float2 _NoiseTiling;
        float4 _Noise_TexelSize;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _Tess_Height_1_Min;
        float _Tess_Height_2_Min;
        float _Tess_Height_1_Max;
        float _Tess_Height_2_Max;
        float _Tess_Height_1_Offset;
        float _Tess_Height_2_Offset;
        float _Tess_Height_Blend_Transition;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _TessellationFactorMinDistance;
        float _TessellationFactorMaxDistance;
        float _TessellationFactorTriangleSize;
        float _TessellationShapeFactor;
        float _TessellationBackFaceCullEpsilon;
        float _TessellationMaxDisplacement;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_07d75b1d2628da808a2efb93a1d6219e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.uv0 = IN.uv0;
            float4 _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_07d75b1d2628da808a2efb93a1d6219e_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2);
            float4 _Property_b83097c58639858680bf43881a95b0af_Out_0 = _BaseColor;
            float4 _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2, _Property_b83097c58639858680bf43881a95b0af_Out_0, _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2);
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[0];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[1];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[2];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_A_4 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[3];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_R_1 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[0];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_G_2 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[1];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_B_3 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[2];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_A_4 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[3];
            float _Property_04a7bb2753456b8293b3e46e346b646e_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0 = float2(_Property_04a7bb2753456b8293b3e46e346b646e_Out_0, _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0);
            float _Remap_65ca5af95590f88da70777476b6efd40_Out_3;
            Unity_Remap_float(_Split_6a373913f8b5c587b3b25440e2351a6f_A_4, float2 (0, 1), _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float4 _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4;
            float3 _Combine_d07fea824e695b839a48350dc82f464b_RGB_5;
            float2 _Combine_d07fea824e695b839a48350dc82f464b_RG_6;
            Unity_Combine_float(_Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1, _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2, _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3, _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Combine_d07fea824e695b839a48350dc82f464b_RGB_5, _Combine_d07fea824e695b839a48350dc82f464b_RG_6);
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_4245c3b264047180b5c90a697d6cb278;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.uv0 = IN.uv0;
            float4 _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_4245c3b264047180b5c90a697d6cb278, _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2);
            float _Split_91a015dea8acd38b904ba0935328a5bc_R_1 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[0];
            float _Split_91a015dea8acd38b904ba0935328a5bc_G_2 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[1];
            float _Split_91a015dea8acd38b904ba0935328a5bc_B_3 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[2];
            float _Split_91a015dea8acd38b904ba0935328a5bc_A_4 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[3];
            float _Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0 = _HeightMin;
            float _Property_9df7a44c8225168683743ac60c0c3c34_Out_0 = _HeightMax;
            float2 _Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0 = float2(_Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0, _Property_9df7a44c8225168683743ac60c0c3c34_Out_0);
            float _Property_29ca14fd0b712983a38d63d2dd326e96_Out_0 = _HeightOffset;
            float2 _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2;
            Unity_Add_float2(_Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0, (_Property_29ca14fd0b712983a38d63d2dd326e96_Out_0.xx), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2);
            float _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_B_3, float2 (0, 1), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3);
            UnityTexture2D _Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.uv0 = IN.uv0;
            float4 _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2);
            float4 _Property_3561b11b899bda8e855826445cf628aa_Out_0 = _Base2Color;
            float4 _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2, _Property_3561b11b899bda8e855826445cf628aa_Out_0, _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2);
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[0];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[1];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[2];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_A_4 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[3];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_R_1 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[0];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_G_2 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[1];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_B_3 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[2];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[3];
            float _Property_159cd47513de4f85a992da1f43f77c51_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0 = float2(_Property_159cd47513de4f85a992da1f43f77c51_Out_0, _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0);
            float _Remap_1214803bb0f7c387adc088fb938f7971_Out_3;
            Unity_Remap_float(_Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4, float2 (0, 1), _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3);
            float4 _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4;
            float3 _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5;
            float2 _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6;
            Unity_Combine_float(_Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1, _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2, _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5, _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.tex, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.samplerstate, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.r;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_G_5 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.g;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_B_6 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.b;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_A_7 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.a;
            float _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1);
            float _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1, _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d5657f470f05ef839e4c257a20ace8cb;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.uv0 = IN.uv0;
            float4 _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2);
            float _Split_83ec66b648ab6c84848b42686c256cd7_R_1 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[0];
            float _Split_83ec66b648ab6c84848b42686c256cd7_G_2 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[1];
            float _Split_83ec66b648ab6c84848b42686c256cd7_B_3 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[2];
            float _Split_83ec66b648ab6c84848b42686c256cd7_A_4 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[3];
            float _Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0 = _HeightMin2;
            float _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0 = _HeightMax2;
            float2 _Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0 = float2(_Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0, _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0);
            float _Property_151ae2702b614585af2000f0a812960f_Out_0 = _HeightOffset2;
            float2 _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2;
            Unity_Add_float2(_Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0, (_Property_151ae2702b614585af2000f0a812960f_Out_0.xx), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2);
            float _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_B_3, float2 (0, 1), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3);
            float _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2;
            Unity_Multiply_float_float(_Branch_af0c5e511241ce8eae748ae487df50fa_Out_3, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2);
            float _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2);
            float _Property_818c8af4b930138e81034c886614171d_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8;
            float4 _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1);
            float _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3;
            Unity_Lerp_float(0, _Split_91a015dea8acd38b904ba0935328a5bc_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3);
            float _Property_956d1a93cb804081b21a76fd0c75a806_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2;
            Unity_Multiply_float_float(_Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3, _Property_956d1a93cb804081b21a76fd0c75a806_Out_0, _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2);
            float _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1;
            Unity_Absolute_float(_Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2, _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1);
            float _Property_96173fa32f95148fa9d2a017748d5235_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_d81ebc6955897c87b8fb462f713aae50_Out_2;
            Unity_Power_float(_Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1, _Property_96173fa32f95148fa9d2a017748d5235_Out_0, _Power_d81ebc6955897c87b8fb462f713aae50_Out_2);
            float _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3;
            Unity_Lerp_float(0, _Split_83ec66b648ab6c84848b42686c256cd7_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3);
            float _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2;
            Unity_Multiply_float_float(_Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3, _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0, _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2);
            float _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1;
            Unity_Absolute_float(_Multiply_b761b264ce901b81b32b974d83993b3d_Out_2, _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1);
            float _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2;
            Unity_Power_float(_Absolute_2511aaf2b812e58b93d44253984de16c_Out_1, _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2);
            float _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3;
            Unity_Lerp_float(_Power_d81ebc6955897c87b8fb462f713aae50_Out_2, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3);
            float4 _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_5933ed525fc7068893db7db94870134a_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0, _Multiply_5933ed525fc7068893db7db94870134a_Out_2);
            UnityTexture2D _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0 = IN.uv0;
            float2 _Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0 = _NoiseSpeed;
            float2 _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2;
            Unity_Multiply_float2_float2(_Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0, (IN.TimeParameters.x.xx), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2);
            float2 _Add_bc688882d8fee68487424542b1a69952_Out_2;
            Unity_Add_float2((_UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0.xy), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2, _Add_bc688882d8fee68487424542b1a69952_Out_2);
            float4 _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_bc688882d8fee68487424542b1a69952_Out_2));
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_R_4 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.r;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_G_5 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.g;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_B_6 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.b;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.a;
            float2 _Multiply_d613a21978306a858470588fdf147e8f_Out_2;
            Unity_Multiply_float2_float2(_Add_bc688882d8fee68487424542b1a69952_Out_2, float2(-1.2, -0.9), _Multiply_d613a21978306a858470588fdf147e8f_Out_2);
            float2 _Add_888a259bce586985b790e81a5145084b_Out_2;
            Unity_Add_float2(_Multiply_d613a21978306a858470588fdf147e8f_Out_2, float2(0.5, 0.5), _Add_888a259bce586985b790e81a5145084b_Out_2);
            float4 _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_888a259bce586985b790e81a5145084b_Out_2));
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_R_4 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.r;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_G_5 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.g;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_B_6 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.b;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.a;
            float _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2;
            Unity_Minimum_float(_SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7, _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7, _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2);
            float _Absolute_20087090b3600b8d97155e3798d64011_Out_1;
            Unity_Absolute_float(_Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2, _Absolute_20087090b3600b8d97155e3798d64011_Out_1);
            float _Property_7a2d696ef1d8028a966365137be9d25e_Out_0 = _EmissionNoisePower;
            float _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2;
            Unity_Power_float(_Absolute_20087090b3600b8d97155e3798d64011_Out_1, _Property_7a2d696ef1d8028a966365137be9d25e_Out_0, _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2);
            float _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2;
            Unity_Multiply_float_float(_Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2, 20, _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2);
            float _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3;
            Unity_Clamp_float(_Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2, 0.05, 1.2, _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3);
            float4 _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2;
            Unity_Multiply_float4_float4(_Multiply_5933ed525fc7068893db7db94870134a_Out_2, (_Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3.xxxx), _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2);
            float4 _Property_c805fa28a9c59b8e93d45497d3768156_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            UnityTexture2D _Property_7c7049e15fdff386b535790d8666f609_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.uv0 = IN.uv0;
            float4 _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_7c7049e15fdff386b535790d8666f609_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2);
            float _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2.xyz), _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0, _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2);
            UnityTexture2D _Property_fa9f7890b20ad481a92543c04b237bde_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.uv0 = IN.uv0;
            float4 _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_fa9f7890b20ad481a92543c04b237bde_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2);
            float _Property_8c31443b776727819a663c7ddce79064_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2.xyz), _Property_8c31443b776727819a663c7ddce79064_Out_0, _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2;
            float4 _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1);
            float3 _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1);
            float _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2;
            Unity_DotProduct_float3((_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz), _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1, _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2);
            float _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1;
            Unity_Saturate_float(_DotProduct_21807a3955457c888958cf9b7de210fc_Out_2, _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1);
            float _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1;
            Unity_OneMinus_float(_Saturate_5e97c86e74edb580abca053af090c6f7_Out_1, _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1);
            float _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1;
            Unity_Absolute_float(_OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1, _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1);
            float _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2;
            Unity_Power_float(_Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1, 10, _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2);
            float4 _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2;
            Unity_Multiply_float4_float4(_Property_c805fa28a9c59b8e93d45497d3768156_Out_0, (_Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2.xxxx), _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2);
            float _Property_23902821969b7a8aabcaa150279da760_Out_0 = _RimLightPower;
            float4 _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2;
            Unity_Multiply_float4_float4(_Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2, (_Property_23902821969b7a8aabcaa150279da760_Out_0.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2);
            float4 _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2);
            float4 _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2;
            Unity_Add_float4(_Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2, _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2);
            float4 _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3;
            Unity_Clamp_float4(_Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, float4(0, 0, 0, 0), _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3);
            float _Split_579bec1940604a80b8bf85fbd157877e_R_1 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[0];
            float _Split_579bec1940604a80b8bf85fbd157877e_G_2 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[1];
            float _Split_579bec1940604a80b8bf85fbd157877e_B_3 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[2];
            float _Split_579bec1940604a80b8bf85fbd157877e_A_4 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[3];
            float _Property_afd0f3561038ef8487e614f350d364dd_Out_0 = _BaseMetallic;
            float _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2;
            Unity_Multiply_float_float(_Split_91a015dea8acd38b904ba0935328a5bc_R_1, _Property_afd0f3561038ef8487e614f350d364dd_Out_0, _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2);
            float _Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0 = _BaseAORemapMin;
            float _Property_9d07c7a09a85da809f1d4661406e0888_Out_0 = _BaseAORemapMax;
            float2 _Vector2_10162c774de2a7838426399cfe98be82_Out_0 = float2(_Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0, _Property_9d07c7a09a85da809f1d4661406e0888_Out_0);
            float _Remap_c45fda31db668c81a9e89e11297ec993_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_G_2, float2 (0, 1), _Vector2_10162c774de2a7838426399cfe98be82_Out_0, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3);
            float3 _Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0 = float3(_Multiply_154e0f89b19c8e86926222afb13691e3_Out_2, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0 = _Base2Metallic;
            float _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2;
            Unity_Multiply_float_float(_Split_83ec66b648ab6c84848b42686c256cd7_R_1, _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0, _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2);
            float _Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0 = _Base2AORemapMin;
            float _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0 = _Base2AORemapMax;
            float2 _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0 = float2(_Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0, _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0);
            float _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_G_2, float2 (0, 1), _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3);
            float3 _Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0 = float3(_Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_a5073733c462898f8bf5761db76cd246;
            float4 _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_a5073733c462898f8bf5761db76cd246, _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1);
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[0];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[1];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_B_3 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[2];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_A_4 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[3];
            surface.BaseColor = (_HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1.xyz);
            surface.Emission = (_Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_579bec1940604a80b8bf85fbd157877e_A_4;
            surface.Occlusion = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2;
            surface.NormalTS = (_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz);
            surface.Metallic = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            #ifdef TESSELLATION_ON
        
        float GetTessellationFactor(AttributesMesh input)
        {
            float tessellationFactor = 1.0;
        
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            tessellationFactor = vertexDescription.TessellationFactor;
        
            return tessellationFactor;
        }
        
        float GetMaxDisplacement()
        {
            return _TessellationMaxDisplacement;
        }
        
        // TODO: We should generate this struct like all the other varying struct
        VaryingsMeshToDS InterpolateWithBaryCoordsMeshToDS(VaryingsMeshToDS input0, VaryingsMeshToDS input1, VaryingsMeshToDS input2, float3 baryCoords)
        {
            VaryingsMeshToDS output;
        
            UNITY_TRANSFER_INSTANCE_ID(input0, output);
        
            TESSELLATION_INTERPOLATE_BARY(positionRWS, baryCoords);
            output.positionPredisplacementRWS = output.positionRWS;
            TESSELLATION_INTERPOLATE_BARY(normalWS, baryCoords);
        #ifdef VARYINGS_DS_NEED_TANGENT
            // This will interpolate the sign but should be ok in practice as we may expect a triangle to have same sign (? TO CHECK)
            TESSELLATION_INTERPOLATE_BARY(tangentWS, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD0
            TESSELLATION_INTERPOLATE_BARY(texCoord0, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD1
            TESSELLATION_INTERPOLATE_BARY(texCoord1, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD2
            TESSELLATION_INTERPOLATE_BARY(texCoord2, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD3
            TESSELLATION_INTERPOLATE_BARY(texCoord3, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_COLOR
            TESSELLATION_INTERPOLATE_BARY(color, baryCoords);
        #endif
        
            // Pass-Through for custom interpolator
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorInterpolateWithBaryCoordsMeshToDS' */
        
            return output;
        }
        
        VertexDescriptionInputs VaryingsMeshToDSToVertexDescriptionInputs(VaryingsMeshToDS input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        
            return output;
        }
        
        #ifdef HAVE_TESSELLATION_MODIFICATION
        // tessellationFactors
        // x - 1->2 edge
        // y - 2->0 edge
        // z - 0->1 edge
        // w - inside tessellation factor
        VaryingsMeshToDS ApplyTessellationModification(VaryingsMeshToDS input, float3 timeParameters)
        {
            // HACK: As there is no specific tessellation stage for now in shadergraph, we reuse the vertex description mechanism.
            // It mean we store TessellationFactor inside vertex description causing extra read on both vertex and hull stage, but unusued paramater are optimize out by the shader compiler, so no impact.
            VertexDescriptionInputs vertexDescriptionInputs = VaryingsMeshToDSToVertexDescriptionInputs(input);
            // Override time paramters with used one (This is required to correctly handle motion vector for tessellation animation based on time)
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            input.positionRWS += vertexDescription.TessellationDisplacement;
        
            return input;
        }
        
        #endif
        
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
        
        // This will evaluate the custom interpolator and update the varying structure
        void VertMeshTesselationCustomInterpolation(VaryingsMeshToDS input, inout VaryingsMeshToPS output)
        {
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVertMeshTesselationCustomInterpolation' */
        }
        
        #endif // USE_CUSTOMINTERP_SUBSTRUCT
        
        #endif // TESSELLATION_ON
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingIndirect.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "VisibilityDXR"
            Tags
            {
                "LightMode" = "VisibilityDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 ps5
        
            // Keywords
            #pragma multi_compile _ TRANSPARENT_COLOR_SHADOW
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_VISIBILITY
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        
            #ifdef TESSELLATION_ON
            // World and normal are always available
                #define VARYINGS_DS_NEED_TANGENT
            #define VARYINGS_DS_NEED_TEXCOORD0
                        #define VARYINGS_DS_NEED_COLOR
        	#endif
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _Tesselation_Factor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float2 _NoiseTiling;
        float4 _Noise_TexelSize;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _Tess_Height_1_Min;
        float _Tess_Height_2_Min;
        float _Tess_Height_1_Max;
        float _Tess_Height_2_Max;
        float _Tess_Height_1_Offset;
        float _Tess_Height_2_Offset;
        float _Tess_Height_Blend_Transition;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _TessellationFactorMinDistance;
        float _TessellationFactorMaxDistance;
        float _TessellationFactorTriangleSize;
        float _TessellationShapeFactor;
        float _TessellationBackFaceCullEpsilon;
        float _TessellationMaxDisplacement;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_07d75b1d2628da808a2efb93a1d6219e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.uv0 = IN.uv0;
            float4 _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_07d75b1d2628da808a2efb93a1d6219e_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2);
            float4 _Property_b83097c58639858680bf43881a95b0af_Out_0 = _BaseColor;
            float4 _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2, _Property_b83097c58639858680bf43881a95b0af_Out_0, _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2);
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[0];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[1];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[2];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_A_4 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[3];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_R_1 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[0];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_G_2 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[1];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_B_3 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[2];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_A_4 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[3];
            float _Property_04a7bb2753456b8293b3e46e346b646e_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0 = float2(_Property_04a7bb2753456b8293b3e46e346b646e_Out_0, _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0);
            float _Remap_65ca5af95590f88da70777476b6efd40_Out_3;
            Unity_Remap_float(_Split_6a373913f8b5c587b3b25440e2351a6f_A_4, float2 (0, 1), _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float4 _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4;
            float3 _Combine_d07fea824e695b839a48350dc82f464b_RGB_5;
            float2 _Combine_d07fea824e695b839a48350dc82f464b_RG_6;
            Unity_Combine_float(_Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1, _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2, _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3, _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Combine_d07fea824e695b839a48350dc82f464b_RGB_5, _Combine_d07fea824e695b839a48350dc82f464b_RG_6);
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_4245c3b264047180b5c90a697d6cb278;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.uv0 = IN.uv0;
            float4 _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_4245c3b264047180b5c90a697d6cb278, _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2);
            float _Split_91a015dea8acd38b904ba0935328a5bc_R_1 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[0];
            float _Split_91a015dea8acd38b904ba0935328a5bc_G_2 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[1];
            float _Split_91a015dea8acd38b904ba0935328a5bc_B_3 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[2];
            float _Split_91a015dea8acd38b904ba0935328a5bc_A_4 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[3];
            float _Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0 = _HeightMin;
            float _Property_9df7a44c8225168683743ac60c0c3c34_Out_0 = _HeightMax;
            float2 _Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0 = float2(_Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0, _Property_9df7a44c8225168683743ac60c0c3c34_Out_0);
            float _Property_29ca14fd0b712983a38d63d2dd326e96_Out_0 = _HeightOffset;
            float2 _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2;
            Unity_Add_float2(_Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0, (_Property_29ca14fd0b712983a38d63d2dd326e96_Out_0.xx), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2);
            float _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_B_3, float2 (0, 1), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3);
            UnityTexture2D _Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.uv0 = IN.uv0;
            float4 _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2);
            float4 _Property_3561b11b899bda8e855826445cf628aa_Out_0 = _Base2Color;
            float4 _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2, _Property_3561b11b899bda8e855826445cf628aa_Out_0, _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2);
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[0];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[1];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[2];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_A_4 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[3];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_R_1 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[0];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_G_2 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[1];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_B_3 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[2];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[3];
            float _Property_159cd47513de4f85a992da1f43f77c51_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0 = float2(_Property_159cd47513de4f85a992da1f43f77c51_Out_0, _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0);
            float _Remap_1214803bb0f7c387adc088fb938f7971_Out_3;
            Unity_Remap_float(_Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4, float2 (0, 1), _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3);
            float4 _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4;
            float3 _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5;
            float2 _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6;
            Unity_Combine_float(_Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1, _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2, _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5, _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.tex, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.samplerstate, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.r;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_G_5 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.g;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_B_6 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.b;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_A_7 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.a;
            float _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1);
            float _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1, _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d5657f470f05ef839e4c257a20ace8cb;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.uv0 = IN.uv0;
            float4 _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2);
            float _Split_83ec66b648ab6c84848b42686c256cd7_R_1 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[0];
            float _Split_83ec66b648ab6c84848b42686c256cd7_G_2 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[1];
            float _Split_83ec66b648ab6c84848b42686c256cd7_B_3 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[2];
            float _Split_83ec66b648ab6c84848b42686c256cd7_A_4 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[3];
            float _Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0 = _HeightMin2;
            float _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0 = _HeightMax2;
            float2 _Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0 = float2(_Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0, _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0);
            float _Property_151ae2702b614585af2000f0a812960f_Out_0 = _HeightOffset2;
            float2 _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2;
            Unity_Add_float2(_Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0, (_Property_151ae2702b614585af2000f0a812960f_Out_0.xx), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2);
            float _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_B_3, float2 (0, 1), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3);
            float _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2;
            Unity_Multiply_float_float(_Branch_af0c5e511241ce8eae748ae487df50fa_Out_3, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2);
            float _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2);
            float _Property_818c8af4b930138e81034c886614171d_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8;
            float4 _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1);
            float _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3;
            Unity_Lerp_float(0, _Split_91a015dea8acd38b904ba0935328a5bc_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3);
            float _Property_956d1a93cb804081b21a76fd0c75a806_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2;
            Unity_Multiply_float_float(_Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3, _Property_956d1a93cb804081b21a76fd0c75a806_Out_0, _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2);
            float _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1;
            Unity_Absolute_float(_Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2, _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1);
            float _Property_96173fa32f95148fa9d2a017748d5235_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_d81ebc6955897c87b8fb462f713aae50_Out_2;
            Unity_Power_float(_Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1, _Property_96173fa32f95148fa9d2a017748d5235_Out_0, _Power_d81ebc6955897c87b8fb462f713aae50_Out_2);
            float _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3;
            Unity_Lerp_float(0, _Split_83ec66b648ab6c84848b42686c256cd7_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3);
            float _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2;
            Unity_Multiply_float_float(_Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3, _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0, _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2);
            float _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1;
            Unity_Absolute_float(_Multiply_b761b264ce901b81b32b974d83993b3d_Out_2, _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1);
            float _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2;
            Unity_Power_float(_Absolute_2511aaf2b812e58b93d44253984de16c_Out_1, _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2);
            float _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3;
            Unity_Lerp_float(_Power_d81ebc6955897c87b8fb462f713aae50_Out_2, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3);
            float4 _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_5933ed525fc7068893db7db94870134a_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0, _Multiply_5933ed525fc7068893db7db94870134a_Out_2);
            UnityTexture2D _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0 = IN.uv0;
            float2 _Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0 = _NoiseSpeed;
            float2 _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2;
            Unity_Multiply_float2_float2(_Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0, (IN.TimeParameters.x.xx), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2);
            float2 _Add_bc688882d8fee68487424542b1a69952_Out_2;
            Unity_Add_float2((_UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0.xy), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2, _Add_bc688882d8fee68487424542b1a69952_Out_2);
            float4 _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_bc688882d8fee68487424542b1a69952_Out_2));
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_R_4 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.r;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_G_5 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.g;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_B_6 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.b;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.a;
            float2 _Multiply_d613a21978306a858470588fdf147e8f_Out_2;
            Unity_Multiply_float2_float2(_Add_bc688882d8fee68487424542b1a69952_Out_2, float2(-1.2, -0.9), _Multiply_d613a21978306a858470588fdf147e8f_Out_2);
            float2 _Add_888a259bce586985b790e81a5145084b_Out_2;
            Unity_Add_float2(_Multiply_d613a21978306a858470588fdf147e8f_Out_2, float2(0.5, 0.5), _Add_888a259bce586985b790e81a5145084b_Out_2);
            float4 _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_888a259bce586985b790e81a5145084b_Out_2));
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_R_4 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.r;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_G_5 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.g;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_B_6 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.b;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.a;
            float _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2;
            Unity_Minimum_float(_SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7, _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7, _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2);
            float _Absolute_20087090b3600b8d97155e3798d64011_Out_1;
            Unity_Absolute_float(_Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2, _Absolute_20087090b3600b8d97155e3798d64011_Out_1);
            float _Property_7a2d696ef1d8028a966365137be9d25e_Out_0 = _EmissionNoisePower;
            float _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2;
            Unity_Power_float(_Absolute_20087090b3600b8d97155e3798d64011_Out_1, _Property_7a2d696ef1d8028a966365137be9d25e_Out_0, _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2);
            float _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2;
            Unity_Multiply_float_float(_Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2, 20, _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2);
            float _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3;
            Unity_Clamp_float(_Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2, 0.05, 1.2, _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3);
            float4 _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2;
            Unity_Multiply_float4_float4(_Multiply_5933ed525fc7068893db7db94870134a_Out_2, (_Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3.xxxx), _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2);
            float4 _Property_c805fa28a9c59b8e93d45497d3768156_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            UnityTexture2D _Property_7c7049e15fdff386b535790d8666f609_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.uv0 = IN.uv0;
            float4 _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_7c7049e15fdff386b535790d8666f609_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2);
            float _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2.xyz), _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0, _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2);
            UnityTexture2D _Property_fa9f7890b20ad481a92543c04b237bde_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.uv0 = IN.uv0;
            float4 _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_fa9f7890b20ad481a92543c04b237bde_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2);
            float _Property_8c31443b776727819a663c7ddce79064_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2.xyz), _Property_8c31443b776727819a663c7ddce79064_Out_0, _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2;
            float4 _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1);
            float3 _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1);
            float _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2;
            Unity_DotProduct_float3((_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz), _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1, _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2);
            float _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1;
            Unity_Saturate_float(_DotProduct_21807a3955457c888958cf9b7de210fc_Out_2, _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1);
            float _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1;
            Unity_OneMinus_float(_Saturate_5e97c86e74edb580abca053af090c6f7_Out_1, _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1);
            float _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1;
            Unity_Absolute_float(_OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1, _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1);
            float _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2;
            Unity_Power_float(_Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1, 10, _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2);
            float4 _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2;
            Unity_Multiply_float4_float4(_Property_c805fa28a9c59b8e93d45497d3768156_Out_0, (_Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2.xxxx), _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2);
            float _Property_23902821969b7a8aabcaa150279da760_Out_0 = _RimLightPower;
            float4 _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2;
            Unity_Multiply_float4_float4(_Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2, (_Property_23902821969b7a8aabcaa150279da760_Out_0.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2);
            float4 _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2);
            float4 _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2;
            Unity_Add_float4(_Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2, _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2);
            float4 _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3;
            Unity_Clamp_float4(_Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, float4(0, 0, 0, 0), _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3);
            float _Split_579bec1940604a80b8bf85fbd157877e_R_1 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[0];
            float _Split_579bec1940604a80b8bf85fbd157877e_G_2 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[1];
            float _Split_579bec1940604a80b8bf85fbd157877e_B_3 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[2];
            float _Split_579bec1940604a80b8bf85fbd157877e_A_4 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[3];
            float _Property_afd0f3561038ef8487e614f350d364dd_Out_0 = _BaseMetallic;
            float _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2;
            Unity_Multiply_float_float(_Split_91a015dea8acd38b904ba0935328a5bc_R_1, _Property_afd0f3561038ef8487e614f350d364dd_Out_0, _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2);
            float _Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0 = _BaseAORemapMin;
            float _Property_9d07c7a09a85da809f1d4661406e0888_Out_0 = _BaseAORemapMax;
            float2 _Vector2_10162c774de2a7838426399cfe98be82_Out_0 = float2(_Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0, _Property_9d07c7a09a85da809f1d4661406e0888_Out_0);
            float _Remap_c45fda31db668c81a9e89e11297ec993_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_G_2, float2 (0, 1), _Vector2_10162c774de2a7838426399cfe98be82_Out_0, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3);
            float3 _Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0 = float3(_Multiply_154e0f89b19c8e86926222afb13691e3_Out_2, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0 = _Base2Metallic;
            float _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2;
            Unity_Multiply_float_float(_Split_83ec66b648ab6c84848b42686c256cd7_R_1, _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0, _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2);
            float _Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0 = _Base2AORemapMin;
            float _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0 = _Base2AORemapMax;
            float2 _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0 = float2(_Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0, _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0);
            float _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_G_2, float2 (0, 1), _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3);
            float3 _Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0 = float3(_Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_a5073733c462898f8bf5761db76cd246;
            float4 _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_a5073733c462898f8bf5761db76cd246, _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1);
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[0];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[1];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_B_3 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[2];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_A_4 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[3];
            surface.BaseColor = (_HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1.xyz);
            surface.Emission = (_Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_579bec1940604a80b8bf85fbd157877e_A_4;
            surface.Occlusion = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2;
            surface.NormalTS = (_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz);
            surface.Metallic = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            #ifdef TESSELLATION_ON
        
        float GetTessellationFactor(AttributesMesh input)
        {
            float tessellationFactor = 1.0;
        
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            tessellationFactor = vertexDescription.TessellationFactor;
        
            return tessellationFactor;
        }
        
        float GetMaxDisplacement()
        {
            return _TessellationMaxDisplacement;
        }
        
        // TODO: We should generate this struct like all the other varying struct
        VaryingsMeshToDS InterpolateWithBaryCoordsMeshToDS(VaryingsMeshToDS input0, VaryingsMeshToDS input1, VaryingsMeshToDS input2, float3 baryCoords)
        {
            VaryingsMeshToDS output;
        
            UNITY_TRANSFER_INSTANCE_ID(input0, output);
        
            TESSELLATION_INTERPOLATE_BARY(positionRWS, baryCoords);
            output.positionPredisplacementRWS = output.positionRWS;
            TESSELLATION_INTERPOLATE_BARY(normalWS, baryCoords);
        #ifdef VARYINGS_DS_NEED_TANGENT
            // This will interpolate the sign but should be ok in practice as we may expect a triangle to have same sign (? TO CHECK)
            TESSELLATION_INTERPOLATE_BARY(tangentWS, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD0
            TESSELLATION_INTERPOLATE_BARY(texCoord0, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD1
            TESSELLATION_INTERPOLATE_BARY(texCoord1, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD2
            TESSELLATION_INTERPOLATE_BARY(texCoord2, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD3
            TESSELLATION_INTERPOLATE_BARY(texCoord3, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_COLOR
            TESSELLATION_INTERPOLATE_BARY(color, baryCoords);
        #endif
        
            // Pass-Through for custom interpolator
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorInterpolateWithBaryCoordsMeshToDS' */
        
            return output;
        }
        
        VertexDescriptionInputs VaryingsMeshToDSToVertexDescriptionInputs(VaryingsMeshToDS input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        
            return output;
        }
        
        #ifdef HAVE_TESSELLATION_MODIFICATION
        // tessellationFactors
        // x - 1->2 edge
        // y - 2->0 edge
        // z - 0->1 edge
        // w - inside tessellation factor
        VaryingsMeshToDS ApplyTessellationModification(VaryingsMeshToDS input, float3 timeParameters)
        {
            // HACK: As there is no specific tessellation stage for now in shadergraph, we reuse the vertex description mechanism.
            // It mean we store TessellationFactor inside vertex description causing extra read on both vertex and hull stage, but unusued paramater are optimize out by the shader compiler, so no impact.
            VertexDescriptionInputs vertexDescriptionInputs = VaryingsMeshToDSToVertexDescriptionInputs(input);
            // Override time paramters with used one (This is required to correctly handle motion vector for tessellation animation based on time)
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            input.positionRWS += vertexDescription.TessellationDisplacement;
        
            return input;
        }
        
        #endif
        
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
        
        // This will evaluate the custom interpolator and update the varying structure
        void VertMeshTesselationCustomInterpolation(VaryingsMeshToDS input, inout VaryingsMeshToPS output)
        {
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVertMeshTesselationCustomInterpolation' */
        }
        
        #endif // USE_CUSTOMINTERP_SUBSTRUCT
        
        #endif // TESSELLATION_ON
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingVisibility.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "ForwardDXR"
            Tags
            {
                "LightMode" = "ForwardDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 ps5
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_FORWARD
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        #define HAS_LIGHTLOOP 1
        
            #ifdef TESSELLATION_ON
            // World and normal are always available
                #define VARYINGS_DS_NEED_TANGENT
            #define VARYINGS_DS_NEED_TEXCOORD0
            #define VARYINGS_DS_NEED_TEXCOORD1
            #define VARYINGS_DS_NEED_TEXCOORD2
                #define VARYINGS_DS_NEED_COLOR
        	#endif
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _Tesselation_Factor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float2 _NoiseTiling;
        float4 _Noise_TexelSize;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _Tess_Height_1_Min;
        float _Tess_Height_2_Min;
        float _Tess_Height_1_Max;
        float _Tess_Height_2_Max;
        float _Tess_Height_1_Offset;
        float _Tess_Height_2_Offset;
        float _Tess_Height_Blend_Transition;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _TessellationFactorMinDistance;
        float _TessellationFactorMaxDistance;
        float _TessellationFactorTriangleSize;
        float _TessellationShapeFactor;
        float _TessellationBackFaceCullEpsilon;
        float _TessellationMaxDisplacement;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_07d75b1d2628da808a2efb93a1d6219e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.uv0 = IN.uv0;
            float4 _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_07d75b1d2628da808a2efb93a1d6219e_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2);
            float4 _Property_b83097c58639858680bf43881a95b0af_Out_0 = _BaseColor;
            float4 _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2, _Property_b83097c58639858680bf43881a95b0af_Out_0, _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2);
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[0];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[1];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[2];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_A_4 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[3];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_R_1 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[0];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_G_2 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[1];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_B_3 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[2];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_A_4 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[3];
            float _Property_04a7bb2753456b8293b3e46e346b646e_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0 = float2(_Property_04a7bb2753456b8293b3e46e346b646e_Out_0, _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0);
            float _Remap_65ca5af95590f88da70777476b6efd40_Out_3;
            Unity_Remap_float(_Split_6a373913f8b5c587b3b25440e2351a6f_A_4, float2 (0, 1), _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float4 _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4;
            float3 _Combine_d07fea824e695b839a48350dc82f464b_RGB_5;
            float2 _Combine_d07fea824e695b839a48350dc82f464b_RG_6;
            Unity_Combine_float(_Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1, _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2, _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3, _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Combine_d07fea824e695b839a48350dc82f464b_RGB_5, _Combine_d07fea824e695b839a48350dc82f464b_RG_6);
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_4245c3b264047180b5c90a697d6cb278;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.uv0 = IN.uv0;
            float4 _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_4245c3b264047180b5c90a697d6cb278, _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2);
            float _Split_91a015dea8acd38b904ba0935328a5bc_R_1 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[0];
            float _Split_91a015dea8acd38b904ba0935328a5bc_G_2 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[1];
            float _Split_91a015dea8acd38b904ba0935328a5bc_B_3 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[2];
            float _Split_91a015dea8acd38b904ba0935328a5bc_A_4 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[3];
            float _Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0 = _HeightMin;
            float _Property_9df7a44c8225168683743ac60c0c3c34_Out_0 = _HeightMax;
            float2 _Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0 = float2(_Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0, _Property_9df7a44c8225168683743ac60c0c3c34_Out_0);
            float _Property_29ca14fd0b712983a38d63d2dd326e96_Out_0 = _HeightOffset;
            float2 _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2;
            Unity_Add_float2(_Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0, (_Property_29ca14fd0b712983a38d63d2dd326e96_Out_0.xx), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2);
            float _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_B_3, float2 (0, 1), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3);
            UnityTexture2D _Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.uv0 = IN.uv0;
            float4 _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2);
            float4 _Property_3561b11b899bda8e855826445cf628aa_Out_0 = _Base2Color;
            float4 _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2, _Property_3561b11b899bda8e855826445cf628aa_Out_0, _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2);
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[0];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[1];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[2];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_A_4 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[3];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_R_1 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[0];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_G_2 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[1];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_B_3 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[2];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[3];
            float _Property_159cd47513de4f85a992da1f43f77c51_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0 = float2(_Property_159cd47513de4f85a992da1f43f77c51_Out_0, _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0);
            float _Remap_1214803bb0f7c387adc088fb938f7971_Out_3;
            Unity_Remap_float(_Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4, float2 (0, 1), _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3);
            float4 _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4;
            float3 _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5;
            float2 _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6;
            Unity_Combine_float(_Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1, _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2, _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5, _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.tex, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.samplerstate, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.r;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_G_5 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.g;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_B_6 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.b;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_A_7 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.a;
            float _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1);
            float _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1, _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d5657f470f05ef839e4c257a20ace8cb;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.uv0 = IN.uv0;
            float4 _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2);
            float _Split_83ec66b648ab6c84848b42686c256cd7_R_1 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[0];
            float _Split_83ec66b648ab6c84848b42686c256cd7_G_2 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[1];
            float _Split_83ec66b648ab6c84848b42686c256cd7_B_3 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[2];
            float _Split_83ec66b648ab6c84848b42686c256cd7_A_4 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[3];
            float _Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0 = _HeightMin2;
            float _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0 = _HeightMax2;
            float2 _Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0 = float2(_Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0, _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0);
            float _Property_151ae2702b614585af2000f0a812960f_Out_0 = _HeightOffset2;
            float2 _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2;
            Unity_Add_float2(_Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0, (_Property_151ae2702b614585af2000f0a812960f_Out_0.xx), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2);
            float _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_B_3, float2 (0, 1), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3);
            float _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2;
            Unity_Multiply_float_float(_Branch_af0c5e511241ce8eae748ae487df50fa_Out_3, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2);
            float _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2);
            float _Property_818c8af4b930138e81034c886614171d_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8;
            float4 _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1);
            float _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3;
            Unity_Lerp_float(0, _Split_91a015dea8acd38b904ba0935328a5bc_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3);
            float _Property_956d1a93cb804081b21a76fd0c75a806_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2;
            Unity_Multiply_float_float(_Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3, _Property_956d1a93cb804081b21a76fd0c75a806_Out_0, _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2);
            float _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1;
            Unity_Absolute_float(_Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2, _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1);
            float _Property_96173fa32f95148fa9d2a017748d5235_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_d81ebc6955897c87b8fb462f713aae50_Out_2;
            Unity_Power_float(_Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1, _Property_96173fa32f95148fa9d2a017748d5235_Out_0, _Power_d81ebc6955897c87b8fb462f713aae50_Out_2);
            float _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3;
            Unity_Lerp_float(0, _Split_83ec66b648ab6c84848b42686c256cd7_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3);
            float _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2;
            Unity_Multiply_float_float(_Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3, _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0, _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2);
            float _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1;
            Unity_Absolute_float(_Multiply_b761b264ce901b81b32b974d83993b3d_Out_2, _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1);
            float _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2;
            Unity_Power_float(_Absolute_2511aaf2b812e58b93d44253984de16c_Out_1, _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2);
            float _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3;
            Unity_Lerp_float(_Power_d81ebc6955897c87b8fb462f713aae50_Out_2, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3);
            float4 _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_5933ed525fc7068893db7db94870134a_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0, _Multiply_5933ed525fc7068893db7db94870134a_Out_2);
            UnityTexture2D _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0 = IN.uv0;
            float2 _Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0 = _NoiseSpeed;
            float2 _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2;
            Unity_Multiply_float2_float2(_Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0, (IN.TimeParameters.x.xx), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2);
            float2 _Add_bc688882d8fee68487424542b1a69952_Out_2;
            Unity_Add_float2((_UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0.xy), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2, _Add_bc688882d8fee68487424542b1a69952_Out_2);
            float4 _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_bc688882d8fee68487424542b1a69952_Out_2));
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_R_4 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.r;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_G_5 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.g;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_B_6 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.b;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.a;
            float2 _Multiply_d613a21978306a858470588fdf147e8f_Out_2;
            Unity_Multiply_float2_float2(_Add_bc688882d8fee68487424542b1a69952_Out_2, float2(-1.2, -0.9), _Multiply_d613a21978306a858470588fdf147e8f_Out_2);
            float2 _Add_888a259bce586985b790e81a5145084b_Out_2;
            Unity_Add_float2(_Multiply_d613a21978306a858470588fdf147e8f_Out_2, float2(0.5, 0.5), _Add_888a259bce586985b790e81a5145084b_Out_2);
            float4 _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_888a259bce586985b790e81a5145084b_Out_2));
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_R_4 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.r;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_G_5 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.g;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_B_6 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.b;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.a;
            float _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2;
            Unity_Minimum_float(_SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7, _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7, _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2);
            float _Absolute_20087090b3600b8d97155e3798d64011_Out_1;
            Unity_Absolute_float(_Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2, _Absolute_20087090b3600b8d97155e3798d64011_Out_1);
            float _Property_7a2d696ef1d8028a966365137be9d25e_Out_0 = _EmissionNoisePower;
            float _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2;
            Unity_Power_float(_Absolute_20087090b3600b8d97155e3798d64011_Out_1, _Property_7a2d696ef1d8028a966365137be9d25e_Out_0, _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2);
            float _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2;
            Unity_Multiply_float_float(_Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2, 20, _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2);
            float _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3;
            Unity_Clamp_float(_Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2, 0.05, 1.2, _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3);
            float4 _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2;
            Unity_Multiply_float4_float4(_Multiply_5933ed525fc7068893db7db94870134a_Out_2, (_Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3.xxxx), _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2);
            float4 _Property_c805fa28a9c59b8e93d45497d3768156_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            UnityTexture2D _Property_7c7049e15fdff386b535790d8666f609_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.uv0 = IN.uv0;
            float4 _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_7c7049e15fdff386b535790d8666f609_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2);
            float _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2.xyz), _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0, _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2);
            UnityTexture2D _Property_fa9f7890b20ad481a92543c04b237bde_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.uv0 = IN.uv0;
            float4 _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_fa9f7890b20ad481a92543c04b237bde_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2);
            float _Property_8c31443b776727819a663c7ddce79064_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2.xyz), _Property_8c31443b776727819a663c7ddce79064_Out_0, _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2;
            float4 _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1);
            float3 _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1);
            float _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2;
            Unity_DotProduct_float3((_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz), _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1, _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2);
            float _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1;
            Unity_Saturate_float(_DotProduct_21807a3955457c888958cf9b7de210fc_Out_2, _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1);
            float _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1;
            Unity_OneMinus_float(_Saturate_5e97c86e74edb580abca053af090c6f7_Out_1, _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1);
            float _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1;
            Unity_Absolute_float(_OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1, _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1);
            float _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2;
            Unity_Power_float(_Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1, 10, _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2);
            float4 _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2;
            Unity_Multiply_float4_float4(_Property_c805fa28a9c59b8e93d45497d3768156_Out_0, (_Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2.xxxx), _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2);
            float _Property_23902821969b7a8aabcaa150279da760_Out_0 = _RimLightPower;
            float4 _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2;
            Unity_Multiply_float4_float4(_Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2, (_Property_23902821969b7a8aabcaa150279da760_Out_0.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2);
            float4 _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2);
            float4 _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2;
            Unity_Add_float4(_Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2, _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2);
            float4 _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3;
            Unity_Clamp_float4(_Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, float4(0, 0, 0, 0), _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3);
            float _Split_579bec1940604a80b8bf85fbd157877e_R_1 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[0];
            float _Split_579bec1940604a80b8bf85fbd157877e_G_2 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[1];
            float _Split_579bec1940604a80b8bf85fbd157877e_B_3 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[2];
            float _Split_579bec1940604a80b8bf85fbd157877e_A_4 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[3];
            float _Property_afd0f3561038ef8487e614f350d364dd_Out_0 = _BaseMetallic;
            float _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2;
            Unity_Multiply_float_float(_Split_91a015dea8acd38b904ba0935328a5bc_R_1, _Property_afd0f3561038ef8487e614f350d364dd_Out_0, _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2);
            float _Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0 = _BaseAORemapMin;
            float _Property_9d07c7a09a85da809f1d4661406e0888_Out_0 = _BaseAORemapMax;
            float2 _Vector2_10162c774de2a7838426399cfe98be82_Out_0 = float2(_Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0, _Property_9d07c7a09a85da809f1d4661406e0888_Out_0);
            float _Remap_c45fda31db668c81a9e89e11297ec993_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_G_2, float2 (0, 1), _Vector2_10162c774de2a7838426399cfe98be82_Out_0, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3);
            float3 _Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0 = float3(_Multiply_154e0f89b19c8e86926222afb13691e3_Out_2, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0 = _Base2Metallic;
            float _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2;
            Unity_Multiply_float_float(_Split_83ec66b648ab6c84848b42686c256cd7_R_1, _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0, _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2);
            float _Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0 = _Base2AORemapMin;
            float _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0 = _Base2AORemapMax;
            float2 _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0 = float2(_Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0, _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0);
            float _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_G_2, float2 (0, 1), _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3);
            float3 _Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0 = float3(_Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_a5073733c462898f8bf5761db76cd246;
            float4 _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_a5073733c462898f8bf5761db76cd246, _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1);
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[0];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[1];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_B_3 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[2];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_A_4 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[3];
            surface.BaseColor = (_HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1.xyz);
            surface.Emission = (_Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_579bec1940604a80b8bf85fbd157877e_A_4;
            surface.Occlusion = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2;
            surface.NormalTS = (_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz);
            surface.Metallic = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            #ifdef TESSELLATION_ON
        
        float GetTessellationFactor(AttributesMesh input)
        {
            float tessellationFactor = 1.0;
        
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            tessellationFactor = vertexDescription.TessellationFactor;
        
            return tessellationFactor;
        }
        
        float GetMaxDisplacement()
        {
            return _TessellationMaxDisplacement;
        }
        
        // TODO: We should generate this struct like all the other varying struct
        VaryingsMeshToDS InterpolateWithBaryCoordsMeshToDS(VaryingsMeshToDS input0, VaryingsMeshToDS input1, VaryingsMeshToDS input2, float3 baryCoords)
        {
            VaryingsMeshToDS output;
        
            UNITY_TRANSFER_INSTANCE_ID(input0, output);
        
            TESSELLATION_INTERPOLATE_BARY(positionRWS, baryCoords);
            output.positionPredisplacementRWS = output.positionRWS;
            TESSELLATION_INTERPOLATE_BARY(normalWS, baryCoords);
        #ifdef VARYINGS_DS_NEED_TANGENT
            // This will interpolate the sign but should be ok in practice as we may expect a triangle to have same sign (? TO CHECK)
            TESSELLATION_INTERPOLATE_BARY(tangentWS, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD0
            TESSELLATION_INTERPOLATE_BARY(texCoord0, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD1
            TESSELLATION_INTERPOLATE_BARY(texCoord1, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD2
            TESSELLATION_INTERPOLATE_BARY(texCoord2, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD3
            TESSELLATION_INTERPOLATE_BARY(texCoord3, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_COLOR
            TESSELLATION_INTERPOLATE_BARY(color, baryCoords);
        #endif
        
            // Pass-Through for custom interpolator
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorInterpolateWithBaryCoordsMeshToDS' */
        
            return output;
        }
        
        VertexDescriptionInputs VaryingsMeshToDSToVertexDescriptionInputs(VaryingsMeshToDS input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        
            return output;
        }
        
        #ifdef HAVE_TESSELLATION_MODIFICATION
        // tessellationFactors
        // x - 1->2 edge
        // y - 2->0 edge
        // z - 0->1 edge
        // w - inside tessellation factor
        VaryingsMeshToDS ApplyTessellationModification(VaryingsMeshToDS input, float3 timeParameters)
        {
            // HACK: As there is no specific tessellation stage for now in shadergraph, we reuse the vertex description mechanism.
            // It mean we store TessellationFactor inside vertex description causing extra read on both vertex and hull stage, but unusued paramater are optimize out by the shader compiler, so no impact.
            VertexDescriptionInputs vertexDescriptionInputs = VaryingsMeshToDSToVertexDescriptionInputs(input);
            // Override time paramters with used one (This is required to correctly handle motion vector for tessellation animation based on time)
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            input.positionRWS += vertexDescription.TessellationDisplacement;
        
            return input;
        }
        
        #endif
        
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
        
        // This will evaluate the custom interpolator and update the varying structure
        void VertMeshTesselationCustomInterpolation(VaryingsMeshToDS input, inout VaryingsMeshToPS output)
        {
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVertMeshTesselationCustomInterpolation' */
        }
        
        #endif // USE_CUSTOMINTERP_SUBSTRUCT
        
        #endif // TESSELLATION_ON
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingForward.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "GBufferDXR"
            Tags
            {
                "LightMode" = "GBufferDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 ps5
        
            // Keywords
            #pragma multi_compile _ MINIMAL_GBUFFER
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_GBUFFER
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        
            #ifdef TESSELLATION_ON
            // World and normal are always available
                #define VARYINGS_DS_NEED_TANGENT
            #define VARYINGS_DS_NEED_TEXCOORD0
            #define VARYINGS_DS_NEED_TEXCOORD1
            #define VARYINGS_DS_NEED_TEXCOORD2
                #define VARYINGS_DS_NEED_COLOR
        	#endif
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _Tesselation_Factor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float2 _NoiseTiling;
        float4 _Noise_TexelSize;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _Tess_Height_1_Min;
        float _Tess_Height_2_Min;
        float _Tess_Height_1_Max;
        float _Tess_Height_2_Max;
        float _Tess_Height_1_Offset;
        float _Tess_Height_2_Offset;
        float _Tess_Height_Blend_Transition;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _TessellationFactorMinDistance;
        float _TessellationFactorMaxDistance;
        float _TessellationFactorTriangleSize;
        float _TessellationShapeFactor;
        float _TessellationBackFaceCullEpsilon;
        float _TessellationMaxDisplacement;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Deferred/RaytracingIntersectonGBuffer.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/StandardLit/StandardLit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_07d75b1d2628da808a2efb93a1d6219e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.uv0 = IN.uv0;
            float4 _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_07d75b1d2628da808a2efb93a1d6219e_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2);
            float4 _Property_b83097c58639858680bf43881a95b0af_Out_0 = _BaseColor;
            float4 _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2, _Property_b83097c58639858680bf43881a95b0af_Out_0, _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2);
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[0];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[1];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[2];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_A_4 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[3];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_R_1 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[0];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_G_2 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[1];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_B_3 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[2];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_A_4 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[3];
            float _Property_04a7bb2753456b8293b3e46e346b646e_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0 = float2(_Property_04a7bb2753456b8293b3e46e346b646e_Out_0, _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0);
            float _Remap_65ca5af95590f88da70777476b6efd40_Out_3;
            Unity_Remap_float(_Split_6a373913f8b5c587b3b25440e2351a6f_A_4, float2 (0, 1), _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float4 _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4;
            float3 _Combine_d07fea824e695b839a48350dc82f464b_RGB_5;
            float2 _Combine_d07fea824e695b839a48350dc82f464b_RG_6;
            Unity_Combine_float(_Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1, _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2, _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3, _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Combine_d07fea824e695b839a48350dc82f464b_RGB_5, _Combine_d07fea824e695b839a48350dc82f464b_RG_6);
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_4245c3b264047180b5c90a697d6cb278;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.uv0 = IN.uv0;
            float4 _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_4245c3b264047180b5c90a697d6cb278, _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2);
            float _Split_91a015dea8acd38b904ba0935328a5bc_R_1 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[0];
            float _Split_91a015dea8acd38b904ba0935328a5bc_G_2 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[1];
            float _Split_91a015dea8acd38b904ba0935328a5bc_B_3 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[2];
            float _Split_91a015dea8acd38b904ba0935328a5bc_A_4 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[3];
            float _Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0 = _HeightMin;
            float _Property_9df7a44c8225168683743ac60c0c3c34_Out_0 = _HeightMax;
            float2 _Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0 = float2(_Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0, _Property_9df7a44c8225168683743ac60c0c3c34_Out_0);
            float _Property_29ca14fd0b712983a38d63d2dd326e96_Out_0 = _HeightOffset;
            float2 _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2;
            Unity_Add_float2(_Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0, (_Property_29ca14fd0b712983a38d63d2dd326e96_Out_0.xx), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2);
            float _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_B_3, float2 (0, 1), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3);
            UnityTexture2D _Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.uv0 = IN.uv0;
            float4 _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2);
            float4 _Property_3561b11b899bda8e855826445cf628aa_Out_0 = _Base2Color;
            float4 _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2, _Property_3561b11b899bda8e855826445cf628aa_Out_0, _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2);
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[0];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[1];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[2];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_A_4 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[3];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_R_1 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[0];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_G_2 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[1];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_B_3 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[2];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[3];
            float _Property_159cd47513de4f85a992da1f43f77c51_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0 = float2(_Property_159cd47513de4f85a992da1f43f77c51_Out_0, _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0);
            float _Remap_1214803bb0f7c387adc088fb938f7971_Out_3;
            Unity_Remap_float(_Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4, float2 (0, 1), _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3);
            float4 _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4;
            float3 _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5;
            float2 _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6;
            Unity_Combine_float(_Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1, _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2, _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5, _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.tex, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.samplerstate, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.r;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_G_5 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.g;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_B_6 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.b;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_A_7 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.a;
            float _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1);
            float _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1, _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d5657f470f05ef839e4c257a20ace8cb;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.uv0 = IN.uv0;
            float4 _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2);
            float _Split_83ec66b648ab6c84848b42686c256cd7_R_1 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[0];
            float _Split_83ec66b648ab6c84848b42686c256cd7_G_2 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[1];
            float _Split_83ec66b648ab6c84848b42686c256cd7_B_3 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[2];
            float _Split_83ec66b648ab6c84848b42686c256cd7_A_4 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[3];
            float _Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0 = _HeightMin2;
            float _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0 = _HeightMax2;
            float2 _Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0 = float2(_Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0, _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0);
            float _Property_151ae2702b614585af2000f0a812960f_Out_0 = _HeightOffset2;
            float2 _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2;
            Unity_Add_float2(_Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0, (_Property_151ae2702b614585af2000f0a812960f_Out_0.xx), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2);
            float _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_B_3, float2 (0, 1), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3);
            float _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2;
            Unity_Multiply_float_float(_Branch_af0c5e511241ce8eae748ae487df50fa_Out_3, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2);
            float _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2);
            float _Property_818c8af4b930138e81034c886614171d_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8;
            float4 _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1);
            float _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3;
            Unity_Lerp_float(0, _Split_91a015dea8acd38b904ba0935328a5bc_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3);
            float _Property_956d1a93cb804081b21a76fd0c75a806_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2;
            Unity_Multiply_float_float(_Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3, _Property_956d1a93cb804081b21a76fd0c75a806_Out_0, _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2);
            float _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1;
            Unity_Absolute_float(_Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2, _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1);
            float _Property_96173fa32f95148fa9d2a017748d5235_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_d81ebc6955897c87b8fb462f713aae50_Out_2;
            Unity_Power_float(_Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1, _Property_96173fa32f95148fa9d2a017748d5235_Out_0, _Power_d81ebc6955897c87b8fb462f713aae50_Out_2);
            float _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3;
            Unity_Lerp_float(0, _Split_83ec66b648ab6c84848b42686c256cd7_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3);
            float _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2;
            Unity_Multiply_float_float(_Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3, _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0, _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2);
            float _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1;
            Unity_Absolute_float(_Multiply_b761b264ce901b81b32b974d83993b3d_Out_2, _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1);
            float _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2;
            Unity_Power_float(_Absolute_2511aaf2b812e58b93d44253984de16c_Out_1, _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2);
            float _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3;
            Unity_Lerp_float(_Power_d81ebc6955897c87b8fb462f713aae50_Out_2, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3);
            float4 _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_5933ed525fc7068893db7db94870134a_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0, _Multiply_5933ed525fc7068893db7db94870134a_Out_2);
            UnityTexture2D _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0 = IN.uv0;
            float2 _Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0 = _NoiseSpeed;
            float2 _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2;
            Unity_Multiply_float2_float2(_Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0, (IN.TimeParameters.x.xx), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2);
            float2 _Add_bc688882d8fee68487424542b1a69952_Out_2;
            Unity_Add_float2((_UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0.xy), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2, _Add_bc688882d8fee68487424542b1a69952_Out_2);
            float4 _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_bc688882d8fee68487424542b1a69952_Out_2));
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_R_4 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.r;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_G_5 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.g;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_B_6 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.b;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.a;
            float2 _Multiply_d613a21978306a858470588fdf147e8f_Out_2;
            Unity_Multiply_float2_float2(_Add_bc688882d8fee68487424542b1a69952_Out_2, float2(-1.2, -0.9), _Multiply_d613a21978306a858470588fdf147e8f_Out_2);
            float2 _Add_888a259bce586985b790e81a5145084b_Out_2;
            Unity_Add_float2(_Multiply_d613a21978306a858470588fdf147e8f_Out_2, float2(0.5, 0.5), _Add_888a259bce586985b790e81a5145084b_Out_2);
            float4 _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_888a259bce586985b790e81a5145084b_Out_2));
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_R_4 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.r;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_G_5 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.g;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_B_6 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.b;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.a;
            float _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2;
            Unity_Minimum_float(_SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7, _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7, _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2);
            float _Absolute_20087090b3600b8d97155e3798d64011_Out_1;
            Unity_Absolute_float(_Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2, _Absolute_20087090b3600b8d97155e3798d64011_Out_1);
            float _Property_7a2d696ef1d8028a966365137be9d25e_Out_0 = _EmissionNoisePower;
            float _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2;
            Unity_Power_float(_Absolute_20087090b3600b8d97155e3798d64011_Out_1, _Property_7a2d696ef1d8028a966365137be9d25e_Out_0, _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2);
            float _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2;
            Unity_Multiply_float_float(_Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2, 20, _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2);
            float _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3;
            Unity_Clamp_float(_Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2, 0.05, 1.2, _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3);
            float4 _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2;
            Unity_Multiply_float4_float4(_Multiply_5933ed525fc7068893db7db94870134a_Out_2, (_Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3.xxxx), _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2);
            float4 _Property_c805fa28a9c59b8e93d45497d3768156_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            UnityTexture2D _Property_7c7049e15fdff386b535790d8666f609_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.uv0 = IN.uv0;
            float4 _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_7c7049e15fdff386b535790d8666f609_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2);
            float _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2.xyz), _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0, _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2);
            UnityTexture2D _Property_fa9f7890b20ad481a92543c04b237bde_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.uv0 = IN.uv0;
            float4 _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_fa9f7890b20ad481a92543c04b237bde_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2);
            float _Property_8c31443b776727819a663c7ddce79064_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2.xyz), _Property_8c31443b776727819a663c7ddce79064_Out_0, _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2;
            float4 _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1);
            float3 _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1);
            float _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2;
            Unity_DotProduct_float3((_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz), _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1, _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2);
            float _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1;
            Unity_Saturate_float(_DotProduct_21807a3955457c888958cf9b7de210fc_Out_2, _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1);
            float _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1;
            Unity_OneMinus_float(_Saturate_5e97c86e74edb580abca053af090c6f7_Out_1, _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1);
            float _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1;
            Unity_Absolute_float(_OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1, _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1);
            float _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2;
            Unity_Power_float(_Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1, 10, _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2);
            float4 _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2;
            Unity_Multiply_float4_float4(_Property_c805fa28a9c59b8e93d45497d3768156_Out_0, (_Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2.xxxx), _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2);
            float _Property_23902821969b7a8aabcaa150279da760_Out_0 = _RimLightPower;
            float4 _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2;
            Unity_Multiply_float4_float4(_Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2, (_Property_23902821969b7a8aabcaa150279da760_Out_0.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2);
            float4 _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2);
            float4 _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2;
            Unity_Add_float4(_Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2, _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2);
            float4 _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3;
            Unity_Clamp_float4(_Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, float4(0, 0, 0, 0), _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3);
            float _Split_579bec1940604a80b8bf85fbd157877e_R_1 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[0];
            float _Split_579bec1940604a80b8bf85fbd157877e_G_2 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[1];
            float _Split_579bec1940604a80b8bf85fbd157877e_B_3 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[2];
            float _Split_579bec1940604a80b8bf85fbd157877e_A_4 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[3];
            float _Property_afd0f3561038ef8487e614f350d364dd_Out_0 = _BaseMetallic;
            float _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2;
            Unity_Multiply_float_float(_Split_91a015dea8acd38b904ba0935328a5bc_R_1, _Property_afd0f3561038ef8487e614f350d364dd_Out_0, _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2);
            float _Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0 = _BaseAORemapMin;
            float _Property_9d07c7a09a85da809f1d4661406e0888_Out_0 = _BaseAORemapMax;
            float2 _Vector2_10162c774de2a7838426399cfe98be82_Out_0 = float2(_Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0, _Property_9d07c7a09a85da809f1d4661406e0888_Out_0);
            float _Remap_c45fda31db668c81a9e89e11297ec993_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_G_2, float2 (0, 1), _Vector2_10162c774de2a7838426399cfe98be82_Out_0, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3);
            float3 _Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0 = float3(_Multiply_154e0f89b19c8e86926222afb13691e3_Out_2, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0 = _Base2Metallic;
            float _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2;
            Unity_Multiply_float_float(_Split_83ec66b648ab6c84848b42686c256cd7_R_1, _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0, _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2);
            float _Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0 = _Base2AORemapMin;
            float _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0 = _Base2AORemapMax;
            float2 _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0 = float2(_Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0, _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0);
            float _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_G_2, float2 (0, 1), _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3);
            float3 _Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0 = float3(_Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_a5073733c462898f8bf5761db76cd246;
            float4 _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_a5073733c462898f8bf5761db76cd246, _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1);
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[0];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[1];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_B_3 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[2];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_A_4 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[3];
            surface.BaseColor = (_HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1.xyz);
            surface.Emission = (_Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_579bec1940604a80b8bf85fbd157877e_A_4;
            surface.Occlusion = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2;
            surface.NormalTS = (_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz);
            surface.Metallic = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            #ifdef TESSELLATION_ON
        
        float GetTessellationFactor(AttributesMesh input)
        {
            float tessellationFactor = 1.0;
        
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            tessellationFactor = vertexDescription.TessellationFactor;
        
            return tessellationFactor;
        }
        
        float GetMaxDisplacement()
        {
            return _TessellationMaxDisplacement;
        }
        
        // TODO: We should generate this struct like all the other varying struct
        VaryingsMeshToDS InterpolateWithBaryCoordsMeshToDS(VaryingsMeshToDS input0, VaryingsMeshToDS input1, VaryingsMeshToDS input2, float3 baryCoords)
        {
            VaryingsMeshToDS output;
        
            UNITY_TRANSFER_INSTANCE_ID(input0, output);
        
            TESSELLATION_INTERPOLATE_BARY(positionRWS, baryCoords);
            output.positionPredisplacementRWS = output.positionRWS;
            TESSELLATION_INTERPOLATE_BARY(normalWS, baryCoords);
        #ifdef VARYINGS_DS_NEED_TANGENT
            // This will interpolate the sign but should be ok in practice as we may expect a triangle to have same sign (? TO CHECK)
            TESSELLATION_INTERPOLATE_BARY(tangentWS, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD0
            TESSELLATION_INTERPOLATE_BARY(texCoord0, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD1
            TESSELLATION_INTERPOLATE_BARY(texCoord1, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD2
            TESSELLATION_INTERPOLATE_BARY(texCoord2, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD3
            TESSELLATION_INTERPOLATE_BARY(texCoord3, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_COLOR
            TESSELLATION_INTERPOLATE_BARY(color, baryCoords);
        #endif
        
            // Pass-Through for custom interpolator
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorInterpolateWithBaryCoordsMeshToDS' */
        
            return output;
        }
        
        VertexDescriptionInputs VaryingsMeshToDSToVertexDescriptionInputs(VaryingsMeshToDS input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        
            return output;
        }
        
        #ifdef HAVE_TESSELLATION_MODIFICATION
        // tessellationFactors
        // x - 1->2 edge
        // y - 2->0 edge
        // z - 0->1 edge
        // w - inside tessellation factor
        VaryingsMeshToDS ApplyTessellationModification(VaryingsMeshToDS input, float3 timeParameters)
        {
            // HACK: As there is no specific tessellation stage for now in shadergraph, we reuse the vertex description mechanism.
            // It mean we store TessellationFactor inside vertex description causing extra read on both vertex and hull stage, but unusued paramater are optimize out by the shader compiler, so no impact.
            VertexDescriptionInputs vertexDescriptionInputs = VaryingsMeshToDSToVertexDescriptionInputs(input);
            // Override time paramters with used one (This is required to correctly handle motion vector for tessellation animation based on time)
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            input.positionRWS += vertexDescription.TessellationDisplacement;
        
            return input;
        }
        
        #endif
        
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
        
        // This will evaluate the custom interpolator and update the varying structure
        void VertMeshTesselationCustomInterpolation(VaryingsMeshToDS input, inout VaryingsMeshToPS output)
        {
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVertMeshTesselationCustomInterpolation' */
        }
        
        #endif // USE_CUSTOMINTERP_SUBSTRUCT
        
        #endif // TESSELLATION_ON
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingGBuffer.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "PathTracingDXR"
            Tags
            {
                "LightMode" = "PathTracingDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 ps5
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
        
        
        
            #define SHADERPASS SHADERPASS_PATH_TRACING
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define HAS_LIGHTLOOP 1
        
            #ifdef TESSELLATION_ON
            // World and normal are always available
                #define VARYINGS_DS_NEED_TANGENT
            #define VARYINGS_DS_NEED_TEXCOORD0
            #define VARYINGS_DS_NEED_TEXCOORD1
            #define VARYINGS_DS_NEED_TEXCOORD2
                #define VARYINGS_DS_NEED_COLOR
        	#endif
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _Tesselation_Factor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float4 _RimColor;
        float _RimLightPower;
        float2 _NoiseTiling;
        float4 _Noise_TexelSize;
        float2 _NoiseSpeed;
        float _EmissionNoisePower;
        float _Tess_Height_1_Min;
        float _Tess_Height_2_Min;
        float _Tess_Height_1_Max;
        float _Tess_Height_2_Max;
        float _Tess_Height_1_Offset;
        float _Tess_Height_2_Offset;
        float _Tess_Height_Blend_Transition;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _TessellationFactorMinDistance;
        float _TessellationFactorMaxDistance;
        float _TessellationFactorTriangleSize;
        float _TessellationShapeFactor;
        float _TessellationBackFaceCullEpsilon;
        float _TessellationMaxDisplacement;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_Noise);
        SAMPLER(sampler_Noise);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitPathTracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
             float3 TimeParameters;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_07d75b1d2628da808a2efb93a1d6219e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0 = _BaseTilingOffset;
            float _Property_7f998178363b4188ba2f07298ef869c1_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e.uv0 = IN.uv0;
            float4 _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_07d75b1d2628da808a2efb93a1d6219e_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e, _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2);
            float4 _Property_b83097c58639858680bf43881a95b0af_Out_0 = _BaseColor;
            float4 _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2, _Property_b83097c58639858680bf43881a95b0af_Out_0, _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2);
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[0];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[1];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[2];
            float _Split_88b9f51b320d4889a17ad140d4b4f0c6_A_4 = _Multiply_f572ff0def2d308e87a64e94a46c0d96_Out_2[3];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_R_1 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[0];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_G_2 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[1];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_B_3 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[2];
            float _Split_6a373913f8b5c587b3b25440e2351a6f_A_4 = _PlanarNM_0b8fbae0d009788d8cd595a3b9bf9f6e_XZ_2[3];
            float _Property_04a7bb2753456b8293b3e46e346b646e_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0 = float2(_Property_04a7bb2753456b8293b3e46e346b646e_Out_0, _Property_75c8631fc908bb8ba8542d2e70d18cbf_Out_0);
            float _Remap_65ca5af95590f88da70777476b6efd40_Out_3;
            Unity_Remap_float(_Split_6a373913f8b5c587b3b25440e2351a6f_A_4, float2 (0, 1), _Vector2_b2e1a3c487cdf88f9b5992b831ba24d6_Out_0, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float4 _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4;
            float3 _Combine_d07fea824e695b839a48350dc82f464b_RGB_5;
            float2 _Combine_d07fea824e695b839a48350dc82f464b_RG_6;
            Unity_Combine_float(_Split_88b9f51b320d4889a17ad140d4b4f0c6_R_1, _Split_88b9f51b320d4889a17ad140d4b4f0c6_G_2, _Split_88b9f51b320d4889a17ad140d4b4f0c6_B_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3, _Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Combine_d07fea824e695b839a48350dc82f464b_RGB_5, _Combine_d07fea824e695b839a48350dc82f464b_RG_6);
            UnityTexture2D _Property_1e449ff9f8e8ec828507233e8240eb11_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_4245c3b264047180b5c90a697d6cb278;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_4245c3b264047180b5c90a697d6cb278.uv0 = IN.uv0;
            float4 _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_1e449ff9f8e8ec828507233e8240eb11_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNM_4245c3b264047180b5c90a697d6cb278, _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2);
            float _Split_91a015dea8acd38b904ba0935328a5bc_R_1 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[0];
            float _Split_91a015dea8acd38b904ba0935328a5bc_G_2 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[1];
            float _Split_91a015dea8acd38b904ba0935328a5bc_B_3 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[2];
            float _Split_91a015dea8acd38b904ba0935328a5bc_A_4 = _PlanarNM_4245c3b264047180b5c90a697d6cb278_XZ_2[3];
            float _Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0 = _HeightMin;
            float _Property_9df7a44c8225168683743ac60c0c3c34_Out_0 = _HeightMax;
            float2 _Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0 = float2(_Property_fbcff1469ebf488394a8a89ddaf0eb2a_Out_0, _Property_9df7a44c8225168683743ac60c0c3c34_Out_0);
            float _Property_29ca14fd0b712983a38d63d2dd326e96_Out_0 = _HeightOffset;
            float2 _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2;
            Unity_Add_float2(_Vector2_9b1e95888c28bc8893f28c02b87fa448_Out_0, (_Property_29ca14fd0b712983a38d63d2dd326e96_Out_0.xx), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2);
            float _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_B_3, float2 (0, 1), _Add_cb503f8a09720d84bb03cbd89e37b80c_Out_2, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3);
            UnityTexture2D _Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_86a4657df480d48e8d3ad3b036731380_Out_0 = _Base2TilingOffset;
            float _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4.uv0 = IN.uv0;
            float4 _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_ba3a5f4cba7d0a8fa288ffc8267d6c0e_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4, _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2);
            float4 _Property_3561b11b899bda8e855826445cf628aa_Out_0 = _Base2Color;
            float4 _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2, _Property_3561b11b899bda8e855826445cf628aa_Out_0, _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2);
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[0];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[1];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[2];
            float _Split_013bfa9bd90cfb808c333c4f16ece1e7_A_4 = _Multiply_d2ec682582195e84acc4a8510f50f4b0_Out_2[3];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_R_1 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[0];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_G_2 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[1];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_B_3 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[2];
            float _Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4 = _PlanarNM_5aeab444ca6fd78ea56a01215880a5a4_XZ_2[3];
            float _Property_159cd47513de4f85a992da1f43f77c51_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0 = float2(_Property_159cd47513de4f85a992da1f43f77c51_Out_0, _Property_b1f3c7061cf84380b1a0ffc2c5f770db_Out_0);
            float _Remap_1214803bb0f7c387adc088fb938f7971_Out_3;
            Unity_Remap_float(_Split_f0ad0443bd9e2281b12c8580b91eeb7d_A_4, float2 (0, 1), _Vector2_eb0fcc98def54d83abe1cfec60457b78_Out_0, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3);
            float4 _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4;
            float3 _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5;
            float2 _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6;
            Unity_Combine_float(_Split_013bfa9bd90cfb808c333c4f16ece1e7_R_1, _Split_013bfa9bd90cfb808c333c4f16ece1e7_G_2, _Split_013bfa9bd90cfb808c333c4f16ece1e7_B_3, _Remap_1214803bb0f7c387adc088fb938f7971_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Combine_bc2cadadae618a8996e65c4764dee5db_RGB_5, _Combine_bc2cadadae618a8996e65c4764dee5db_RG_6);
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1 = IN.VertexColor[0];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2 = IN.VertexColor[1];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_B_3 = IN.VertexColor[2];
            float _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_A_4 = IN.VertexColor[3];
            float _Property_df2df7bb5cfc3381beee7ec454da7542_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.tex, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.samplerstate, _Property_c7b1e2df9f9b0e8eace9b2274924e69c_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.r;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_G_5 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.g;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_B_6 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.b;
            float _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_A_7 = _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_RGBA_0.a;
            float _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1);
            float _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3;
            Unity_Branch_float(_Property_df2df7bb5cfc3381beee7ec454da7542_Out_0, _OneMinus_ce5c3c0635d4ac86beb55115d0ebaed7_Out_1, _SampleTexture2D_175fb18fafc9598382f1f5f7e97bf30a_R_4, _Branch_af0c5e511241ce8eae748ae487df50fa_Out_3);
            UnityTexture2D _Property_de4f6eb48a629285a664dad7fb06438f_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_d5657f470f05ef839e4c257a20ace8cb;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_d5657f470f05ef839e4c257a20ace8cb.uv0 = IN.uv0;
            float4 _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_de4f6eb48a629285a664dad7fb06438f_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb, _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2);
            float _Split_83ec66b648ab6c84848b42686c256cd7_R_1 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[0];
            float _Split_83ec66b648ab6c84848b42686c256cd7_G_2 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[1];
            float _Split_83ec66b648ab6c84848b42686c256cd7_B_3 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[2];
            float _Split_83ec66b648ab6c84848b42686c256cd7_A_4 = _PlanarNM_d5657f470f05ef839e4c257a20ace8cb_XZ_2[3];
            float _Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0 = _HeightMin2;
            float _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0 = _HeightMax2;
            float2 _Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0 = float2(_Property_ce1750e5c69e97818667b412fc3f9f2c_Out_0, _Property_8e0f2ea54d8ede89bbabdf31a9bafd57_Out_0);
            float _Property_151ae2702b614585af2000f0a812960f_Out_0 = _HeightOffset2;
            float2 _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2;
            Unity_Add_float2(_Vector2_fb6c6dd7e70e768ba686e8e94153bb96_Out_0, (_Property_151ae2702b614585af2000f0a812960f_Out_0.xx), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2);
            float _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_B_3, float2 (0, 1), _Add_fd1b3d8e24e77087a55888eeb238f1a6_Out_2, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3);
            float _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2;
            Unity_Multiply_float_float(_Branch_af0c5e511241ce8eae748ae487df50fa_Out_3, _Remap_3d4180c0ab36ba86a5517b2645f0bfa7_Out_3, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2);
            float _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2;
            Unity_Multiply_float_float(_Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Multiply_2cb0e5aa384654828f0453a44884573c_Out_2, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2);
            float _Property_818c8af4b930138e81034c886614171d_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8;
            float4 _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_d07fea824e695b839a48350dc82f464b_RGBA_4, _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, _Combine_bc2cadadae618a8996e65c4764dee5db_RGBA_4, _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8, _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1);
            float _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3;
            Unity_Lerp_float(0, _Split_91a015dea8acd38b904ba0935328a5bc_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3);
            float _Property_956d1a93cb804081b21a76fd0c75a806_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2;
            Unity_Multiply_float_float(_Lerp_29ea2ea84a6fef808d49e2d53b01d09e_Out_3, _Property_956d1a93cb804081b21a76fd0c75a806_Out_0, _Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2);
            float _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1;
            Unity_Absolute_float(_Multiply_da33a86a3a83ad8882e2ace42dcbbb8a_Out_2, _Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1);
            float _Property_96173fa32f95148fa9d2a017748d5235_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_d81ebc6955897c87b8fb462f713aae50_Out_2;
            Unity_Power_float(_Absolute_d0c66bbc4bef0b86b919b1551fbecd1e_Out_1, _Property_96173fa32f95148fa9d2a017748d5235_Out_0, _Power_d81ebc6955897c87b8fb462f713aae50_Out_2);
            float _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3;
            Unity_Lerp_float(0, _Split_83ec66b648ab6c84848b42686c256cd7_A_4, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_R_1, _Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3);
            float _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2;
            Unity_Multiply_float_float(_Lerp_68f7c4fb999d0383a9eb53cb58457ef3_Out_3, _Property_cdc92db53a74ff82b15efa397f4420a6_Out_0, _Multiply_b761b264ce901b81b32b974d83993b3d_Out_2);
            float _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1;
            Unity_Absolute_float(_Multiply_b761b264ce901b81b32b974d83993b3d_Out_2, _Absolute_2511aaf2b812e58b93d44253984de16c_Out_1);
            float _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2;
            Unity_Power_float(_Absolute_2511aaf2b812e58b93d44253984de16c_Out_1, _Property_d4b118961a7b69819cd82c655db2cc9a_Out_0, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2);
            float _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3;
            Unity_Lerp_float(_Power_d81ebc6955897c87b8fb462f713aae50_Out_2, _Power_8f8fc0a113349e89a9699f2f8ae635ac_Out_2, _Split_85f63081c1b7bc8c83d6bbf4ba6648c5_G_2, _Lerp_067b23bb4f7e138598e06549c26e4223_Out_3);
            float4 _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_5933ed525fc7068893db7db94870134a_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Property_8f11d2cdc231478d9b34ac0d283e913c_Out_0, _Multiply_5933ed525fc7068893db7db94870134a_Out_2);
            UnityTexture2D _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0 = UnityBuildTexture2DStructNoScale(_Noise);
            float4 _UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0 = IN.uv0;
            float2 _Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0 = _NoiseSpeed;
            float2 _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2;
            Unity_Multiply_float2_float2(_Property_33fa8bdfb0f0bb8688be18ae6e94f238_Out_0, (IN.TimeParameters.x.xx), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2);
            float2 _Add_bc688882d8fee68487424542b1a69952_Out_2;
            Unity_Add_float2((_UV_e57542e45e09bd83a0b0d75bee815ba0_Out_0.xy), _Multiply_d1743a926d221d86bf25ce2971b39714_Out_2, _Add_bc688882d8fee68487424542b1a69952_Out_2);
            float4 _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_bc688882d8fee68487424542b1a69952_Out_2));
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_R_4 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.r;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_G_5 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.g;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_B_6 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.b;
            float _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7 = _SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_RGBA_0.a;
            float2 _Multiply_d613a21978306a858470588fdf147e8f_Out_2;
            Unity_Multiply_float2_float2(_Add_bc688882d8fee68487424542b1a69952_Out_2, float2(-1.2, -0.9), _Multiply_d613a21978306a858470588fdf147e8f_Out_2);
            float2 _Add_888a259bce586985b790e81a5145084b_Out_2;
            Unity_Add_float2(_Multiply_d613a21978306a858470588fdf147e8f_Out_2, float2(0.5, 0.5), _Add_888a259bce586985b790e81a5145084b_Out_2);
            float4 _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0 = SAMPLE_TEXTURE2D(_Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.tex, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.samplerstate, _Property_5dad1e642b111b8c9029c122c5b7db06_Out_0.GetTransformedUV(_Add_888a259bce586985b790e81a5145084b_Out_2));
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_R_4 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.r;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_G_5 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.g;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_B_6 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.b;
            float _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7 = _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_RGBA_0.a;
            float _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2;
            Unity_Minimum_float(_SampleTexture2D_a27c4214a5652683b47d19c84e9bce0a_A_7, _SampleTexture2D_808dc747569e3d868847c5cc5ad5985a_A_7, _Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2);
            float _Absolute_20087090b3600b8d97155e3798d64011_Out_1;
            Unity_Absolute_float(_Minimum_8cdededb0e2d0c8cb9c55aea6b3ffe15_Out_2, _Absolute_20087090b3600b8d97155e3798d64011_Out_1);
            float _Property_7a2d696ef1d8028a966365137be9d25e_Out_0 = _EmissionNoisePower;
            float _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2;
            Unity_Power_float(_Absolute_20087090b3600b8d97155e3798d64011_Out_1, _Property_7a2d696ef1d8028a966365137be9d25e_Out_0, _Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2);
            float _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2;
            Unity_Multiply_float_float(_Power_7efd269a8a6a918495ce4537bb7d4e70_Out_2, 20, _Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2);
            float _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3;
            Unity_Clamp_float(_Multiply_bd0f4d66b8878681b56c40f99f4de964_Out_2, 0.05, 1.2, _Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3);
            float4 _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2;
            Unity_Multiply_float4_float4(_Multiply_5933ed525fc7068893db7db94870134a_Out_2, (_Clamp_4bf6e5e2da6d74858baedac22ceed92b_Out_3.xxxx), _Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2);
            float4 _Property_c805fa28a9c59b8e93d45497d3768156_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            UnityTexture2D _Property_7c7049e15fdff386b535790d8666f609_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8.uv0 = IN.uv0;
            float4 _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_7c7049e15fdff386b535790d8666f609_Out_0, _Property_587a28253857318a9b2e59bfc8fb56a4_Out_0, _Property_7f998178363b4188ba2f07298ef869c1_Out_0, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8, _PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2);
            float _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_a3713a9c3874b6838d0eda971b9c62d8_XZ_2.xyz), _Property_d4b0759cf4647e81be065ec1465ce2b4_Out_0, _NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2);
            UnityTexture2D _Property_fa9f7890b20ad481a92543c04b237bde_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf.uv0 = IN.uv0;
            float4 _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_fa9f7890b20ad481a92543c04b237bde_Out_0, _Property_86a4657df480d48e8d3ad3b036731380_Out_0, _Property_6c5e16c615cab08a97c2a577642b9d83_Out_0, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf, _PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2);
            float _Property_8c31443b776727819a663c7ddce79064_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_d7b3ec528088a085a5102e025a1b45cf_XZ_2.xyz), _Property_8c31443b776727819a663c7ddce79064_Out_0, _NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2;
            float4 _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_f66a9108ea294886acc61513b41cc5e4_Out_2, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_NormalStrength_0fb86880ab8e368dac6d01b830e20ed8_Out_2, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2, _HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1);
            float3 _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1);
            float _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2;
            Unity_DotProduct_float3((_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz), _Normalize_5df7abbbd7525085a76db5c06cd07eac_Out_1, _DotProduct_21807a3955457c888958cf9b7de210fc_Out_2);
            float _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1;
            Unity_Saturate_float(_DotProduct_21807a3955457c888958cf9b7de210fc_Out_2, _Saturate_5e97c86e74edb580abca053af090c6f7_Out_1);
            float _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1;
            Unity_OneMinus_float(_Saturate_5e97c86e74edb580abca053af090c6f7_Out_1, _OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1);
            float _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1;
            Unity_Absolute_float(_OneMinus_7b1bd3770034c18ebfdde16827ce7e3a_Out_1, _Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1);
            float _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2;
            Unity_Power_float(_Absolute_88fd7f284bd69881b28c880575fd95d3_Out_1, 10, _Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2);
            float4 _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2;
            Unity_Multiply_float4_float4(_Property_c805fa28a9c59b8e93d45497d3768156_Out_0, (_Power_4b3fe30a97d0ea839370e99ea85481fc_Out_2.xxxx), _Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2);
            float _Property_23902821969b7a8aabcaa150279da760_Out_0 = _RimLightPower;
            float4 _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2;
            Unity_Multiply_float4_float4(_Multiply_87d1af1ee4944c89a1fcbf78397d4869_Out_2, (_Property_23902821969b7a8aabcaa150279da760_Out_0.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2);
            float4 _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2;
            Unity_Multiply_float4_float4((_Lerp_067b23bb4f7e138598e06549c26e4223_Out_3.xxxx), _Multiply_42053ea756d1ee879fcb7dd50ae97173_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2);
            float4 _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2;
            Unity_Add_float4(_Multiply_4b9f0595d554028fbd24cdf7b540783c_Out_2, _Multiply_95335a23ef9dc184b561431ea273c50e_Out_2, _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2);
            float4 _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3;
            Unity_Clamp_float4(_Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, float4(0, 0, 0, 0), _Add_9bb6da4206f8f68bab9a5fca0f1440f6_Out_2, _Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3);
            float _Split_579bec1940604a80b8bf85fbd157877e_R_1 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[0];
            float _Split_579bec1940604a80b8bf85fbd157877e_G_2 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[1];
            float _Split_579bec1940604a80b8bf85fbd157877e_B_3 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[2];
            float _Split_579bec1940604a80b8bf85fbd157877e_A_4 = _HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1[3];
            float _Property_afd0f3561038ef8487e614f350d364dd_Out_0 = _BaseMetallic;
            float _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2;
            Unity_Multiply_float_float(_Split_91a015dea8acd38b904ba0935328a5bc_R_1, _Property_afd0f3561038ef8487e614f350d364dd_Out_0, _Multiply_154e0f89b19c8e86926222afb13691e3_Out_2);
            float _Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0 = _BaseAORemapMin;
            float _Property_9d07c7a09a85da809f1d4661406e0888_Out_0 = _BaseAORemapMax;
            float2 _Vector2_10162c774de2a7838426399cfe98be82_Out_0 = float2(_Property_b82ce26778f44c8fa3510d1a8ed92d0d_Out_0, _Property_9d07c7a09a85da809f1d4661406e0888_Out_0);
            float _Remap_c45fda31db668c81a9e89e11297ec993_Out_3;
            Unity_Remap_float(_Split_91a015dea8acd38b904ba0935328a5bc_G_2, float2 (0, 1), _Vector2_10162c774de2a7838426399cfe98be82_Out_0, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3);
            float3 _Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0 = float3(_Multiply_154e0f89b19c8e86926222afb13691e3_Out_2, _Remap_c45fda31db668c81a9e89e11297ec993_Out_3, _Remap_65ca5af95590f88da70777476b6efd40_Out_3);
            float _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0 = _Base2Metallic;
            float _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2;
            Unity_Multiply_float_float(_Split_83ec66b648ab6c84848b42686c256cd7_R_1, _Property_4ead43cc6d37b68eb268dd80c3a561e9_Out_0, _Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2);
            float _Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0 = _Base2AORemapMin;
            float _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0 = _Base2AORemapMax;
            float2 _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0 = float2(_Property_e1ed9fe432388887abb17b07dcc5ca6b_Out_0, _Property_cb0cf7882dcbcf88989a12f73fb7c917_Out_0);
            float _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3;
            Unity_Remap_float(_Split_83ec66b648ab6c84848b42686c256cd7_G_2, float2 (0, 1), _Vector2_2d74d82ae79d5681a097c2e3ce20c913_Out_0, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3);
            float3 _Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0 = float3(_Multiply_eef7838a4634498b9cf12d1bee89d853_Out_2, _Remap_dcd2e2871e334281a15cdd1da6103c7f_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_a5073733c462898f8bf5761db76cd246;
            float4 _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_28c1e2dadb10138a9799d970043db9b0_Out_0, 1.0)), _Remap_18f2e96a438d6584ae2fd56f880de9ee_Out_3, (float4(_Vector3_ddb5452f73a0dc819b57dbe981a5f4e7_Out_0, 1.0)), _Multiply_74def30593cbbb8bbed03613a31cb89a_Out_2, _Property_818c8af4b930138e81034c886614171d_Out_0, _HeightBlend4_a5073733c462898f8bf5761db76cd246, _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1);
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[0];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[1];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_B_3 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[2];
            float _Split_93a6a2f8a95a1b80bea53b3c9628de7b_A_4 = _HeightBlend4_a5073733c462898f8bf5761db76cd246_OutVector4_1[3];
            surface.BaseColor = (_HeightBlend4_3c54b8d95cc1d48b8dba8c378cf862e8_OutVector4_1.xyz);
            surface.Emission = (_Clamp_f65c9de0772bcf8f937c17e88f7f0e5b_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_579bec1940604a80b8bf85fbd157877e_A_4;
            surface.Occlusion = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_G_2;
            surface.NormalTS = (_HeightBlend4_f16b274c70330783b3a3d7f9441e6ad2_OutVector4_1.xyz);
            surface.Metallic = _Split_93a6a2f8a95a1b80bea53b3c9628de7b_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            #ifdef TESSELLATION_ON
        
        float GetTessellationFactor(AttributesMesh input)
        {
            float tessellationFactor = 1.0;
        
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            tessellationFactor = vertexDescription.TessellationFactor;
        
            return tessellationFactor;
        }
        
        float GetMaxDisplacement()
        {
            return _TessellationMaxDisplacement;
        }
        
        // TODO: We should generate this struct like all the other varying struct
        VaryingsMeshToDS InterpolateWithBaryCoordsMeshToDS(VaryingsMeshToDS input0, VaryingsMeshToDS input1, VaryingsMeshToDS input2, float3 baryCoords)
        {
            VaryingsMeshToDS output;
        
            UNITY_TRANSFER_INSTANCE_ID(input0, output);
        
            TESSELLATION_INTERPOLATE_BARY(positionRWS, baryCoords);
            output.positionPredisplacementRWS = output.positionRWS;
            TESSELLATION_INTERPOLATE_BARY(normalWS, baryCoords);
        #ifdef VARYINGS_DS_NEED_TANGENT
            // This will interpolate the sign but should be ok in practice as we may expect a triangle to have same sign (? TO CHECK)
            TESSELLATION_INTERPOLATE_BARY(tangentWS, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD0
            TESSELLATION_INTERPOLATE_BARY(texCoord0, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD1
            TESSELLATION_INTERPOLATE_BARY(texCoord1, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD2
            TESSELLATION_INTERPOLATE_BARY(texCoord2, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_TEXCOORD3
            TESSELLATION_INTERPOLATE_BARY(texCoord3, baryCoords);
        #endif
        #ifdef VARYINGS_DS_NEED_COLOR
            TESSELLATION_INTERPOLATE_BARY(color, baryCoords);
        #endif
        
            // Pass-Through for custom interpolator
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorInterpolateWithBaryCoordsMeshToDS' */
        
            return output;
        }
        
        VertexDescriptionInputs VaryingsMeshToDSToVertexDescriptionInputs(VaryingsMeshToDS input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        
            return output;
        }
        
        #ifdef HAVE_TESSELLATION_MODIFICATION
        // tessellationFactors
        // x - 1->2 edge
        // y - 2->0 edge
        // z - 0->1 edge
        // w - inside tessellation factor
        VaryingsMeshToDS ApplyTessellationModification(VaryingsMeshToDS input, float3 timeParameters)
        {
            // HACK: As there is no specific tessellation stage for now in shadergraph, we reuse the vertex description mechanism.
            // It mean we store TessellationFactor inside vertex description causing extra read on both vertex and hull stage, but unusued paramater are optimize out by the shader compiler, so no impact.
            VertexDescriptionInputs vertexDescriptionInputs = VaryingsMeshToDSToVertexDescriptionInputs(input);
            // Override time paramters with used one (This is required to correctly handle motion vector for tessellation animation based on time)
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
            input.positionRWS += vertexDescription.TessellationDisplacement;
        
            return input;
        }
        
        #endif
        
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
        
        // This will evaluate the custom interpolator and update the varying structure
        void VertMeshTesselationCustomInterpolation(VaryingsMeshToDS input, inout VaryingsMeshToPS output)
        {
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVertMeshTesselationCustomInterpolation' */
        }
        
        #endif // USE_CUSTOMINTERP_SUBSTRUCT
        
        #endif // TESSELLATION_ON
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
            output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassPathTracing.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
    }
    CustomEditorForRenderPipeline "Rendering.HighDefinition.LitShaderGraphGUI" "UnityEngine.Rendering.HighDefinition.HDRenderPipelineAsset"
    CustomEditor "UnityEditor.ShaderGraph.GenericShaderGraphMaterialGUI"
    FallBack "Hidden/Shader Graph/FallbackError"
}