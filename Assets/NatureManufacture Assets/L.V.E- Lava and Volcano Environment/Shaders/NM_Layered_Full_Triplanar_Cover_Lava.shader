Shader "NatureManufacture/HDRP/Layered/Lava/Lava Full Triplanar Cover"
{
    Properties
    {
        _BaseColor("Base Color", Color) = (1, 1, 1, 0)
        [NoScaleOffset]_BaseColorMap("Base Map(RGB) Sm(A)", 2D) = "white" {}
        _BaseTilingOffset("Base Tiling and Offset", Vector) = (1, 1, 0, 0)
        _BaseTriplanarThreshold("Base Triplanar Threshold", Range(1, 8)) = 5
        [Normal][NoScaleOffset]_BaseNormalMap("Base Normal Map", 2D) = "bump" {}
        _BaseNormalScale("Base Normal Scale", Range(0, 8)) = 1
        [NoScaleOffset]_BaseMaskMap("Base Mask Map MT(R) AO(G) H(B) E(A)", 2D) = "white" {}
        _BaseMetallic("Base Metallic", Range(0, 1)) = 1
        _BaseAORemapMin("Base AO Remap Min", Range(0, 1)) = 0
        _BaseAORemapMax("Base AO Remap Max", Range(0, 1)) = 1
        _BaseSmoothnessRemapMin("Base Smoothness Remap Min", Range(0, 1)) = 0
        _BaseSmoothnessRemapMax("Base Smoothness Remap Max", Range(0, 1)) = 1
        [NoScaleOffset]_LayerMask("Layer Mask (R) Cover Mask (A)", 2D) = "black" {}
        [ToggleUI]_Invert_Layer_Mask("Invert Layer Mask", Float) = 0
        _Height_Transition("Height Blend Transition", Range(0.001, 1)) = 1
        _HeightMin("Height Min", Float) = 0
        _HeightMax("Height Max", Float) = 1
        _HeightOffset("Height Offset", Float) = 0
        _HeightMin2("Height 2 Min", Float) = 0
        _HeightMax2("Height 2 Max", Float) = 1
        _HeightOffset2("Height 2 Offset", Float) = 0
        _Base2Color("Base 2 Color", Color) = (1, 1, 1, 0)
        [NoScaleOffset]_Base2ColorMap("Base 2 Map(RGB) Sm(A)", 2D) = "white" {}
        _Base2TilingOffset("Base 2 Tiling and Offset", Vector) = (1, 1, 0, 0)
        _Base2TriplanarThreshold("Base 2 Triplanar Threshold", Range(1, 8)) = 5
        [Normal][NoScaleOffset]_Base2NormalMap("Base 2 Normal Map", 2D) = "bump" {}
        _Base2NormalScale("Base 2 Normal Scale", Range(0, 8)) = 1
        [NoScaleOffset]_Base2MaskMap("Base 2 Mask Map MT(R) AO(G) H(B) E(A)", 2D) = "white" {}
        _Base2Metallic("Base 2 Metallic", Range(0, 1)) = 1
        _Base2SmoothnessRemapMin("Base 2 Smoothness Remap Min", Range(0, 1)) = 0
        _Base2SmoothnessRemapMax("Base 2 Smoothness Remap Max", Range(0, 1)) = 1
        _Base2AORemapMin("Base 2 AO Remap Min", Range(0, 1)) = 0
        _Base2AORemapMax("Base 2 AO Remap Max", Range(0, 1)) = 1
        _CoverMaskPower("Cover Mask Power", Range(0, 10)) = 1
        _Cover_Amount("Cover Amount", Range(0, 2)) = 0
        _Cover_Amount_Grow_Speed("Cover Amount Grow Speed", Range(0, 3)) = 3
        _CoverDirection("Cover Direction", Vector) = (0, 1, 0, 0)
        _Cover_Max_Angle("Cover Max Angle", Range(0.001, 90)) = 35
        _Cover_Min_Height("Cover Min Height", Float) = -10000
        _Cover_Min_Height_Blending("Cover Min Height Blending", Range(0, 500)) = 1
        _CoverBaseColor("Cover Base Color", Color) = (1, 1, 1, 0)
        [NoScaleOffset]_CoverBaseColorMap("Cover Base Map(RGB) Sm(A)", 2D) = "white" {}
        _CoverTilingOffset("Cover Tiling Offset", Vector) = (1, 1, 0, 0)
        _CoverTriplanarThreshold("Cover Triplanar Threshold", Range(1, 8)) = 5
        [Normal][NoScaleOffset]_CoverNormalMap("Cover Normal Map", 2D) = "bump" {}
        _CoverNormalScale("Cover Normal Scale", Range(0, 8)) = 1
        _CoverNormalBlendHardness("Cover Normal Blend Hardness", Range(0, 8)) = 1
        _CoverHardness("Cover Hardness", Range(0, 10)) = 5
        _CoverHeightMapMin("Cover Height Map Min", Float) = 0
        _CoverHeightMapMax("Cover Height Map Max", Float) = 1
        _CoverHeightMapOffset("Cover Height Map Offset", Float) = 0
        [NoScaleOffset]_CoverMaskMap("Cover Mask Map MT(R) AO(G) H(B) E(A)", 2D) = "white" {}
        _CoverMetallic("Cover Metallic", Range(0, 1)) = 1
        _CoverAORemapMin("Cover AO Remap Min", Range(0, 1)) = 0
        _CoverAORemapMax("Cover AO Remap Max", Range(0, 1)) = 1
        _CoverSmoothnessRemapMin("Cover Smoothness Remap Min", Range(0, 1)) = 0
        _CoverSmoothnessRemapMax("Cover Smoothness Remap Max", Range(0, 1)) = 1
        [HDR]_LavaEmissionColor("Lava Emission Color", Color) = (1, 0.1862035, 0, 0)
        _BaseEmissionMaskIntensivity("Base Emission Mask Intensivity", Range(0, 100)) = 0
        _BaseEmissionMaskTreshold("Base Emission Mask Treshold", Range(0, 100)) = 0.01
        _Base2EmissionMaskIntensivity("Base 2 Emission Mask Intensivity", Range(0, 100)) = 0.01
        _Base2EmissionMaskTreshold("Base 2 Emission Mask Treshold", Range(0, 100)) = 0
        _CoverEmissionMaskTreshold("Cover Emission Mask Treshold", Range(0, 100)) = 0
        _CoverEmissionMaskIntensivity("Cover Emission Mask Intensivity", Range(0, 100)) = 0.01
        [HDR]_RimColor("Rim Color", Color) = (1, 0, 0, 0)
        _RimLightPower("Rim Light Power", Float) = 4
        [ToggleUI]_USEDYNAMICCOVERTSTATICMASKF("Use Dynamic Cover (T) Static Mask (F)", Float) = 1
        [HideInInspector]_EmissionColor("Color", Color) = (1, 1, 1, 1)
        [HideInInspector]_RenderQueueType("Float", Float) = 1
        [HideInInspector][ToggleUI]_AddPrecomputedVelocity("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_DepthOffsetEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_ConservativeDepthOffsetEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_TransparentWritingMotionVec("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_AlphaCutoffEnable("Boolean", Float) = 0
        [HideInInspector]_TransparentSortPriority("_TransparentSortPriority", Float) = 0
        [HideInInspector][ToggleUI]_UseShadowThreshold("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_DoubleSidedEnable("Boolean", Float) = 0
        [HideInInspector][Enum(Flip, 0, Mirror, 1, None, 2)]_DoubleSidedNormalMode("Float", Float) = 2
        [HideInInspector]_DoubleSidedConstants("Vector4", Vector) = (1, 1, -1, 0)
        [HideInInspector][Enum(Auto, 0, On, 1, Off, 2)]_DoubleSidedGIMode("Float", Float) = 0
        [HideInInspector][ToggleUI]_TransparentDepthPrepassEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_TransparentDepthPostpassEnable("Boolean", Float) = 0
        [HideInInspector]_SurfaceType("Float", Float) = 0
        [HideInInspector]_BlendMode("Float", Float) = 0
        [HideInInspector]_SrcBlend("Float", Float) = 1
        [HideInInspector]_DstBlend("Float", Float) = 0
        [HideInInspector]_AlphaSrcBlend("Float", Float) = 1
        [HideInInspector]_AlphaDstBlend("Float", Float) = 0
        [HideInInspector][ToggleUI]_AlphaToMask("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_AlphaToMaskInspectorValue("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_ZWrite("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_TransparentZWrite("Boolean", Float) = 0
        [HideInInspector]_CullMode("Float", Float) = 2
        [HideInInspector][ToggleUI]_EnableFogOnTransparent("Boolean", Float) = 1
        [HideInInspector]_CullModeForward("Float", Float) = 2
        [HideInInspector][Enum(Front, 1, Back, 2)]_TransparentCullMode("Float", Float) = 2
        [HideInInspector][Enum(UnityEditor.Rendering.HighDefinition.OpaqueCullMode)]_OpaqueCullMode("Float", Float) = 2
        [HideInInspector]_ZTestDepthEqualForOpaque("Float", Int) = 4
        [HideInInspector][Enum(UnityEngine.Rendering.CompareFunction)]_ZTestTransparent("Float", Float) = 4
        [HideInInspector][ToggleUI]_TransparentBackfaceEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_RequireSplitLighting("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_ReceivesSSR("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_ReceivesSSRTransparent("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_EnableBlendModePreserveSpecularLighting("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_SupportDecals("Boolean", Float) = 1
        [HideInInspector]_StencilRef("Float", Int) = 0
        [HideInInspector]_StencilWriteMask("Float", Int) = 6
        [HideInInspector]_StencilRefDepth("Float", Int) = 8
        [HideInInspector]_StencilWriteMaskDepth("Float", Int) = 8
        [HideInInspector]_StencilRefMV("Float", Int) = 40
        [HideInInspector]_StencilWriteMaskMV("Float", Int) = 40
        [HideInInspector]_StencilRefDistortionVec("Float", Int) = 4
        [HideInInspector]_StencilWriteMaskDistortionVec("Float", Int) = 4
        [HideInInspector]_StencilWriteMaskGBuffer("Float", Int) = 14
        [HideInInspector]_StencilRefGBuffer("Float", Int) = 10
        [HideInInspector]_ZTestGBuffer("Float", Int) = 4
        [HideInInspector][ToggleUI]_RayTracing("Boolean", Float) = 0
        [HideInInspector][Enum(None, 0, Box, 1, Sphere, 2, Thin, 3)]_RefractionModel("Float", Float) = 0
        [HideInInspector][NoScaleOffset]unity_Lightmaps("unity_Lightmaps", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset]unity_LightmapsInd("unity_LightmapsInd", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset]unity_ShadowMasks("unity_ShadowMasks", 2DArray) = "" {}
    }
    SubShader
    {
        Tags
        {
            "RenderPipeline"="HDRenderPipeline"
            "RenderType"="HDLitShader"
            "Queue"="Geometry+225"
            "ShaderGraphShader"="true"
            "ShaderGraphTargetId"="HDLitSubTarget"
        }
        Pass
        {
            Name "ShadowCaster"
            Tags
            {
                "LightMode" = "ShadowCaster"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        ColorMask 0
        ZClip [_ZClip]
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_SHADOWS
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float4 _BaseTilingOffset;
        float _BaseTriplanarThreshold;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2TriplanarThreshold;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float3 _CoverDirection;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverTriplanarThreshold;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float _CoverEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float4 _RimColor;
        float _RimLightPower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Lava_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options renderinglayer procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float
        {
        };
        
        void SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(float3 Vector3_314C8600, Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d;
            float3 _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1;
            SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(IN.ObjectSpacePosition, _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d, _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1);
            description.Position = _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float Alpha;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            surface.Alpha = 1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "META"
            Tags
            {
                "LightMode" = "META"
            }
        
            // Render State
            Cull Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ EDITOR_VISUALIZATION
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_TEXCOORD3
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_POSITIONPREDISPLACEMENT_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_TEXCOORD3
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_LIGHT_TRANSPORT
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float4 _BaseTilingOffset;
        float _BaseTriplanarThreshold;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2TriplanarThreshold;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float3 _CoverDirection;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverTriplanarThreshold;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float _CoverEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float4 _RimColor;
        float _RimLightPower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv1 : TEXCOORD1;
             float4 uv2 : TEXCOORD2;
             float4 uv3 : TEXCOORD3;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 positionPredisplacementRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 texCoord3;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float3 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
             float4 interp6 : INTERP6;
             float4 interp7 : INTERP7;
             float4 interp8 : INTERP8;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.positionPredisplacementRWS;
            output.interp2.xyz =  input.normalWS;
            output.interp3.xyzw =  input.tangentWS;
            output.interp4.xyzw =  input.texCoord0;
            output.interp5.xyzw =  input.texCoord1;
            output.interp6.xyzw =  input.texCoord2;
            output.interp7.xyzw =  input.texCoord3;
            output.interp8.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.positionPredisplacementRWS = input.interp1.xyz;
            output.normalWS = input.interp2.xyz;
            output.tangentWS = input.interp3.xyzw;
            output.texCoord0 = input.interp4.xyzw;
            output.texCoord1 = input.interp5.xyzw;
            output.texCoord2 = input.interp6.xyzw;
            output.texCoord3 = input.interp7.xyzw;
            output.color = input.interp8.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float4 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2));
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float4 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2));
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float4 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float4 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float4(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float4 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float4(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float4 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float4(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        YZ_3 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0;
        XY_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        struct Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2);
        float3 _Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float3 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float3_float3(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2;
        Unity_Multiply_float_float(_Split_6299d4ddcc4c74828aea40a46fdb896e_B_3, -1, _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2);
        float2 _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0 = float2(_Multiply_de711f4a4614bd89a463b53374cf4036_Out_2, 1);
        float2 _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2));
        _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0);
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float2 _Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0 = float2(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4, _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5);
        float2 _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2;
        Unity_Multiply_float2_float2(_Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0, _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2);
        float2 _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_b227c84042055e8faa1a9fdc69529707_Out_2;
        Unity_Add_float2(_Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2, _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0, _Add_b227c84042055e8faa1a9fdc69529707_Out_2);
        float _Split_2cfb9eacd8762483941459cdf28bda97_R_1 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[0];
        float _Split_2cfb9eacd8762483941459cdf28bda97_G_2 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[1];
        float _Split_2cfb9eacd8762483941459cdf28bda97_B_3 = 0;
        float _Split_2cfb9eacd8762483941459cdf28bda97_A_4 = 0;
        float _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0 = float3(_Split_2cfb9eacd8762483941459cdf28bda97_R_1, _Split_2cfb9eacd8762483941459cdf28bda97_G_2, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float3_float3(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_R_1, 1);
        float2 _Multiply_862402885a49f18cb87278ab53bc6744_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_862402885a49f18cb87278ab53bc6744_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_862402885a49f18cb87278ab53bc6744_Out_2));
        _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0);
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float _Multiply_4649b768be76d784a3284bacde795359_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Multiply_4649b768be76d784a3284bacde795359_Out_2);
        float2 _Vector2_819fcd5eb484438eacad1987576d7d67_Out_0 = float2(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4, _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5);
        float2 _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2;
        Unity_Multiply_float2_float2(_Vector2_819fcd5eb484438eacad1987576d7d67_Out_0, _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2);
        float2 _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2;
        Unity_Add_float2(_Multiply_58530ebb3c6d798b93686a76247bf505_Out_2, _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0, _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2);
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[0];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[1];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_B_3 = 0;
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_A_4 = 0;
        float3 _Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0 = float3(_Multiply_4649b768be76d784a3284bacde795359_Out_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1);
        float3 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float3_float3(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float3 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float3(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float3 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float3(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float3 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float3(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        float3x3 Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1 = TransformWorldToTangent(_Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2.xyz, Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World);
        float3 _Normalize_15ef346824db0a8797631ed8b998e673_Out_1;
        Unity_Normalize_float3(_Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1, _Normalize_15ef346824db0a8797631ed8b998e673_Out_1);
        XYZ_1 = (float4(_Normalize_15ef346824db0a8797631ed8b998e673_Out_1, 1.0));
        XZ_2 = (float4(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, 1.0));
        YZ_3 = (float4(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, 1.0));
        XY_4 = (float4(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_d92b1410e1d6bc81a86076b09e35f302_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_d4a357b2daff5587ae46468726a33797_Out_0 = _BaseTilingOffset;
            float4 _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_d4a357b2daff5587ae46468726a33797_Out_0, _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2);
            float _Property_b168be530d5b4082a2816fc835b55e19_Out_0 = _BaseTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_d92b1410e1d6bc81a86076b09e35f302_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4);
            float4 _Property_17f0f1bec4ec6485881127275660d4f1_Out_0 = _BaseColor;
            float4 _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _Property_17f0f1bec4ec6485881127275660d4f1_Out_0, _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2);
            float _Split_473d9bf097327483847264a7cc5c61f9_R_1 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[0];
            float _Split_473d9bf097327483847264a7cc5c61f9_G_2 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[1];
            float _Split_473d9bf097327483847264a7cc5c61f9_B_3 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[2];
            float _Split_473d9bf097327483847264a7cc5c61f9_A_4 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[3];
            float _Split_2ffd394bfe87c786b791f90b404c032d_R_1 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[0];
            float _Split_2ffd394bfe87c786b791f90b404c032d_G_2 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[1];
            float _Split_2ffd394bfe87c786b791f90b404c032d_B_3 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[2];
            float _Split_2ffd394bfe87c786b791f90b404c032d_A_4 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[3];
            float _Property_a1b1d767544de781a39d6415872f7285_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0 = float2(_Property_a1b1d767544de781a39d6415872f7285_Out_0, _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0);
            float _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3;
            Unity_Remap_float(_Split_2ffd394bfe87c786b791f90b404c032d_A_4, float2 (0, 1), _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3);
            float4 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4;
            float3 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5;
            float2 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6;
            Unity_Combine_float(_Split_473d9bf097327483847264a7cc5c61f9_R_1, _Split_473d9bf097327483847264a7cc5c61f9_G_2, _Split_473d9bf097327483847264a7cc5c61f9_B_3, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6);
            UnityTexture2D _Property_080b6cb46abb00848263c964726eac36_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_080b6cb46abb00848263c964726eac36_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4);
            float _Split_866a663ed067f988862843fe32765ff8_R_1 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[0];
            float _Split_866a663ed067f988862843fe32765ff8_G_2 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[1];
            float _Split_866a663ed067f988862843fe32765ff8_B_3 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[2];
            float _Split_866a663ed067f988862843fe32765ff8_A_4 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[3];
            float _Property_3b9891099f2f3e84b765eb453f6f6810_Out_0 = _HeightMin;
            float _Property_bde21360babd9089a90a45cd2843925b_Out_0 = _HeightMax;
            float2 _Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0 = float2(_Property_3b9891099f2f3e84b765eb453f6f6810_Out_0, _Property_bde21360babd9089a90a45cd2843925b_Out_0);
            float _Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0 = _HeightOffset;
            float2 _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2;
            Unity_Add_float2(_Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0, (_Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0.xx), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2);
            float _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_B_3, float2 (0, 1), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3);
            UnityTexture2D _Property_11586ef261ce8e87953046ff84ce22ab_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_221c724b2137d58c8c387fee5b48be14_Out_0 = _Base2TilingOffset;
            float4 _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_221c724b2137d58c8c387fee5b48be14_Out_0, _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2);
            float _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0 = _Base2TriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_ca3aaaec266f85859b75e37163da7cba;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_11586ef261ce8e87953046ff84ce22ab_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4);
            float4 _Property_60dff9cc4310ea89874789591a78d84b_Out_0 = _Base2Color;
            float4 _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _Property_60dff9cc4310ea89874789591a78d84b_Out_0, _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2);
            float _Split_96d66d11efd8418aa95cffd04b788c51_R_1 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[0];
            float _Split_96d66d11efd8418aa95cffd04b788c51_G_2 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[1];
            float _Split_96d66d11efd8418aa95cffd04b788c51_B_3 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[2];
            float _Split_96d66d11efd8418aa95cffd04b788c51_A_4 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[3];
            float _Split_837cde6fde77238baac188382335775d_R_1 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[0];
            float _Split_837cde6fde77238baac188382335775d_G_2 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[1];
            float _Split_837cde6fde77238baac188382335775d_B_3 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[2];
            float _Split_837cde6fde77238baac188382335775d_A_4 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[3];
            float _Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0 = float2(_Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0, _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0);
            float _Remap_697b96439d3a0983800a051b2b4edd90_Out_3;
            Unity_Remap_float(_Split_837cde6fde77238baac188382335775d_A_4, float2 (0, 1), _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3);
            float4 _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4;
            float3 _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5;
            float2 _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6;
            Unity_Combine_float(_Split_96d66d11efd8418aa95cffd04b788c51_R_1, _Split_96d66d11efd8418aa95cffd04b788c51_G_2, _Split_96d66d11efd8418aa95cffd04b788c51_B_3, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5, _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6);
            float _Property_312b653a29ccc087849b1493611fb73c_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.tex, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.samplerstate, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.r;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_G_5 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.g;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_B_6 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.b;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_A_7 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.a;
            float _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1);
            float _Branch_6b7615e16629338ba87d3570a0096f66_Out_3;
            Unity_Branch_float(_Property_312b653a29ccc087849b1493611fb73c_Out_0, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1, _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _Branch_6b7615e16629338ba87d3570a0096f66_Out_3);
            UnityTexture2D _Property_b4749c77856157858fffde0aed55fc74_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_b4749c77856157858fffde0aed55fc74_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4);
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[0];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[1];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[2];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[3];
            float _Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0 = _HeightMin2;
            float _Property_145222f375008a879315637be0f172c5_Out_0 = _HeightMax2;
            float2 _Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0 = float2(_Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0, _Property_145222f375008a879315637be0f172c5_Out_0);
            float _Property_8be924d801daee88b294af592a560e75_Out_0 = _HeightOffset2;
            float2 _Add_37703f1eb9ce078daaedca833705f5dd_Out_2;
            Unity_Add_float2(_Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0, (_Property_8be924d801daee88b294af592a560e75_Out_0.xx), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2);
            float _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3, float2 (0, 1), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3);
            float _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2;
            Unity_Multiply_float_float(_Branch_6b7615e16629338ba87d3570a0096f66_Out_3, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3, _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2);
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_R_1 = IN.VertexColor[0];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2 = IN.VertexColor[1];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3 = IN.VertexColor[2];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_A_4 = IN.VertexColor[3];
            float _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2;
            Unity_Multiply_float_float(_Multiply_d9f42ca072d9188ab2566400157a199f_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2);
            float _Property_c0dc9341fd635288a1c2869945617704_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5;
            float4 _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1);
            UnityTexture2D _Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_9bedb34aba10fa89a5f5b18919971491_Out_0 = _CoverTilingOffset;
            float4 _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_9bedb34aba10fa89a5f5b18919971491_Out_0, _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2);
            float _Property_bf361924f27f848994241bda91fc2005_Out_0 = _CoverTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4);
            float4 _Property_19547f2fe562798683b730e775cbfb39_Out_0 = _CoverBaseColor;
            float4 _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _Property_19547f2fe562798683b730e775cbfb39_Out_0, _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2);
            float _Split_0d31d5c6a74be68484498325bbfacd3c_R_1 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[0];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_G_2 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[1];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_B_3 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[2];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_A_4 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[3];
            float _Split_90237729226dca849687b6c56fde4cbe_R_1 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[0];
            float _Split_90237729226dca849687b6c56fde4cbe_G_2 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[1];
            float _Split_90237729226dca849687b6c56fde4cbe_B_3 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[2];
            float _Split_90237729226dca849687b6c56fde4cbe_A_4 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[3];
            float _Property_007771e9e06cc78b9844d01f8129c541_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0 = float2(_Property_007771e9e06cc78b9844d01f8129c541_Out_0, _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0);
            float _Remap_690ea2a75496a283a66513f691c4f9db_Out_3;
            Unity_Remap_float(_Split_90237729226dca849687b6c56fde4cbe_A_4, float2 (0, 1), _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3);
            float4 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4;
            float3 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5;
            float2 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6;
            Unity_Combine_float(_Split_0d31d5c6a74be68484498325bbfacd3c_R_1, _Split_0d31d5c6a74be68484498325bbfacd3c_G_2, _Split_0d31d5c6a74be68484498325bbfacd3c_B_3, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6);
            float _Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_89bda93a711241049250cd3215f22c11_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0 = IN.uv0;
            float4 _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0 = SAMPLE_TEXTURE2D(_Property_89bda93a711241049250cd3215f22c11_Out_0.tex, _Property_89bda93a711241049250cd3215f22c11_Out_0.samplerstate, _Property_89bda93a711241049250cd3215f22c11_Out_0.GetTransformedUV((_UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0.xy)));
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_R_4 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.r;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_G_5 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.g;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_B_6 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.b;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_A_7 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.a;
            float _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0 = _CoverMaskPower;
            float _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_b8be215db546638398ea07060feb5224_A_7, _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0, _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2);
            float _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3;
            Unity_Clamp_float(_Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2, 0, 1, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3);
            float3 _Property_509761afcb3aad8f9a29405c122dbf08_Out_0 = _CoverDirection;
            UnityTexture2D _Property_72c615246e955087b85288c29905f048_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_72c615246e955087b85288c29905f048_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4);
            float _Property_7edd97bda70eb38a8c4253094700be37_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1.xyz), _Property_7edd97bda70eb38a8c4253094700be37_Out_0, _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2);
            UnityTexture2D _Property_6809577d1aa24984aa957e13d0574602_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_6809577d1aa24984aa957e13d0574602_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4);
            float _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1.xyz), _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0, _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_1276d06b2c028187bc5fb2018f7da110;
            float4 _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1);
            UnityTexture2D _Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4);
            float _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0, _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2);
            float3 _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, IN.WorldSpaceNormal, _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2);
            float _Split_e74c8f300b486e86a5700118b60b7885_R_1 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[0];
            float _Split_e74c8f300b486e86a5700118b60b7885_G_2 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[1];
            float _Split_e74c8f300b486e86a5700118b60b7885_B_3 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[2];
            float _Split_e74c8f300b486e86a5700118b60b7885_A_4 = 0;
            float _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2;
            Unity_Add_float(_Split_e74c8f300b486e86a5700118b60b7885_R_1, _Split_e74c8f300b486e86a5700118b60b7885_G_2, _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2);
            float _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2;
            Unity_Add_float(_Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2, _Split_e74c8f300b486e86a5700118b60b7885_B_3, _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2);
            float _Property_ca7cc2d889a56683904c7546a72cedbf_Out_0 = _Cover_Amount;
            float _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2;
            Unity_Subtract_float(4, _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2);
            float _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2;
            Unity_Divide_float(_Property_ca7cc2d889a56683904c7546a72cedbf_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2);
            float _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1;
            Unity_Absolute_float(_Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2, _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1);
            float _Power_681b2745dbae62839624b98240ca04f7_Out_2;
            Unity_Power_float(_Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Power_681b2745dbae62839624b98240ca04f7_Out_2);
            float _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3;
            Unity_Clamp_float(_Power_681b2745dbae62839624b98240ca04f7_Out_2, 0, 2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3);
            float _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2;
            Unity_Multiply_float_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2);
            float _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1;
            Unity_Saturate_float(_Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2, _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1);
            float _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3;
            Unity_Clamp_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, 0, 0.9999, _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3);
            float _Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0 = _Cover_Max_Angle;
            float _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2;
            Unity_Divide_float(_Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0, 45, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2);
            float _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1;
            Unity_OneMinus_float(_Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1);
            float _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2;
            Unity_Subtract_float(_Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1, _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2);
            float _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3;
            Unity_Clamp_float(_Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2, 0, 2, _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3);
            float _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2;
            Unity_Divide_float(1, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2);
            float _Multiply_749d76436ed5e58abec68ae130db866b_Out_2;
            Unity_Multiply_float_float(_Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2, _Multiply_749d76436ed5e58abec68ae130db866b_Out_2);
            float _Absolute_043a189b52847189ad0575955b41f403_Out_1;
            Unity_Absolute_float(_Multiply_749d76436ed5e58abec68ae130db866b_Out_2, _Absolute_043a189b52847189ad0575955b41f403_Out_1);
            float _Property_d4f4330ee4eced8d88fb074732401835_Out_0 = _CoverHardness;
            float _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2;
            Unity_Power_float(_Absolute_043a189b52847189ad0575955b41f403_Out_1, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2);
            float _Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0 = _Cover_Min_Height;
            float _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1;
            Unity_OneMinus_float(_Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0, _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1);
            float _Split_815418660959f184b10470e678ebae30_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_815418660959f184b10470e678ebae30_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_815418660959f184b10470e678ebae30_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_815418660959f184b10470e678ebae30_A_4 = 0;
            float _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2;
            Unity_Add_float(_OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1, _Split_815418660959f184b10470e678ebae30_G_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2);
            float _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, 1, _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2);
            float _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3;
            Unity_Clamp_float(_Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2, 0, 1, _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3);
            float _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0 = _Cover_Min_Height_Blending;
            float _Add_e57f70c02382b28397642f05af76cfb0_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0, _Add_e57f70c02382b28397642f05af76cfb0_Out_2);
            float _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2;
            Unity_Divide_float(_Add_e57f70c02382b28397642f05af76cfb0_Out_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2);
            float _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1;
            Unity_OneMinus_float(_Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2, _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1);
            float _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2;
            Unity_Add_float(_OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1, -0.5, _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2);
            float _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3;
            Unity_Clamp_float(_Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2, 0, 1, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3);
            float _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2;
            Unity_Add_float(_Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3, _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2);
            float _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3;
            Unity_Clamp_float(_Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2, 0, 1, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3);
            float _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2;
            Unity_Multiply_float_float(_Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2);
            float _Multiply_5336a32115eb29849650688fd99ee185_Out_2;
            Unity_Multiply_float_float(_Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_5336a32115eb29849650688fd99ee185_Out_2);
            float3 _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2, (_Multiply_5336a32115eb29849650688fd99ee185_Out_2.xxx), _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3);
            float3x3 Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1 = normalize(mul(Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent, _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3.xyz).xyz);
            float3 _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1, _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2);
            float _Split_b821124768adb688becbc5d63b26adb4_R_1 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[0];
            float _Split_b821124768adb688becbc5d63b26adb4_G_2 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[1];
            float _Split_b821124768adb688becbc5d63b26adb4_B_3 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[2];
            float _Split_b821124768adb688becbc5d63b26adb4_A_4 = 0;
            float _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2;
            Unity_Add_float(_Split_b821124768adb688becbc5d63b26adb4_R_1, _Split_b821124768adb688becbc5d63b26adb4_G_2, _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2);
            float _Add_508b788633abc0829f0843d1b1f942c2_Out_2;
            Unity_Add_float(_Add_fd43b427bfe3748cb0ced35df3b22159_Out_2, _Split_b821124768adb688becbc5d63b26adb4_B_3, _Add_508b788633abc0829f0843d1b1f942c2_Out_2);
            float _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2;
            Unity_Multiply_float_float(_Add_508b788633abc0829f0843d1b1f942c2_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2);
            float _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2;
            Unity_Multiply_float_float(_Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2);
            float _Multiply_b907f38702eabd80a6c67777243459de_Out_2;
            Unity_Multiply_float_float(_Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2);
            float _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2;
            Unity_Multiply_float_float(_Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2, _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2);
            UnityTexture2D _Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_9b6d5da081e434808a5840cbd915bb28;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4);
            float _Split_b20618c84cffd183aae7f27c2d0772cb_R_1 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[0];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_G_2 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[1];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_B_3 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[2];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_A_4 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[3];
            float _Property_987a8037965fff81a4930627358fc6e3_Out_0 = _CoverHeightMapMin;
            float _Property_89aeacdce0000086a98e45df79358a56_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_d18b9686bb8af48c85d99d319830c000_Out_0 = float2(_Property_987a8037965fff81a4930627358fc6e3_Out_0, _Property_89aeacdce0000086a98e45df79358a56_Out_0);
            float _Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0 = _CoverHeightMapOffset;
            float2 _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2;
            Unity_Add_float2(_Vector2_d18b9686bb8af48c85d99d319830c000_Out_0, (_Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0.xx), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2);
            float _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_B_3, float2 (0, 1), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3);
            float _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2;
            Unity_Multiply_float_float(_Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3, _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2);
            float _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2;
            Unity_Multiply_float_float(_Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2, _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2);
            float _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1;
            Unity_Saturate_float(_Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1);
            float _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2;
            Unity_Multiply_float_float(_Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2);
            float _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3;
            Unity_Branch_float(_Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3);
            float4 _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3;
            Unity_Lerp_float4(_HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxxx), _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3);
            float _Split_2d3577de3d626c8683c82ad2f5337a65_R_1 = IN.VertexColor[0];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_G_2 = IN.VertexColor[1];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_B_3 = IN.VertexColor[2];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_A_4 = IN.VertexColor[3];
            float _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_R_1, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1);
            float _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3;
            Unity_Lerp_float(0, _Split_866a663ed067f988862843fe32765ff8_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3);
            float _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2;
            Unity_Multiply_float_float(_Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3, _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0, _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2);
            float _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1;
            Unity_Absolute_float(_Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2, _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1);
            float _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2;
            Unity_Power_float(_Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1, _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0, _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2);
            float _Lerp_773fc936303dec838cfd7db23903de62_Out_3;
            Unity_Lerp_float(0, _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_773fc936303dec838cfd7db23903de62_Out_3);
            float _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2;
            Unity_Multiply_float_float(_Lerp_773fc936303dec838cfd7db23903de62_Out_3, _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0, _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2);
            float _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1;
            Unity_Absolute_float(_Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2, _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1);
            float _Property_013b523e19192f8593f2bcc154316b47_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_e5638390467fac89ae1f7b85fc93815b_Out_2;
            Unity_Power_float(_Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1, _Property_013b523e19192f8593f2bcc154316b47_Out_0, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2);
            float _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_B_3, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1);
            float _Lerp_594e5a2708dbe78894dc533303332962_Out_3;
            Unity_Lerp_float(_Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1, _Lerp_594e5a2708dbe78894dc533303332962_Out_3);
            float _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3;
            Unity_Lerp_float(0, _Split_b20618c84cffd183aae7f27c2d0772cb_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3);
            float _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_688d5e023afdea8f88054040203609ac_Out_2;
            Unity_Multiply_float_float(_Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3, _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0, _Multiply_688d5e023afdea8f88054040203609ac_Out_2);
            float _Absolute_b525073675d39a899115ebede3255a97_Out_1;
            Unity_Absolute_float(_Multiply_688d5e023afdea8f88054040203609ac_Out_2, _Absolute_b525073675d39a899115ebede3255a97_Out_1);
            float _Property_b14b960de7b30882a67b30cf91355226_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_fd909f27e3507185bcb862a17c2e116e_Out_2;
            Unity_Power_float(_Absolute_b525073675d39a899115ebede3255a97_Out_1, _Property_b14b960de7b30882a67b30cf91355226_Out_0, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2);
            float _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3;
            Unity_Lerp_float(_Lerp_594e5a2708dbe78894dc533303332962_Out_3, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3, _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3);
            float4 _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0, _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2);
            float4 _Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_0709d20641a7668b85ded82df467d4f4_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_0709d20641a7668b85ded82df467d4f4_Out_0, _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2);
            float3 _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3);
            float3 _Normalize_5840852513c50882be7896a398055011_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5840852513c50882be7896a398055011_Out_1);
            float _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2;
            Unity_DotProduct_float3(_Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3, _Normalize_5840852513c50882be7896a398055011_Out_1, _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2);
            float _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1;
            Unity_Saturate_float(_DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2, _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1);
            float _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1;
            Unity_OneMinus_float(_Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1, _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1);
            float _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1;
            Unity_Absolute_float(_OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1, _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1);
            float _Power_0f033f56feb0de89a9152324c9659e0a_Out_2;
            Unity_Power_float(_Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1, 10, _Power_0f033f56feb0de89a9152324c9659e0a_Out_2);
            float4 _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2;
            Unity_Multiply_float4_float4(_Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0, (_Power_0f033f56feb0de89a9152324c9659e0a_Out_2.xxxx), _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2);
            float _Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0 = _RimLightPower;
            float4 _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2;
            Unity_Multiply_float4_float4(_Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2, (_Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2);
            float4 _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2);
            float4 _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2;
            Unity_Add_float4(_Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2, _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2);
            float4 _Clamp_cb735681159425838b158a92c7e830b0_Out_3;
            Unity_Clamp_float4(_Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, float4(0, 0, 0, 0), _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, _Clamp_cb735681159425838b158a92c7e830b0_Out_3);
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_R_1 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[0];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_G_2 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[1];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_B_3 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[2];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[3];
            float _Property_57dab79b7e7fc28c99642ba557430a27_Out_0 = _BaseMetallic;
            float _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2;
            Unity_Multiply_float_float(_Split_866a663ed067f988862843fe32765ff8_R_1, _Property_57dab79b7e7fc28c99642ba557430a27_Out_0, _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2);
            float _Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0 = _BaseAORemapMin;
            float _Property_5a040fb62cd8888895d4f920c4036587_Out_0 = _BaseAORemapMax;
            float2 _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0 = float2(_Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0, _Property_5a040fb62cd8888895d4f920c4036587_Out_0);
            float _Remap_de2674403349aa85b1136d42692d26f9_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_G_2, float2 (0, 1), _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0, _Remap_de2674403349aa85b1136d42692d26f9_Out_3);
            float3 _Vector3_4c4100faab122d8da757a32364182844_Out_0 = float3(_Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2, _Remap_de2674403349aa85b1136d42692d26f9_Out_3, 0);
            float _Property_7cdf7bda907cf087942cd072e635a869_Out_0 = _Base2Metallic;
            float _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2;
            Unity_Multiply_float_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1, _Property_7cdf7bda907cf087942cd072e635a869_Out_0, _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2);
            float _Property_b334f6ce40e54186b9864b004fbe88d2_Out_0 = _Base2AORemapMin;
            float _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0 = _Base2AORemapMax;
            float2 _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0 = float2(_Property_b334f6ce40e54186b9864b004fbe88d2_Out_0, _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0);
            float _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2, float2 (0, 1), _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3);
            float3 _Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0 = float3(_Multiply_befa03f2838946858f28ac63a284b0f8_Out_2, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869;
            float4 _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_4c4100faab122d8da757a32364182844_Out_0, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1);
            float _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0 = _CoverMetallic;
            float _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2;
            Unity_Multiply_float_float(_Split_b20618c84cffd183aae7f27c2d0772cb_R_1, _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0, _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2);
            float _Property_e52744d22eaee787aba665b5a103092d_Out_0 = _CoverAORemapMin;
            float _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0 = _CoverAORemapMax;
            float2 _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0 = float2(_Property_e52744d22eaee787aba665b5a103092d_Out_0, _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0);
            float _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_G_2, float2 (0, 1), _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3);
            float3 _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0 = float3(_Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3, 0);
            float3 _Lerp_5d687668f4856180be26ec62834c6113_Out_3;
            Unity_Lerp_float3((_HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1.xyz), _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_5d687668f4856180be26ec62834c6113_Out_3);
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[0];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[1];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_B_3 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[2];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_A_4 = 0;
            surface.BaseColor = (_Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3.xyz);
            surface.Emission = (_Clamp_cb735681159425838b158a92c7e830b0_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4;
            surface.Occlusion = _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2;
            surface.NormalTS = _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            surface.Metallic = _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVertMeshCustomInterpolation' */
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.positionPredisplacementRWS = input.positionPredisplacementRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord1 =                  input.texCoord1;
            output.texCoord2 =                  input.texCoord2;
            output.texCoord3 =                  input.texCoord3;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVaryingsToFragInputs' */
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassLightTransport.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "ScenePickingPass"
            Tags
            {
                "LightMode" = "Picking"
            }
        
            // Render State
            Cull [_CullMode]
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma editor_sync_compilation
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define SCENEPICKINGPASS 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float4 _BaseTilingOffset;
        float _BaseTriplanarThreshold;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2TriplanarThreshold;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float3 _CoverDirection;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverTriplanarThreshold;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float _CoverEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float4 _RimColor;
        float _RimLightPower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Lava_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options renderinglayer procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float
        {
        };
        
        void SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(float3 Vector3_314C8600, Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float4 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2));
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float4 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2));
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float4 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float4 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float4(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float4 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float4(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float4 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float4(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        YZ_3 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0;
        XY_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        struct Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2);
        float3 _Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float3 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float3_float3(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2;
        Unity_Multiply_float_float(_Split_6299d4ddcc4c74828aea40a46fdb896e_B_3, -1, _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2);
        float2 _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0 = float2(_Multiply_de711f4a4614bd89a463b53374cf4036_Out_2, 1);
        float2 _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2));
        _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0);
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float2 _Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0 = float2(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4, _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5);
        float2 _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2;
        Unity_Multiply_float2_float2(_Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0, _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2);
        float2 _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_b227c84042055e8faa1a9fdc69529707_Out_2;
        Unity_Add_float2(_Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2, _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0, _Add_b227c84042055e8faa1a9fdc69529707_Out_2);
        float _Split_2cfb9eacd8762483941459cdf28bda97_R_1 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[0];
        float _Split_2cfb9eacd8762483941459cdf28bda97_G_2 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[1];
        float _Split_2cfb9eacd8762483941459cdf28bda97_B_3 = 0;
        float _Split_2cfb9eacd8762483941459cdf28bda97_A_4 = 0;
        float _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0 = float3(_Split_2cfb9eacd8762483941459cdf28bda97_R_1, _Split_2cfb9eacd8762483941459cdf28bda97_G_2, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float3_float3(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_R_1, 1);
        float2 _Multiply_862402885a49f18cb87278ab53bc6744_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_862402885a49f18cb87278ab53bc6744_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_862402885a49f18cb87278ab53bc6744_Out_2));
        _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0);
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float _Multiply_4649b768be76d784a3284bacde795359_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Multiply_4649b768be76d784a3284bacde795359_Out_2);
        float2 _Vector2_819fcd5eb484438eacad1987576d7d67_Out_0 = float2(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4, _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5);
        float2 _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2;
        Unity_Multiply_float2_float2(_Vector2_819fcd5eb484438eacad1987576d7d67_Out_0, _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2);
        float2 _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2;
        Unity_Add_float2(_Multiply_58530ebb3c6d798b93686a76247bf505_Out_2, _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0, _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2);
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[0];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[1];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_B_3 = 0;
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_A_4 = 0;
        float3 _Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0 = float3(_Multiply_4649b768be76d784a3284bacde795359_Out_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1);
        float3 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float3_float3(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float3 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float3(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float3 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float3(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float3 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float3(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        float3x3 Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1 = TransformWorldToTangent(_Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2.xyz, Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World);
        float3 _Normalize_15ef346824db0a8797631ed8b998e673_Out_1;
        Unity_Normalize_float3(_Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1, _Normalize_15ef346824db0a8797631ed8b998e673_Out_1);
        XYZ_1 = (float4(_Normalize_15ef346824db0a8797631ed8b998e673_Out_1, 1.0));
        XZ_2 = (float4(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, 1.0));
        YZ_3 = (float4(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, 1.0));
        XY_4 = (float4(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d;
            float3 _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1;
            SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(IN.ObjectSpacePosition, _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d, _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1);
            description.Position = _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_d92b1410e1d6bc81a86076b09e35f302_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_d4a357b2daff5587ae46468726a33797_Out_0 = _BaseTilingOffset;
            float4 _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_d4a357b2daff5587ae46468726a33797_Out_0, _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2);
            float _Property_b168be530d5b4082a2816fc835b55e19_Out_0 = _BaseTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_d92b1410e1d6bc81a86076b09e35f302_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4);
            float4 _Property_17f0f1bec4ec6485881127275660d4f1_Out_0 = _BaseColor;
            float4 _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _Property_17f0f1bec4ec6485881127275660d4f1_Out_0, _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2);
            float _Split_473d9bf097327483847264a7cc5c61f9_R_1 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[0];
            float _Split_473d9bf097327483847264a7cc5c61f9_G_2 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[1];
            float _Split_473d9bf097327483847264a7cc5c61f9_B_3 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[2];
            float _Split_473d9bf097327483847264a7cc5c61f9_A_4 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[3];
            float _Split_2ffd394bfe87c786b791f90b404c032d_R_1 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[0];
            float _Split_2ffd394bfe87c786b791f90b404c032d_G_2 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[1];
            float _Split_2ffd394bfe87c786b791f90b404c032d_B_3 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[2];
            float _Split_2ffd394bfe87c786b791f90b404c032d_A_4 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[3];
            float _Property_a1b1d767544de781a39d6415872f7285_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0 = float2(_Property_a1b1d767544de781a39d6415872f7285_Out_0, _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0);
            float _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3;
            Unity_Remap_float(_Split_2ffd394bfe87c786b791f90b404c032d_A_4, float2 (0, 1), _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3);
            float4 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4;
            float3 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5;
            float2 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6;
            Unity_Combine_float(_Split_473d9bf097327483847264a7cc5c61f9_R_1, _Split_473d9bf097327483847264a7cc5c61f9_G_2, _Split_473d9bf097327483847264a7cc5c61f9_B_3, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6);
            UnityTexture2D _Property_080b6cb46abb00848263c964726eac36_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_080b6cb46abb00848263c964726eac36_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4);
            float _Split_866a663ed067f988862843fe32765ff8_R_1 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[0];
            float _Split_866a663ed067f988862843fe32765ff8_G_2 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[1];
            float _Split_866a663ed067f988862843fe32765ff8_B_3 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[2];
            float _Split_866a663ed067f988862843fe32765ff8_A_4 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[3];
            float _Property_3b9891099f2f3e84b765eb453f6f6810_Out_0 = _HeightMin;
            float _Property_bde21360babd9089a90a45cd2843925b_Out_0 = _HeightMax;
            float2 _Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0 = float2(_Property_3b9891099f2f3e84b765eb453f6f6810_Out_0, _Property_bde21360babd9089a90a45cd2843925b_Out_0);
            float _Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0 = _HeightOffset;
            float2 _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2;
            Unity_Add_float2(_Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0, (_Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0.xx), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2);
            float _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_B_3, float2 (0, 1), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3);
            UnityTexture2D _Property_11586ef261ce8e87953046ff84ce22ab_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_221c724b2137d58c8c387fee5b48be14_Out_0 = _Base2TilingOffset;
            float4 _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_221c724b2137d58c8c387fee5b48be14_Out_0, _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2);
            float _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0 = _Base2TriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_ca3aaaec266f85859b75e37163da7cba;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_11586ef261ce8e87953046ff84ce22ab_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4);
            float4 _Property_60dff9cc4310ea89874789591a78d84b_Out_0 = _Base2Color;
            float4 _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _Property_60dff9cc4310ea89874789591a78d84b_Out_0, _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2);
            float _Split_96d66d11efd8418aa95cffd04b788c51_R_1 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[0];
            float _Split_96d66d11efd8418aa95cffd04b788c51_G_2 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[1];
            float _Split_96d66d11efd8418aa95cffd04b788c51_B_3 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[2];
            float _Split_96d66d11efd8418aa95cffd04b788c51_A_4 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[3];
            float _Split_837cde6fde77238baac188382335775d_R_1 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[0];
            float _Split_837cde6fde77238baac188382335775d_G_2 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[1];
            float _Split_837cde6fde77238baac188382335775d_B_3 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[2];
            float _Split_837cde6fde77238baac188382335775d_A_4 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[3];
            float _Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0 = float2(_Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0, _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0);
            float _Remap_697b96439d3a0983800a051b2b4edd90_Out_3;
            Unity_Remap_float(_Split_837cde6fde77238baac188382335775d_A_4, float2 (0, 1), _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3);
            float4 _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4;
            float3 _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5;
            float2 _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6;
            Unity_Combine_float(_Split_96d66d11efd8418aa95cffd04b788c51_R_1, _Split_96d66d11efd8418aa95cffd04b788c51_G_2, _Split_96d66d11efd8418aa95cffd04b788c51_B_3, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5, _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6);
            float _Property_312b653a29ccc087849b1493611fb73c_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.tex, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.samplerstate, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.r;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_G_5 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.g;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_B_6 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.b;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_A_7 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.a;
            float _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1);
            float _Branch_6b7615e16629338ba87d3570a0096f66_Out_3;
            Unity_Branch_float(_Property_312b653a29ccc087849b1493611fb73c_Out_0, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1, _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _Branch_6b7615e16629338ba87d3570a0096f66_Out_3);
            UnityTexture2D _Property_b4749c77856157858fffde0aed55fc74_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_b4749c77856157858fffde0aed55fc74_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4);
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[0];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[1];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[2];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[3];
            float _Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0 = _HeightMin2;
            float _Property_145222f375008a879315637be0f172c5_Out_0 = _HeightMax2;
            float2 _Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0 = float2(_Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0, _Property_145222f375008a879315637be0f172c5_Out_0);
            float _Property_8be924d801daee88b294af592a560e75_Out_0 = _HeightOffset2;
            float2 _Add_37703f1eb9ce078daaedca833705f5dd_Out_2;
            Unity_Add_float2(_Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0, (_Property_8be924d801daee88b294af592a560e75_Out_0.xx), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2);
            float _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3, float2 (0, 1), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3);
            float _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2;
            Unity_Multiply_float_float(_Branch_6b7615e16629338ba87d3570a0096f66_Out_3, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3, _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2);
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_R_1 = IN.VertexColor[0];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2 = IN.VertexColor[1];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3 = IN.VertexColor[2];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_A_4 = IN.VertexColor[3];
            float _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2;
            Unity_Multiply_float_float(_Multiply_d9f42ca072d9188ab2566400157a199f_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2);
            float _Property_c0dc9341fd635288a1c2869945617704_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5;
            float4 _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1);
            UnityTexture2D _Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_9bedb34aba10fa89a5f5b18919971491_Out_0 = _CoverTilingOffset;
            float4 _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_9bedb34aba10fa89a5f5b18919971491_Out_0, _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2);
            float _Property_bf361924f27f848994241bda91fc2005_Out_0 = _CoverTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4);
            float4 _Property_19547f2fe562798683b730e775cbfb39_Out_0 = _CoverBaseColor;
            float4 _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _Property_19547f2fe562798683b730e775cbfb39_Out_0, _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2);
            float _Split_0d31d5c6a74be68484498325bbfacd3c_R_1 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[0];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_G_2 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[1];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_B_3 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[2];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_A_4 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[3];
            float _Split_90237729226dca849687b6c56fde4cbe_R_1 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[0];
            float _Split_90237729226dca849687b6c56fde4cbe_G_2 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[1];
            float _Split_90237729226dca849687b6c56fde4cbe_B_3 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[2];
            float _Split_90237729226dca849687b6c56fde4cbe_A_4 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[3];
            float _Property_007771e9e06cc78b9844d01f8129c541_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0 = float2(_Property_007771e9e06cc78b9844d01f8129c541_Out_0, _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0);
            float _Remap_690ea2a75496a283a66513f691c4f9db_Out_3;
            Unity_Remap_float(_Split_90237729226dca849687b6c56fde4cbe_A_4, float2 (0, 1), _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3);
            float4 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4;
            float3 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5;
            float2 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6;
            Unity_Combine_float(_Split_0d31d5c6a74be68484498325bbfacd3c_R_1, _Split_0d31d5c6a74be68484498325bbfacd3c_G_2, _Split_0d31d5c6a74be68484498325bbfacd3c_B_3, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6);
            float _Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_89bda93a711241049250cd3215f22c11_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0 = IN.uv0;
            float4 _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0 = SAMPLE_TEXTURE2D(_Property_89bda93a711241049250cd3215f22c11_Out_0.tex, _Property_89bda93a711241049250cd3215f22c11_Out_0.samplerstate, _Property_89bda93a711241049250cd3215f22c11_Out_0.GetTransformedUV((_UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0.xy)));
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_R_4 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.r;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_G_5 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.g;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_B_6 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.b;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_A_7 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.a;
            float _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0 = _CoverMaskPower;
            float _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_b8be215db546638398ea07060feb5224_A_7, _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0, _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2);
            float _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3;
            Unity_Clamp_float(_Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2, 0, 1, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3);
            float3 _Property_509761afcb3aad8f9a29405c122dbf08_Out_0 = _CoverDirection;
            UnityTexture2D _Property_72c615246e955087b85288c29905f048_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_72c615246e955087b85288c29905f048_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4);
            float _Property_7edd97bda70eb38a8c4253094700be37_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1.xyz), _Property_7edd97bda70eb38a8c4253094700be37_Out_0, _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2);
            UnityTexture2D _Property_6809577d1aa24984aa957e13d0574602_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_6809577d1aa24984aa957e13d0574602_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4);
            float _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1.xyz), _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0, _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_1276d06b2c028187bc5fb2018f7da110;
            float4 _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1);
            UnityTexture2D _Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4);
            float _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0, _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2);
            float3 _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, IN.WorldSpaceNormal, _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2);
            float _Split_e74c8f300b486e86a5700118b60b7885_R_1 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[0];
            float _Split_e74c8f300b486e86a5700118b60b7885_G_2 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[1];
            float _Split_e74c8f300b486e86a5700118b60b7885_B_3 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[2];
            float _Split_e74c8f300b486e86a5700118b60b7885_A_4 = 0;
            float _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2;
            Unity_Add_float(_Split_e74c8f300b486e86a5700118b60b7885_R_1, _Split_e74c8f300b486e86a5700118b60b7885_G_2, _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2);
            float _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2;
            Unity_Add_float(_Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2, _Split_e74c8f300b486e86a5700118b60b7885_B_3, _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2);
            float _Property_ca7cc2d889a56683904c7546a72cedbf_Out_0 = _Cover_Amount;
            float _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2;
            Unity_Subtract_float(4, _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2);
            float _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2;
            Unity_Divide_float(_Property_ca7cc2d889a56683904c7546a72cedbf_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2);
            float _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1;
            Unity_Absolute_float(_Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2, _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1);
            float _Power_681b2745dbae62839624b98240ca04f7_Out_2;
            Unity_Power_float(_Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Power_681b2745dbae62839624b98240ca04f7_Out_2);
            float _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3;
            Unity_Clamp_float(_Power_681b2745dbae62839624b98240ca04f7_Out_2, 0, 2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3);
            float _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2;
            Unity_Multiply_float_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2);
            float _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1;
            Unity_Saturate_float(_Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2, _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1);
            float _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3;
            Unity_Clamp_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, 0, 0.9999, _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3);
            float _Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0 = _Cover_Max_Angle;
            float _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2;
            Unity_Divide_float(_Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0, 45, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2);
            float _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1;
            Unity_OneMinus_float(_Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1);
            float _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2;
            Unity_Subtract_float(_Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1, _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2);
            float _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3;
            Unity_Clamp_float(_Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2, 0, 2, _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3);
            float _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2;
            Unity_Divide_float(1, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2);
            float _Multiply_749d76436ed5e58abec68ae130db866b_Out_2;
            Unity_Multiply_float_float(_Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2, _Multiply_749d76436ed5e58abec68ae130db866b_Out_2);
            float _Absolute_043a189b52847189ad0575955b41f403_Out_1;
            Unity_Absolute_float(_Multiply_749d76436ed5e58abec68ae130db866b_Out_2, _Absolute_043a189b52847189ad0575955b41f403_Out_1);
            float _Property_d4f4330ee4eced8d88fb074732401835_Out_0 = _CoverHardness;
            float _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2;
            Unity_Power_float(_Absolute_043a189b52847189ad0575955b41f403_Out_1, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2);
            float _Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0 = _Cover_Min_Height;
            float _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1;
            Unity_OneMinus_float(_Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0, _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1);
            float _Split_815418660959f184b10470e678ebae30_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_815418660959f184b10470e678ebae30_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_815418660959f184b10470e678ebae30_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_815418660959f184b10470e678ebae30_A_4 = 0;
            float _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2;
            Unity_Add_float(_OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1, _Split_815418660959f184b10470e678ebae30_G_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2);
            float _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, 1, _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2);
            float _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3;
            Unity_Clamp_float(_Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2, 0, 1, _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3);
            float _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0 = _Cover_Min_Height_Blending;
            float _Add_e57f70c02382b28397642f05af76cfb0_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0, _Add_e57f70c02382b28397642f05af76cfb0_Out_2);
            float _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2;
            Unity_Divide_float(_Add_e57f70c02382b28397642f05af76cfb0_Out_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2);
            float _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1;
            Unity_OneMinus_float(_Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2, _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1);
            float _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2;
            Unity_Add_float(_OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1, -0.5, _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2);
            float _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3;
            Unity_Clamp_float(_Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2, 0, 1, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3);
            float _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2;
            Unity_Add_float(_Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3, _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2);
            float _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3;
            Unity_Clamp_float(_Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2, 0, 1, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3);
            float _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2;
            Unity_Multiply_float_float(_Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2);
            float _Multiply_5336a32115eb29849650688fd99ee185_Out_2;
            Unity_Multiply_float_float(_Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_5336a32115eb29849650688fd99ee185_Out_2);
            float3 _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2, (_Multiply_5336a32115eb29849650688fd99ee185_Out_2.xxx), _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3);
            float3x3 Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1 = normalize(mul(Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent, _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3.xyz).xyz);
            float3 _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1, _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2);
            float _Split_b821124768adb688becbc5d63b26adb4_R_1 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[0];
            float _Split_b821124768adb688becbc5d63b26adb4_G_2 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[1];
            float _Split_b821124768adb688becbc5d63b26adb4_B_3 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[2];
            float _Split_b821124768adb688becbc5d63b26adb4_A_4 = 0;
            float _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2;
            Unity_Add_float(_Split_b821124768adb688becbc5d63b26adb4_R_1, _Split_b821124768adb688becbc5d63b26adb4_G_2, _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2);
            float _Add_508b788633abc0829f0843d1b1f942c2_Out_2;
            Unity_Add_float(_Add_fd43b427bfe3748cb0ced35df3b22159_Out_2, _Split_b821124768adb688becbc5d63b26adb4_B_3, _Add_508b788633abc0829f0843d1b1f942c2_Out_2);
            float _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2;
            Unity_Multiply_float_float(_Add_508b788633abc0829f0843d1b1f942c2_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2);
            float _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2;
            Unity_Multiply_float_float(_Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2);
            float _Multiply_b907f38702eabd80a6c67777243459de_Out_2;
            Unity_Multiply_float_float(_Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2);
            float _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2;
            Unity_Multiply_float_float(_Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2, _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2);
            UnityTexture2D _Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_9b6d5da081e434808a5840cbd915bb28;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4);
            float _Split_b20618c84cffd183aae7f27c2d0772cb_R_1 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[0];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_G_2 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[1];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_B_3 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[2];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_A_4 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[3];
            float _Property_987a8037965fff81a4930627358fc6e3_Out_0 = _CoverHeightMapMin;
            float _Property_89aeacdce0000086a98e45df79358a56_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_d18b9686bb8af48c85d99d319830c000_Out_0 = float2(_Property_987a8037965fff81a4930627358fc6e3_Out_0, _Property_89aeacdce0000086a98e45df79358a56_Out_0);
            float _Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0 = _CoverHeightMapOffset;
            float2 _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2;
            Unity_Add_float2(_Vector2_d18b9686bb8af48c85d99d319830c000_Out_0, (_Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0.xx), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2);
            float _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_B_3, float2 (0, 1), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3);
            float _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2;
            Unity_Multiply_float_float(_Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3, _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2);
            float _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2;
            Unity_Multiply_float_float(_Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2, _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2);
            float _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1;
            Unity_Saturate_float(_Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1);
            float _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2;
            Unity_Multiply_float_float(_Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2);
            float _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3;
            Unity_Branch_float(_Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3);
            float4 _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3;
            Unity_Lerp_float4(_HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxxx), _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3);
            float _Split_2d3577de3d626c8683c82ad2f5337a65_R_1 = IN.VertexColor[0];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_G_2 = IN.VertexColor[1];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_B_3 = IN.VertexColor[2];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_A_4 = IN.VertexColor[3];
            float _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_R_1, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1);
            float _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3;
            Unity_Lerp_float(0, _Split_866a663ed067f988862843fe32765ff8_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3);
            float _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2;
            Unity_Multiply_float_float(_Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3, _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0, _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2);
            float _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1;
            Unity_Absolute_float(_Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2, _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1);
            float _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2;
            Unity_Power_float(_Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1, _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0, _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2);
            float _Lerp_773fc936303dec838cfd7db23903de62_Out_3;
            Unity_Lerp_float(0, _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_773fc936303dec838cfd7db23903de62_Out_3);
            float _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2;
            Unity_Multiply_float_float(_Lerp_773fc936303dec838cfd7db23903de62_Out_3, _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0, _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2);
            float _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1;
            Unity_Absolute_float(_Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2, _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1);
            float _Property_013b523e19192f8593f2bcc154316b47_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_e5638390467fac89ae1f7b85fc93815b_Out_2;
            Unity_Power_float(_Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1, _Property_013b523e19192f8593f2bcc154316b47_Out_0, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2);
            float _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_B_3, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1);
            float _Lerp_594e5a2708dbe78894dc533303332962_Out_3;
            Unity_Lerp_float(_Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1, _Lerp_594e5a2708dbe78894dc533303332962_Out_3);
            float _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3;
            Unity_Lerp_float(0, _Split_b20618c84cffd183aae7f27c2d0772cb_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3);
            float _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_688d5e023afdea8f88054040203609ac_Out_2;
            Unity_Multiply_float_float(_Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3, _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0, _Multiply_688d5e023afdea8f88054040203609ac_Out_2);
            float _Absolute_b525073675d39a899115ebede3255a97_Out_1;
            Unity_Absolute_float(_Multiply_688d5e023afdea8f88054040203609ac_Out_2, _Absolute_b525073675d39a899115ebede3255a97_Out_1);
            float _Property_b14b960de7b30882a67b30cf91355226_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_fd909f27e3507185bcb862a17c2e116e_Out_2;
            Unity_Power_float(_Absolute_b525073675d39a899115ebede3255a97_Out_1, _Property_b14b960de7b30882a67b30cf91355226_Out_0, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2);
            float _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3;
            Unity_Lerp_float(_Lerp_594e5a2708dbe78894dc533303332962_Out_3, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3, _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3);
            float4 _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0, _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2);
            float4 _Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_0709d20641a7668b85ded82df467d4f4_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_0709d20641a7668b85ded82df467d4f4_Out_0, _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2);
            float3 _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3);
            float3 _Normalize_5840852513c50882be7896a398055011_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5840852513c50882be7896a398055011_Out_1);
            float _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2;
            Unity_DotProduct_float3(_Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3, _Normalize_5840852513c50882be7896a398055011_Out_1, _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2);
            float _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1;
            Unity_Saturate_float(_DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2, _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1);
            float _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1;
            Unity_OneMinus_float(_Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1, _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1);
            float _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1;
            Unity_Absolute_float(_OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1, _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1);
            float _Power_0f033f56feb0de89a9152324c9659e0a_Out_2;
            Unity_Power_float(_Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1, 10, _Power_0f033f56feb0de89a9152324c9659e0a_Out_2);
            float4 _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2;
            Unity_Multiply_float4_float4(_Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0, (_Power_0f033f56feb0de89a9152324c9659e0a_Out_2.xxxx), _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2);
            float _Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0 = _RimLightPower;
            float4 _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2;
            Unity_Multiply_float4_float4(_Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2, (_Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2);
            float4 _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2);
            float4 _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2;
            Unity_Add_float4(_Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2, _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2);
            float4 _Clamp_cb735681159425838b158a92c7e830b0_Out_3;
            Unity_Clamp_float4(_Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, float4(0, 0, 0, 0), _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, _Clamp_cb735681159425838b158a92c7e830b0_Out_3);
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_R_1 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[0];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_G_2 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[1];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_B_3 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[2];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[3];
            float _Property_57dab79b7e7fc28c99642ba557430a27_Out_0 = _BaseMetallic;
            float _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2;
            Unity_Multiply_float_float(_Split_866a663ed067f988862843fe32765ff8_R_1, _Property_57dab79b7e7fc28c99642ba557430a27_Out_0, _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2);
            float _Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0 = _BaseAORemapMin;
            float _Property_5a040fb62cd8888895d4f920c4036587_Out_0 = _BaseAORemapMax;
            float2 _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0 = float2(_Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0, _Property_5a040fb62cd8888895d4f920c4036587_Out_0);
            float _Remap_de2674403349aa85b1136d42692d26f9_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_G_2, float2 (0, 1), _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0, _Remap_de2674403349aa85b1136d42692d26f9_Out_3);
            float3 _Vector3_4c4100faab122d8da757a32364182844_Out_0 = float3(_Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2, _Remap_de2674403349aa85b1136d42692d26f9_Out_3, 0);
            float _Property_7cdf7bda907cf087942cd072e635a869_Out_0 = _Base2Metallic;
            float _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2;
            Unity_Multiply_float_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1, _Property_7cdf7bda907cf087942cd072e635a869_Out_0, _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2);
            float _Property_b334f6ce40e54186b9864b004fbe88d2_Out_0 = _Base2AORemapMin;
            float _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0 = _Base2AORemapMax;
            float2 _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0 = float2(_Property_b334f6ce40e54186b9864b004fbe88d2_Out_0, _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0);
            float _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2, float2 (0, 1), _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3);
            float3 _Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0 = float3(_Multiply_befa03f2838946858f28ac63a284b0f8_Out_2, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869;
            float4 _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_4c4100faab122d8da757a32364182844_Out_0, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1);
            float _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0 = _CoverMetallic;
            float _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2;
            Unity_Multiply_float_float(_Split_b20618c84cffd183aae7f27c2d0772cb_R_1, _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0, _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2);
            float _Property_e52744d22eaee787aba665b5a103092d_Out_0 = _CoverAORemapMin;
            float _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0 = _CoverAORemapMax;
            float2 _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0 = float2(_Property_e52744d22eaee787aba665b5a103092d_Out_0, _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0);
            float _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_G_2, float2 (0, 1), _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3);
            float3 _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0 = float3(_Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3, 0);
            float3 _Lerp_5d687668f4856180be26ec62834c6113_Out_3;
            Unity_Lerp_float3((_HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1.xyz), _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_5d687668f4856180be26ec62834c6113_Out_3);
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[0];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[1];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_B_3 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[2];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_A_4 = 0;
            surface.BaseColor = (_Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3.xyz);
            surface.Emission = (_Clamp_cb735681159425838b158a92c7e830b0_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4;
            surface.Occlusion = _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2;
            surface.NormalTS = _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            surface.Metallic = _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "SceneSelectionPass"
            Tags
            {
                "LightMode" = "SceneSelectionPass"
            }
        
            // Render State
            Cull Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma editor_sync_compilation
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SCENESELECTIONPASS 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float4 _BaseTilingOffset;
        float _BaseTriplanarThreshold;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2TriplanarThreshold;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float3 _CoverDirection;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverTriplanarThreshold;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float _CoverEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float4 _RimColor;
        float _RimLightPower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Lava_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options renderinglayer procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float
        {
        };
        
        void SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(float3 Vector3_314C8600, Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float4 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2));
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float4 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2));
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float4 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float4 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float4(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float4 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float4(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float4 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float4(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        YZ_3 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0;
        XY_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        struct Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2);
        float3 _Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float3 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float3_float3(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2;
        Unity_Multiply_float_float(_Split_6299d4ddcc4c74828aea40a46fdb896e_B_3, -1, _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2);
        float2 _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0 = float2(_Multiply_de711f4a4614bd89a463b53374cf4036_Out_2, 1);
        float2 _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2));
        _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0);
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float2 _Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0 = float2(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4, _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5);
        float2 _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2;
        Unity_Multiply_float2_float2(_Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0, _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2);
        float2 _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_b227c84042055e8faa1a9fdc69529707_Out_2;
        Unity_Add_float2(_Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2, _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0, _Add_b227c84042055e8faa1a9fdc69529707_Out_2);
        float _Split_2cfb9eacd8762483941459cdf28bda97_R_1 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[0];
        float _Split_2cfb9eacd8762483941459cdf28bda97_G_2 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[1];
        float _Split_2cfb9eacd8762483941459cdf28bda97_B_3 = 0;
        float _Split_2cfb9eacd8762483941459cdf28bda97_A_4 = 0;
        float _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0 = float3(_Split_2cfb9eacd8762483941459cdf28bda97_R_1, _Split_2cfb9eacd8762483941459cdf28bda97_G_2, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float3_float3(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_R_1, 1);
        float2 _Multiply_862402885a49f18cb87278ab53bc6744_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_862402885a49f18cb87278ab53bc6744_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_862402885a49f18cb87278ab53bc6744_Out_2));
        _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0);
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float _Multiply_4649b768be76d784a3284bacde795359_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Multiply_4649b768be76d784a3284bacde795359_Out_2);
        float2 _Vector2_819fcd5eb484438eacad1987576d7d67_Out_0 = float2(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4, _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5);
        float2 _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2;
        Unity_Multiply_float2_float2(_Vector2_819fcd5eb484438eacad1987576d7d67_Out_0, _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2);
        float2 _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2;
        Unity_Add_float2(_Multiply_58530ebb3c6d798b93686a76247bf505_Out_2, _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0, _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2);
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[0];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[1];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_B_3 = 0;
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_A_4 = 0;
        float3 _Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0 = float3(_Multiply_4649b768be76d784a3284bacde795359_Out_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1);
        float3 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float3_float3(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float3 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float3(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float3 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float3(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float3 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float3(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        float3x3 Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1 = TransformWorldToTangent(_Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2.xyz, Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World);
        float3 _Normalize_15ef346824db0a8797631ed8b998e673_Out_1;
        Unity_Normalize_float3(_Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1, _Normalize_15ef346824db0a8797631ed8b998e673_Out_1);
        XYZ_1 = (float4(_Normalize_15ef346824db0a8797631ed8b998e673_Out_1, 1.0));
        XZ_2 = (float4(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, 1.0));
        YZ_3 = (float4(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, 1.0));
        XY_4 = (float4(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d;
            float3 _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1;
            SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(IN.ObjectSpacePosition, _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d, _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1);
            description.Position = _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_d92b1410e1d6bc81a86076b09e35f302_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_d4a357b2daff5587ae46468726a33797_Out_0 = _BaseTilingOffset;
            float4 _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_d4a357b2daff5587ae46468726a33797_Out_0, _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2);
            float _Property_b168be530d5b4082a2816fc835b55e19_Out_0 = _BaseTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_d92b1410e1d6bc81a86076b09e35f302_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4);
            float4 _Property_17f0f1bec4ec6485881127275660d4f1_Out_0 = _BaseColor;
            float4 _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _Property_17f0f1bec4ec6485881127275660d4f1_Out_0, _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2);
            float _Split_473d9bf097327483847264a7cc5c61f9_R_1 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[0];
            float _Split_473d9bf097327483847264a7cc5c61f9_G_2 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[1];
            float _Split_473d9bf097327483847264a7cc5c61f9_B_3 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[2];
            float _Split_473d9bf097327483847264a7cc5c61f9_A_4 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[3];
            float _Split_2ffd394bfe87c786b791f90b404c032d_R_1 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[0];
            float _Split_2ffd394bfe87c786b791f90b404c032d_G_2 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[1];
            float _Split_2ffd394bfe87c786b791f90b404c032d_B_3 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[2];
            float _Split_2ffd394bfe87c786b791f90b404c032d_A_4 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[3];
            float _Property_a1b1d767544de781a39d6415872f7285_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0 = float2(_Property_a1b1d767544de781a39d6415872f7285_Out_0, _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0);
            float _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3;
            Unity_Remap_float(_Split_2ffd394bfe87c786b791f90b404c032d_A_4, float2 (0, 1), _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3);
            float4 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4;
            float3 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5;
            float2 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6;
            Unity_Combine_float(_Split_473d9bf097327483847264a7cc5c61f9_R_1, _Split_473d9bf097327483847264a7cc5c61f9_G_2, _Split_473d9bf097327483847264a7cc5c61f9_B_3, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6);
            UnityTexture2D _Property_080b6cb46abb00848263c964726eac36_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_080b6cb46abb00848263c964726eac36_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4);
            float _Split_866a663ed067f988862843fe32765ff8_R_1 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[0];
            float _Split_866a663ed067f988862843fe32765ff8_G_2 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[1];
            float _Split_866a663ed067f988862843fe32765ff8_B_3 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[2];
            float _Split_866a663ed067f988862843fe32765ff8_A_4 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[3];
            float _Property_3b9891099f2f3e84b765eb453f6f6810_Out_0 = _HeightMin;
            float _Property_bde21360babd9089a90a45cd2843925b_Out_0 = _HeightMax;
            float2 _Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0 = float2(_Property_3b9891099f2f3e84b765eb453f6f6810_Out_0, _Property_bde21360babd9089a90a45cd2843925b_Out_0);
            float _Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0 = _HeightOffset;
            float2 _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2;
            Unity_Add_float2(_Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0, (_Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0.xx), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2);
            float _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_B_3, float2 (0, 1), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3);
            UnityTexture2D _Property_11586ef261ce8e87953046ff84ce22ab_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_221c724b2137d58c8c387fee5b48be14_Out_0 = _Base2TilingOffset;
            float4 _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_221c724b2137d58c8c387fee5b48be14_Out_0, _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2);
            float _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0 = _Base2TriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_ca3aaaec266f85859b75e37163da7cba;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_11586ef261ce8e87953046ff84ce22ab_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4);
            float4 _Property_60dff9cc4310ea89874789591a78d84b_Out_0 = _Base2Color;
            float4 _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _Property_60dff9cc4310ea89874789591a78d84b_Out_0, _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2);
            float _Split_96d66d11efd8418aa95cffd04b788c51_R_1 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[0];
            float _Split_96d66d11efd8418aa95cffd04b788c51_G_2 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[1];
            float _Split_96d66d11efd8418aa95cffd04b788c51_B_3 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[2];
            float _Split_96d66d11efd8418aa95cffd04b788c51_A_4 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[3];
            float _Split_837cde6fde77238baac188382335775d_R_1 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[0];
            float _Split_837cde6fde77238baac188382335775d_G_2 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[1];
            float _Split_837cde6fde77238baac188382335775d_B_3 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[2];
            float _Split_837cde6fde77238baac188382335775d_A_4 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[3];
            float _Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0 = float2(_Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0, _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0);
            float _Remap_697b96439d3a0983800a051b2b4edd90_Out_3;
            Unity_Remap_float(_Split_837cde6fde77238baac188382335775d_A_4, float2 (0, 1), _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3);
            float4 _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4;
            float3 _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5;
            float2 _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6;
            Unity_Combine_float(_Split_96d66d11efd8418aa95cffd04b788c51_R_1, _Split_96d66d11efd8418aa95cffd04b788c51_G_2, _Split_96d66d11efd8418aa95cffd04b788c51_B_3, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5, _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6);
            float _Property_312b653a29ccc087849b1493611fb73c_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.tex, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.samplerstate, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.r;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_G_5 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.g;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_B_6 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.b;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_A_7 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.a;
            float _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1);
            float _Branch_6b7615e16629338ba87d3570a0096f66_Out_3;
            Unity_Branch_float(_Property_312b653a29ccc087849b1493611fb73c_Out_0, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1, _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _Branch_6b7615e16629338ba87d3570a0096f66_Out_3);
            UnityTexture2D _Property_b4749c77856157858fffde0aed55fc74_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_b4749c77856157858fffde0aed55fc74_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4);
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[0];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[1];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[2];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[3];
            float _Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0 = _HeightMin2;
            float _Property_145222f375008a879315637be0f172c5_Out_0 = _HeightMax2;
            float2 _Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0 = float2(_Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0, _Property_145222f375008a879315637be0f172c5_Out_0);
            float _Property_8be924d801daee88b294af592a560e75_Out_0 = _HeightOffset2;
            float2 _Add_37703f1eb9ce078daaedca833705f5dd_Out_2;
            Unity_Add_float2(_Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0, (_Property_8be924d801daee88b294af592a560e75_Out_0.xx), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2);
            float _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3, float2 (0, 1), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3);
            float _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2;
            Unity_Multiply_float_float(_Branch_6b7615e16629338ba87d3570a0096f66_Out_3, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3, _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2);
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_R_1 = IN.VertexColor[0];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2 = IN.VertexColor[1];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3 = IN.VertexColor[2];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_A_4 = IN.VertexColor[3];
            float _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2;
            Unity_Multiply_float_float(_Multiply_d9f42ca072d9188ab2566400157a199f_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2);
            float _Property_c0dc9341fd635288a1c2869945617704_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5;
            float4 _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1);
            UnityTexture2D _Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_9bedb34aba10fa89a5f5b18919971491_Out_0 = _CoverTilingOffset;
            float4 _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_9bedb34aba10fa89a5f5b18919971491_Out_0, _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2);
            float _Property_bf361924f27f848994241bda91fc2005_Out_0 = _CoverTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4);
            float4 _Property_19547f2fe562798683b730e775cbfb39_Out_0 = _CoverBaseColor;
            float4 _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _Property_19547f2fe562798683b730e775cbfb39_Out_0, _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2);
            float _Split_0d31d5c6a74be68484498325bbfacd3c_R_1 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[0];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_G_2 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[1];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_B_3 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[2];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_A_4 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[3];
            float _Split_90237729226dca849687b6c56fde4cbe_R_1 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[0];
            float _Split_90237729226dca849687b6c56fde4cbe_G_2 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[1];
            float _Split_90237729226dca849687b6c56fde4cbe_B_3 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[2];
            float _Split_90237729226dca849687b6c56fde4cbe_A_4 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[3];
            float _Property_007771e9e06cc78b9844d01f8129c541_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0 = float2(_Property_007771e9e06cc78b9844d01f8129c541_Out_0, _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0);
            float _Remap_690ea2a75496a283a66513f691c4f9db_Out_3;
            Unity_Remap_float(_Split_90237729226dca849687b6c56fde4cbe_A_4, float2 (0, 1), _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3);
            float4 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4;
            float3 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5;
            float2 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6;
            Unity_Combine_float(_Split_0d31d5c6a74be68484498325bbfacd3c_R_1, _Split_0d31d5c6a74be68484498325bbfacd3c_G_2, _Split_0d31d5c6a74be68484498325bbfacd3c_B_3, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6);
            float _Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_89bda93a711241049250cd3215f22c11_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0 = IN.uv0;
            float4 _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0 = SAMPLE_TEXTURE2D(_Property_89bda93a711241049250cd3215f22c11_Out_0.tex, _Property_89bda93a711241049250cd3215f22c11_Out_0.samplerstate, _Property_89bda93a711241049250cd3215f22c11_Out_0.GetTransformedUV((_UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0.xy)));
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_R_4 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.r;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_G_5 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.g;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_B_6 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.b;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_A_7 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.a;
            float _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0 = _CoverMaskPower;
            float _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_b8be215db546638398ea07060feb5224_A_7, _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0, _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2);
            float _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3;
            Unity_Clamp_float(_Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2, 0, 1, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3);
            float3 _Property_509761afcb3aad8f9a29405c122dbf08_Out_0 = _CoverDirection;
            UnityTexture2D _Property_72c615246e955087b85288c29905f048_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_72c615246e955087b85288c29905f048_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4);
            float _Property_7edd97bda70eb38a8c4253094700be37_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1.xyz), _Property_7edd97bda70eb38a8c4253094700be37_Out_0, _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2);
            UnityTexture2D _Property_6809577d1aa24984aa957e13d0574602_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_6809577d1aa24984aa957e13d0574602_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4);
            float _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1.xyz), _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0, _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_1276d06b2c028187bc5fb2018f7da110;
            float4 _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1);
            UnityTexture2D _Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4);
            float _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0, _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2);
            float3 _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, IN.WorldSpaceNormal, _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2);
            float _Split_e74c8f300b486e86a5700118b60b7885_R_1 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[0];
            float _Split_e74c8f300b486e86a5700118b60b7885_G_2 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[1];
            float _Split_e74c8f300b486e86a5700118b60b7885_B_3 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[2];
            float _Split_e74c8f300b486e86a5700118b60b7885_A_4 = 0;
            float _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2;
            Unity_Add_float(_Split_e74c8f300b486e86a5700118b60b7885_R_1, _Split_e74c8f300b486e86a5700118b60b7885_G_2, _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2);
            float _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2;
            Unity_Add_float(_Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2, _Split_e74c8f300b486e86a5700118b60b7885_B_3, _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2);
            float _Property_ca7cc2d889a56683904c7546a72cedbf_Out_0 = _Cover_Amount;
            float _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2;
            Unity_Subtract_float(4, _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2);
            float _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2;
            Unity_Divide_float(_Property_ca7cc2d889a56683904c7546a72cedbf_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2);
            float _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1;
            Unity_Absolute_float(_Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2, _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1);
            float _Power_681b2745dbae62839624b98240ca04f7_Out_2;
            Unity_Power_float(_Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Power_681b2745dbae62839624b98240ca04f7_Out_2);
            float _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3;
            Unity_Clamp_float(_Power_681b2745dbae62839624b98240ca04f7_Out_2, 0, 2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3);
            float _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2;
            Unity_Multiply_float_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2);
            float _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1;
            Unity_Saturate_float(_Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2, _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1);
            float _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3;
            Unity_Clamp_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, 0, 0.9999, _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3);
            float _Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0 = _Cover_Max_Angle;
            float _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2;
            Unity_Divide_float(_Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0, 45, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2);
            float _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1;
            Unity_OneMinus_float(_Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1);
            float _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2;
            Unity_Subtract_float(_Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1, _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2);
            float _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3;
            Unity_Clamp_float(_Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2, 0, 2, _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3);
            float _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2;
            Unity_Divide_float(1, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2);
            float _Multiply_749d76436ed5e58abec68ae130db866b_Out_2;
            Unity_Multiply_float_float(_Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2, _Multiply_749d76436ed5e58abec68ae130db866b_Out_2);
            float _Absolute_043a189b52847189ad0575955b41f403_Out_1;
            Unity_Absolute_float(_Multiply_749d76436ed5e58abec68ae130db866b_Out_2, _Absolute_043a189b52847189ad0575955b41f403_Out_1);
            float _Property_d4f4330ee4eced8d88fb074732401835_Out_0 = _CoverHardness;
            float _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2;
            Unity_Power_float(_Absolute_043a189b52847189ad0575955b41f403_Out_1, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2);
            float _Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0 = _Cover_Min_Height;
            float _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1;
            Unity_OneMinus_float(_Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0, _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1);
            float _Split_815418660959f184b10470e678ebae30_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_815418660959f184b10470e678ebae30_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_815418660959f184b10470e678ebae30_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_815418660959f184b10470e678ebae30_A_4 = 0;
            float _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2;
            Unity_Add_float(_OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1, _Split_815418660959f184b10470e678ebae30_G_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2);
            float _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, 1, _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2);
            float _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3;
            Unity_Clamp_float(_Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2, 0, 1, _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3);
            float _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0 = _Cover_Min_Height_Blending;
            float _Add_e57f70c02382b28397642f05af76cfb0_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0, _Add_e57f70c02382b28397642f05af76cfb0_Out_2);
            float _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2;
            Unity_Divide_float(_Add_e57f70c02382b28397642f05af76cfb0_Out_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2);
            float _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1;
            Unity_OneMinus_float(_Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2, _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1);
            float _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2;
            Unity_Add_float(_OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1, -0.5, _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2);
            float _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3;
            Unity_Clamp_float(_Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2, 0, 1, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3);
            float _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2;
            Unity_Add_float(_Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3, _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2);
            float _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3;
            Unity_Clamp_float(_Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2, 0, 1, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3);
            float _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2;
            Unity_Multiply_float_float(_Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2);
            float _Multiply_5336a32115eb29849650688fd99ee185_Out_2;
            Unity_Multiply_float_float(_Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_5336a32115eb29849650688fd99ee185_Out_2);
            float3 _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2, (_Multiply_5336a32115eb29849650688fd99ee185_Out_2.xxx), _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3);
            float3x3 Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1 = normalize(mul(Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent, _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3.xyz).xyz);
            float3 _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1, _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2);
            float _Split_b821124768adb688becbc5d63b26adb4_R_1 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[0];
            float _Split_b821124768adb688becbc5d63b26adb4_G_2 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[1];
            float _Split_b821124768adb688becbc5d63b26adb4_B_3 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[2];
            float _Split_b821124768adb688becbc5d63b26adb4_A_4 = 0;
            float _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2;
            Unity_Add_float(_Split_b821124768adb688becbc5d63b26adb4_R_1, _Split_b821124768adb688becbc5d63b26adb4_G_2, _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2);
            float _Add_508b788633abc0829f0843d1b1f942c2_Out_2;
            Unity_Add_float(_Add_fd43b427bfe3748cb0ced35df3b22159_Out_2, _Split_b821124768adb688becbc5d63b26adb4_B_3, _Add_508b788633abc0829f0843d1b1f942c2_Out_2);
            float _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2;
            Unity_Multiply_float_float(_Add_508b788633abc0829f0843d1b1f942c2_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2);
            float _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2;
            Unity_Multiply_float_float(_Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2);
            float _Multiply_b907f38702eabd80a6c67777243459de_Out_2;
            Unity_Multiply_float_float(_Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2);
            float _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2;
            Unity_Multiply_float_float(_Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2, _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2);
            UnityTexture2D _Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_9b6d5da081e434808a5840cbd915bb28;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4);
            float _Split_b20618c84cffd183aae7f27c2d0772cb_R_1 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[0];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_G_2 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[1];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_B_3 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[2];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_A_4 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[3];
            float _Property_987a8037965fff81a4930627358fc6e3_Out_0 = _CoverHeightMapMin;
            float _Property_89aeacdce0000086a98e45df79358a56_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_d18b9686bb8af48c85d99d319830c000_Out_0 = float2(_Property_987a8037965fff81a4930627358fc6e3_Out_0, _Property_89aeacdce0000086a98e45df79358a56_Out_0);
            float _Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0 = _CoverHeightMapOffset;
            float2 _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2;
            Unity_Add_float2(_Vector2_d18b9686bb8af48c85d99d319830c000_Out_0, (_Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0.xx), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2);
            float _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_B_3, float2 (0, 1), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3);
            float _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2;
            Unity_Multiply_float_float(_Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3, _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2);
            float _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2;
            Unity_Multiply_float_float(_Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2, _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2);
            float _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1;
            Unity_Saturate_float(_Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1);
            float _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2;
            Unity_Multiply_float_float(_Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2);
            float _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3;
            Unity_Branch_float(_Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3);
            float4 _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3;
            Unity_Lerp_float4(_HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxxx), _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3);
            float _Split_2d3577de3d626c8683c82ad2f5337a65_R_1 = IN.VertexColor[0];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_G_2 = IN.VertexColor[1];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_B_3 = IN.VertexColor[2];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_A_4 = IN.VertexColor[3];
            float _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_R_1, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1);
            float _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3;
            Unity_Lerp_float(0, _Split_866a663ed067f988862843fe32765ff8_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3);
            float _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2;
            Unity_Multiply_float_float(_Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3, _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0, _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2);
            float _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1;
            Unity_Absolute_float(_Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2, _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1);
            float _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2;
            Unity_Power_float(_Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1, _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0, _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2);
            float _Lerp_773fc936303dec838cfd7db23903de62_Out_3;
            Unity_Lerp_float(0, _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_773fc936303dec838cfd7db23903de62_Out_3);
            float _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2;
            Unity_Multiply_float_float(_Lerp_773fc936303dec838cfd7db23903de62_Out_3, _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0, _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2);
            float _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1;
            Unity_Absolute_float(_Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2, _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1);
            float _Property_013b523e19192f8593f2bcc154316b47_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_e5638390467fac89ae1f7b85fc93815b_Out_2;
            Unity_Power_float(_Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1, _Property_013b523e19192f8593f2bcc154316b47_Out_0, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2);
            float _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_B_3, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1);
            float _Lerp_594e5a2708dbe78894dc533303332962_Out_3;
            Unity_Lerp_float(_Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1, _Lerp_594e5a2708dbe78894dc533303332962_Out_3);
            float _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3;
            Unity_Lerp_float(0, _Split_b20618c84cffd183aae7f27c2d0772cb_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3);
            float _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_688d5e023afdea8f88054040203609ac_Out_2;
            Unity_Multiply_float_float(_Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3, _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0, _Multiply_688d5e023afdea8f88054040203609ac_Out_2);
            float _Absolute_b525073675d39a899115ebede3255a97_Out_1;
            Unity_Absolute_float(_Multiply_688d5e023afdea8f88054040203609ac_Out_2, _Absolute_b525073675d39a899115ebede3255a97_Out_1);
            float _Property_b14b960de7b30882a67b30cf91355226_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_fd909f27e3507185bcb862a17c2e116e_Out_2;
            Unity_Power_float(_Absolute_b525073675d39a899115ebede3255a97_Out_1, _Property_b14b960de7b30882a67b30cf91355226_Out_0, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2);
            float _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3;
            Unity_Lerp_float(_Lerp_594e5a2708dbe78894dc533303332962_Out_3, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3, _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3);
            float4 _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0, _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2);
            float4 _Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_0709d20641a7668b85ded82df467d4f4_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_0709d20641a7668b85ded82df467d4f4_Out_0, _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2);
            float3 _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3);
            float3 _Normalize_5840852513c50882be7896a398055011_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5840852513c50882be7896a398055011_Out_1);
            float _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2;
            Unity_DotProduct_float3(_Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3, _Normalize_5840852513c50882be7896a398055011_Out_1, _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2);
            float _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1;
            Unity_Saturate_float(_DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2, _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1);
            float _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1;
            Unity_OneMinus_float(_Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1, _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1);
            float _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1;
            Unity_Absolute_float(_OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1, _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1);
            float _Power_0f033f56feb0de89a9152324c9659e0a_Out_2;
            Unity_Power_float(_Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1, 10, _Power_0f033f56feb0de89a9152324c9659e0a_Out_2);
            float4 _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2;
            Unity_Multiply_float4_float4(_Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0, (_Power_0f033f56feb0de89a9152324c9659e0a_Out_2.xxxx), _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2);
            float _Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0 = _RimLightPower;
            float4 _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2;
            Unity_Multiply_float4_float4(_Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2, (_Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2);
            float4 _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2);
            float4 _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2;
            Unity_Add_float4(_Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2, _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2);
            float4 _Clamp_cb735681159425838b158a92c7e830b0_Out_3;
            Unity_Clamp_float4(_Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, float4(0, 0, 0, 0), _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, _Clamp_cb735681159425838b158a92c7e830b0_Out_3);
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_R_1 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[0];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_G_2 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[1];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_B_3 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[2];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[3];
            float _Property_57dab79b7e7fc28c99642ba557430a27_Out_0 = _BaseMetallic;
            float _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2;
            Unity_Multiply_float_float(_Split_866a663ed067f988862843fe32765ff8_R_1, _Property_57dab79b7e7fc28c99642ba557430a27_Out_0, _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2);
            float _Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0 = _BaseAORemapMin;
            float _Property_5a040fb62cd8888895d4f920c4036587_Out_0 = _BaseAORemapMax;
            float2 _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0 = float2(_Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0, _Property_5a040fb62cd8888895d4f920c4036587_Out_0);
            float _Remap_de2674403349aa85b1136d42692d26f9_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_G_2, float2 (0, 1), _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0, _Remap_de2674403349aa85b1136d42692d26f9_Out_3);
            float3 _Vector3_4c4100faab122d8da757a32364182844_Out_0 = float3(_Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2, _Remap_de2674403349aa85b1136d42692d26f9_Out_3, 0);
            float _Property_7cdf7bda907cf087942cd072e635a869_Out_0 = _Base2Metallic;
            float _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2;
            Unity_Multiply_float_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1, _Property_7cdf7bda907cf087942cd072e635a869_Out_0, _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2);
            float _Property_b334f6ce40e54186b9864b004fbe88d2_Out_0 = _Base2AORemapMin;
            float _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0 = _Base2AORemapMax;
            float2 _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0 = float2(_Property_b334f6ce40e54186b9864b004fbe88d2_Out_0, _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0);
            float _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2, float2 (0, 1), _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3);
            float3 _Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0 = float3(_Multiply_befa03f2838946858f28ac63a284b0f8_Out_2, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869;
            float4 _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_4c4100faab122d8da757a32364182844_Out_0, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1);
            float _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0 = _CoverMetallic;
            float _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2;
            Unity_Multiply_float_float(_Split_b20618c84cffd183aae7f27c2d0772cb_R_1, _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0, _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2);
            float _Property_e52744d22eaee787aba665b5a103092d_Out_0 = _CoverAORemapMin;
            float _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0 = _CoverAORemapMax;
            float2 _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0 = float2(_Property_e52744d22eaee787aba665b5a103092d_Out_0, _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0);
            float _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_G_2, float2 (0, 1), _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3);
            float3 _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0 = float3(_Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3, 0);
            float3 _Lerp_5d687668f4856180be26ec62834c6113_Out_3;
            Unity_Lerp_float3((_HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1.xyz), _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_5d687668f4856180be26ec62834c6113_Out_3);
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[0];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[1];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_B_3 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[2];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_A_4 = 0;
            surface.BaseColor = (_Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3.xyz);
            surface.Emission = (_Clamp_cb735681159425838b158a92c7e830b0_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4;
            surface.Occlusion = _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2;
            surface.NormalTS = _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            surface.Metallic = _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "MotionVectors"
            Tags
            {
                "LightMode" = "MotionVectors"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskMV]
        Ref [_StencilRefMV]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma multi_compile _ WRITE_NORMAL_BUFFER
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ WRITE_DECAL_BUFFER
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_MOTION_VECTORS
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float4 _BaseTilingOffset;
        float _BaseTriplanarThreshold;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2TriplanarThreshold;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float3 _CoverDirection;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverTriplanarThreshold;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float _CoverEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float4 _RimColor;
        float _RimLightPower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Lava_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv1 : TEXCOORD1;
             float4 uv2 : TEXCOORD2;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
             float4 interp6 : INTERP6;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.texCoord1;
            output.interp5.xyzw =  input.texCoord2;
            output.interp6.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.texCoord1 = input.interp4.xyzw;
            output.texCoord2 = input.interp5.xyzw;
            output.color = input.interp6.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options renderinglayer procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float
        {
        };
        
        void SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(float3 Vector3_314C8600, Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float4 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2));
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float4 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2));
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float4 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float4 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float4(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float4 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float4(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float4 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float4(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        YZ_3 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0;
        XY_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        struct Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2);
        float3 _Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float3 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float3_float3(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2;
        Unity_Multiply_float_float(_Split_6299d4ddcc4c74828aea40a46fdb896e_B_3, -1, _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2);
        float2 _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0 = float2(_Multiply_de711f4a4614bd89a463b53374cf4036_Out_2, 1);
        float2 _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2));
        _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0);
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float2 _Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0 = float2(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4, _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5);
        float2 _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2;
        Unity_Multiply_float2_float2(_Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0, _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2);
        float2 _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_b227c84042055e8faa1a9fdc69529707_Out_2;
        Unity_Add_float2(_Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2, _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0, _Add_b227c84042055e8faa1a9fdc69529707_Out_2);
        float _Split_2cfb9eacd8762483941459cdf28bda97_R_1 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[0];
        float _Split_2cfb9eacd8762483941459cdf28bda97_G_2 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[1];
        float _Split_2cfb9eacd8762483941459cdf28bda97_B_3 = 0;
        float _Split_2cfb9eacd8762483941459cdf28bda97_A_4 = 0;
        float _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0 = float3(_Split_2cfb9eacd8762483941459cdf28bda97_R_1, _Split_2cfb9eacd8762483941459cdf28bda97_G_2, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float3_float3(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_R_1, 1);
        float2 _Multiply_862402885a49f18cb87278ab53bc6744_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_862402885a49f18cb87278ab53bc6744_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_862402885a49f18cb87278ab53bc6744_Out_2));
        _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0);
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float _Multiply_4649b768be76d784a3284bacde795359_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Multiply_4649b768be76d784a3284bacde795359_Out_2);
        float2 _Vector2_819fcd5eb484438eacad1987576d7d67_Out_0 = float2(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4, _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5);
        float2 _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2;
        Unity_Multiply_float2_float2(_Vector2_819fcd5eb484438eacad1987576d7d67_Out_0, _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2);
        float2 _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2;
        Unity_Add_float2(_Multiply_58530ebb3c6d798b93686a76247bf505_Out_2, _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0, _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2);
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[0];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[1];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_B_3 = 0;
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_A_4 = 0;
        float3 _Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0 = float3(_Multiply_4649b768be76d784a3284bacde795359_Out_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1);
        float3 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float3_float3(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float3 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float3(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float3 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float3(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float3 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float3(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        float3x3 Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1 = TransformWorldToTangent(_Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2.xyz, Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World);
        float3 _Normalize_15ef346824db0a8797631ed8b998e673_Out_1;
        Unity_Normalize_float3(_Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1, _Normalize_15ef346824db0a8797631ed8b998e673_Out_1);
        XYZ_1 = (float4(_Normalize_15ef346824db0a8797631ed8b998e673_Out_1, 1.0));
        XZ_2 = (float4(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, 1.0));
        YZ_3 = (float4(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, 1.0));
        XY_4 = (float4(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d;
            float3 _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1;
            SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(IN.ObjectSpacePosition, _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d, _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1);
            description.Position = _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_d92b1410e1d6bc81a86076b09e35f302_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_d4a357b2daff5587ae46468726a33797_Out_0 = _BaseTilingOffset;
            float4 _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_d4a357b2daff5587ae46468726a33797_Out_0, _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2);
            float _Property_b168be530d5b4082a2816fc835b55e19_Out_0 = _BaseTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_d92b1410e1d6bc81a86076b09e35f302_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4);
            float4 _Property_17f0f1bec4ec6485881127275660d4f1_Out_0 = _BaseColor;
            float4 _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _Property_17f0f1bec4ec6485881127275660d4f1_Out_0, _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2);
            float _Split_473d9bf097327483847264a7cc5c61f9_R_1 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[0];
            float _Split_473d9bf097327483847264a7cc5c61f9_G_2 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[1];
            float _Split_473d9bf097327483847264a7cc5c61f9_B_3 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[2];
            float _Split_473d9bf097327483847264a7cc5c61f9_A_4 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[3];
            float _Split_2ffd394bfe87c786b791f90b404c032d_R_1 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[0];
            float _Split_2ffd394bfe87c786b791f90b404c032d_G_2 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[1];
            float _Split_2ffd394bfe87c786b791f90b404c032d_B_3 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[2];
            float _Split_2ffd394bfe87c786b791f90b404c032d_A_4 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[3];
            float _Property_a1b1d767544de781a39d6415872f7285_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0 = float2(_Property_a1b1d767544de781a39d6415872f7285_Out_0, _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0);
            float _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3;
            Unity_Remap_float(_Split_2ffd394bfe87c786b791f90b404c032d_A_4, float2 (0, 1), _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3);
            float4 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4;
            float3 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5;
            float2 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6;
            Unity_Combine_float(_Split_473d9bf097327483847264a7cc5c61f9_R_1, _Split_473d9bf097327483847264a7cc5c61f9_G_2, _Split_473d9bf097327483847264a7cc5c61f9_B_3, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6);
            UnityTexture2D _Property_080b6cb46abb00848263c964726eac36_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_080b6cb46abb00848263c964726eac36_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4);
            float _Split_866a663ed067f988862843fe32765ff8_R_1 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[0];
            float _Split_866a663ed067f988862843fe32765ff8_G_2 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[1];
            float _Split_866a663ed067f988862843fe32765ff8_B_3 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[2];
            float _Split_866a663ed067f988862843fe32765ff8_A_4 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[3];
            float _Property_3b9891099f2f3e84b765eb453f6f6810_Out_0 = _HeightMin;
            float _Property_bde21360babd9089a90a45cd2843925b_Out_0 = _HeightMax;
            float2 _Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0 = float2(_Property_3b9891099f2f3e84b765eb453f6f6810_Out_0, _Property_bde21360babd9089a90a45cd2843925b_Out_0);
            float _Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0 = _HeightOffset;
            float2 _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2;
            Unity_Add_float2(_Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0, (_Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0.xx), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2);
            float _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_B_3, float2 (0, 1), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3);
            UnityTexture2D _Property_11586ef261ce8e87953046ff84ce22ab_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_221c724b2137d58c8c387fee5b48be14_Out_0 = _Base2TilingOffset;
            float4 _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_221c724b2137d58c8c387fee5b48be14_Out_0, _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2);
            float _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0 = _Base2TriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_ca3aaaec266f85859b75e37163da7cba;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_11586ef261ce8e87953046ff84ce22ab_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4);
            float4 _Property_60dff9cc4310ea89874789591a78d84b_Out_0 = _Base2Color;
            float4 _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _Property_60dff9cc4310ea89874789591a78d84b_Out_0, _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2);
            float _Split_96d66d11efd8418aa95cffd04b788c51_R_1 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[0];
            float _Split_96d66d11efd8418aa95cffd04b788c51_G_2 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[1];
            float _Split_96d66d11efd8418aa95cffd04b788c51_B_3 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[2];
            float _Split_96d66d11efd8418aa95cffd04b788c51_A_4 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[3];
            float _Split_837cde6fde77238baac188382335775d_R_1 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[0];
            float _Split_837cde6fde77238baac188382335775d_G_2 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[1];
            float _Split_837cde6fde77238baac188382335775d_B_3 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[2];
            float _Split_837cde6fde77238baac188382335775d_A_4 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[3];
            float _Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0 = float2(_Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0, _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0);
            float _Remap_697b96439d3a0983800a051b2b4edd90_Out_3;
            Unity_Remap_float(_Split_837cde6fde77238baac188382335775d_A_4, float2 (0, 1), _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3);
            float4 _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4;
            float3 _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5;
            float2 _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6;
            Unity_Combine_float(_Split_96d66d11efd8418aa95cffd04b788c51_R_1, _Split_96d66d11efd8418aa95cffd04b788c51_G_2, _Split_96d66d11efd8418aa95cffd04b788c51_B_3, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5, _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6);
            float _Property_312b653a29ccc087849b1493611fb73c_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.tex, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.samplerstate, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.r;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_G_5 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.g;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_B_6 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.b;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_A_7 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.a;
            float _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1);
            float _Branch_6b7615e16629338ba87d3570a0096f66_Out_3;
            Unity_Branch_float(_Property_312b653a29ccc087849b1493611fb73c_Out_0, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1, _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _Branch_6b7615e16629338ba87d3570a0096f66_Out_3);
            UnityTexture2D _Property_b4749c77856157858fffde0aed55fc74_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_b4749c77856157858fffde0aed55fc74_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4);
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[0];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[1];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[2];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[3];
            float _Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0 = _HeightMin2;
            float _Property_145222f375008a879315637be0f172c5_Out_0 = _HeightMax2;
            float2 _Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0 = float2(_Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0, _Property_145222f375008a879315637be0f172c5_Out_0);
            float _Property_8be924d801daee88b294af592a560e75_Out_0 = _HeightOffset2;
            float2 _Add_37703f1eb9ce078daaedca833705f5dd_Out_2;
            Unity_Add_float2(_Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0, (_Property_8be924d801daee88b294af592a560e75_Out_0.xx), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2);
            float _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3, float2 (0, 1), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3);
            float _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2;
            Unity_Multiply_float_float(_Branch_6b7615e16629338ba87d3570a0096f66_Out_3, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3, _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2);
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_R_1 = IN.VertexColor[0];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2 = IN.VertexColor[1];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3 = IN.VertexColor[2];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_A_4 = IN.VertexColor[3];
            float _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2;
            Unity_Multiply_float_float(_Multiply_d9f42ca072d9188ab2566400157a199f_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2);
            float _Property_c0dc9341fd635288a1c2869945617704_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5;
            float4 _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1);
            UnityTexture2D _Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_9bedb34aba10fa89a5f5b18919971491_Out_0 = _CoverTilingOffset;
            float4 _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_9bedb34aba10fa89a5f5b18919971491_Out_0, _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2);
            float _Property_bf361924f27f848994241bda91fc2005_Out_0 = _CoverTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4);
            float4 _Property_19547f2fe562798683b730e775cbfb39_Out_0 = _CoverBaseColor;
            float4 _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _Property_19547f2fe562798683b730e775cbfb39_Out_0, _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2);
            float _Split_0d31d5c6a74be68484498325bbfacd3c_R_1 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[0];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_G_2 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[1];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_B_3 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[2];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_A_4 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[3];
            float _Split_90237729226dca849687b6c56fde4cbe_R_1 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[0];
            float _Split_90237729226dca849687b6c56fde4cbe_G_2 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[1];
            float _Split_90237729226dca849687b6c56fde4cbe_B_3 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[2];
            float _Split_90237729226dca849687b6c56fde4cbe_A_4 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[3];
            float _Property_007771e9e06cc78b9844d01f8129c541_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0 = float2(_Property_007771e9e06cc78b9844d01f8129c541_Out_0, _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0);
            float _Remap_690ea2a75496a283a66513f691c4f9db_Out_3;
            Unity_Remap_float(_Split_90237729226dca849687b6c56fde4cbe_A_4, float2 (0, 1), _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3);
            float4 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4;
            float3 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5;
            float2 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6;
            Unity_Combine_float(_Split_0d31d5c6a74be68484498325bbfacd3c_R_1, _Split_0d31d5c6a74be68484498325bbfacd3c_G_2, _Split_0d31d5c6a74be68484498325bbfacd3c_B_3, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6);
            float _Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_89bda93a711241049250cd3215f22c11_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0 = IN.uv0;
            float4 _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0 = SAMPLE_TEXTURE2D(_Property_89bda93a711241049250cd3215f22c11_Out_0.tex, _Property_89bda93a711241049250cd3215f22c11_Out_0.samplerstate, _Property_89bda93a711241049250cd3215f22c11_Out_0.GetTransformedUV((_UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0.xy)));
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_R_4 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.r;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_G_5 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.g;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_B_6 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.b;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_A_7 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.a;
            float _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0 = _CoverMaskPower;
            float _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_b8be215db546638398ea07060feb5224_A_7, _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0, _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2);
            float _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3;
            Unity_Clamp_float(_Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2, 0, 1, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3);
            float3 _Property_509761afcb3aad8f9a29405c122dbf08_Out_0 = _CoverDirection;
            UnityTexture2D _Property_72c615246e955087b85288c29905f048_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_72c615246e955087b85288c29905f048_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4);
            float _Property_7edd97bda70eb38a8c4253094700be37_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1.xyz), _Property_7edd97bda70eb38a8c4253094700be37_Out_0, _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2);
            UnityTexture2D _Property_6809577d1aa24984aa957e13d0574602_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_6809577d1aa24984aa957e13d0574602_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4);
            float _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1.xyz), _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0, _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_1276d06b2c028187bc5fb2018f7da110;
            float4 _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1);
            UnityTexture2D _Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4);
            float _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0, _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2);
            float3 _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, IN.WorldSpaceNormal, _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2);
            float _Split_e74c8f300b486e86a5700118b60b7885_R_1 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[0];
            float _Split_e74c8f300b486e86a5700118b60b7885_G_2 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[1];
            float _Split_e74c8f300b486e86a5700118b60b7885_B_3 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[2];
            float _Split_e74c8f300b486e86a5700118b60b7885_A_4 = 0;
            float _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2;
            Unity_Add_float(_Split_e74c8f300b486e86a5700118b60b7885_R_1, _Split_e74c8f300b486e86a5700118b60b7885_G_2, _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2);
            float _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2;
            Unity_Add_float(_Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2, _Split_e74c8f300b486e86a5700118b60b7885_B_3, _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2);
            float _Property_ca7cc2d889a56683904c7546a72cedbf_Out_0 = _Cover_Amount;
            float _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2;
            Unity_Subtract_float(4, _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2);
            float _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2;
            Unity_Divide_float(_Property_ca7cc2d889a56683904c7546a72cedbf_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2);
            float _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1;
            Unity_Absolute_float(_Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2, _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1);
            float _Power_681b2745dbae62839624b98240ca04f7_Out_2;
            Unity_Power_float(_Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Power_681b2745dbae62839624b98240ca04f7_Out_2);
            float _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3;
            Unity_Clamp_float(_Power_681b2745dbae62839624b98240ca04f7_Out_2, 0, 2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3);
            float _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2;
            Unity_Multiply_float_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2);
            float _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1;
            Unity_Saturate_float(_Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2, _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1);
            float _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3;
            Unity_Clamp_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, 0, 0.9999, _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3);
            float _Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0 = _Cover_Max_Angle;
            float _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2;
            Unity_Divide_float(_Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0, 45, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2);
            float _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1;
            Unity_OneMinus_float(_Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1);
            float _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2;
            Unity_Subtract_float(_Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1, _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2);
            float _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3;
            Unity_Clamp_float(_Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2, 0, 2, _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3);
            float _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2;
            Unity_Divide_float(1, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2);
            float _Multiply_749d76436ed5e58abec68ae130db866b_Out_2;
            Unity_Multiply_float_float(_Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2, _Multiply_749d76436ed5e58abec68ae130db866b_Out_2);
            float _Absolute_043a189b52847189ad0575955b41f403_Out_1;
            Unity_Absolute_float(_Multiply_749d76436ed5e58abec68ae130db866b_Out_2, _Absolute_043a189b52847189ad0575955b41f403_Out_1);
            float _Property_d4f4330ee4eced8d88fb074732401835_Out_0 = _CoverHardness;
            float _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2;
            Unity_Power_float(_Absolute_043a189b52847189ad0575955b41f403_Out_1, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2);
            float _Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0 = _Cover_Min_Height;
            float _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1;
            Unity_OneMinus_float(_Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0, _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1);
            float _Split_815418660959f184b10470e678ebae30_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_815418660959f184b10470e678ebae30_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_815418660959f184b10470e678ebae30_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_815418660959f184b10470e678ebae30_A_4 = 0;
            float _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2;
            Unity_Add_float(_OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1, _Split_815418660959f184b10470e678ebae30_G_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2);
            float _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, 1, _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2);
            float _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3;
            Unity_Clamp_float(_Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2, 0, 1, _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3);
            float _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0 = _Cover_Min_Height_Blending;
            float _Add_e57f70c02382b28397642f05af76cfb0_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0, _Add_e57f70c02382b28397642f05af76cfb0_Out_2);
            float _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2;
            Unity_Divide_float(_Add_e57f70c02382b28397642f05af76cfb0_Out_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2);
            float _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1;
            Unity_OneMinus_float(_Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2, _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1);
            float _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2;
            Unity_Add_float(_OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1, -0.5, _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2);
            float _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3;
            Unity_Clamp_float(_Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2, 0, 1, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3);
            float _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2;
            Unity_Add_float(_Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3, _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2);
            float _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3;
            Unity_Clamp_float(_Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2, 0, 1, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3);
            float _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2;
            Unity_Multiply_float_float(_Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2);
            float _Multiply_5336a32115eb29849650688fd99ee185_Out_2;
            Unity_Multiply_float_float(_Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_5336a32115eb29849650688fd99ee185_Out_2);
            float3 _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2, (_Multiply_5336a32115eb29849650688fd99ee185_Out_2.xxx), _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3);
            float3x3 Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1 = normalize(mul(Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent, _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3.xyz).xyz);
            float3 _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1, _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2);
            float _Split_b821124768adb688becbc5d63b26adb4_R_1 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[0];
            float _Split_b821124768adb688becbc5d63b26adb4_G_2 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[1];
            float _Split_b821124768adb688becbc5d63b26adb4_B_3 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[2];
            float _Split_b821124768adb688becbc5d63b26adb4_A_4 = 0;
            float _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2;
            Unity_Add_float(_Split_b821124768adb688becbc5d63b26adb4_R_1, _Split_b821124768adb688becbc5d63b26adb4_G_2, _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2);
            float _Add_508b788633abc0829f0843d1b1f942c2_Out_2;
            Unity_Add_float(_Add_fd43b427bfe3748cb0ced35df3b22159_Out_2, _Split_b821124768adb688becbc5d63b26adb4_B_3, _Add_508b788633abc0829f0843d1b1f942c2_Out_2);
            float _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2;
            Unity_Multiply_float_float(_Add_508b788633abc0829f0843d1b1f942c2_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2);
            float _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2;
            Unity_Multiply_float_float(_Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2);
            float _Multiply_b907f38702eabd80a6c67777243459de_Out_2;
            Unity_Multiply_float_float(_Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2);
            float _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2;
            Unity_Multiply_float_float(_Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2, _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2);
            UnityTexture2D _Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_9b6d5da081e434808a5840cbd915bb28;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4);
            float _Split_b20618c84cffd183aae7f27c2d0772cb_R_1 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[0];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_G_2 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[1];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_B_3 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[2];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_A_4 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[3];
            float _Property_987a8037965fff81a4930627358fc6e3_Out_0 = _CoverHeightMapMin;
            float _Property_89aeacdce0000086a98e45df79358a56_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_d18b9686bb8af48c85d99d319830c000_Out_0 = float2(_Property_987a8037965fff81a4930627358fc6e3_Out_0, _Property_89aeacdce0000086a98e45df79358a56_Out_0);
            float _Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0 = _CoverHeightMapOffset;
            float2 _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2;
            Unity_Add_float2(_Vector2_d18b9686bb8af48c85d99d319830c000_Out_0, (_Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0.xx), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2);
            float _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_B_3, float2 (0, 1), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3);
            float _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2;
            Unity_Multiply_float_float(_Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3, _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2);
            float _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2;
            Unity_Multiply_float_float(_Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2, _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2);
            float _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1;
            Unity_Saturate_float(_Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1);
            float _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2;
            Unity_Multiply_float_float(_Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2);
            float _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3;
            Unity_Branch_float(_Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3);
            float4 _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3;
            Unity_Lerp_float4(_HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxxx), _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3);
            float _Split_2d3577de3d626c8683c82ad2f5337a65_R_1 = IN.VertexColor[0];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_G_2 = IN.VertexColor[1];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_B_3 = IN.VertexColor[2];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_A_4 = IN.VertexColor[3];
            float _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_R_1, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1);
            float _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3;
            Unity_Lerp_float(0, _Split_866a663ed067f988862843fe32765ff8_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3);
            float _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2;
            Unity_Multiply_float_float(_Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3, _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0, _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2);
            float _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1;
            Unity_Absolute_float(_Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2, _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1);
            float _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2;
            Unity_Power_float(_Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1, _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0, _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2);
            float _Lerp_773fc936303dec838cfd7db23903de62_Out_3;
            Unity_Lerp_float(0, _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_773fc936303dec838cfd7db23903de62_Out_3);
            float _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2;
            Unity_Multiply_float_float(_Lerp_773fc936303dec838cfd7db23903de62_Out_3, _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0, _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2);
            float _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1;
            Unity_Absolute_float(_Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2, _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1);
            float _Property_013b523e19192f8593f2bcc154316b47_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_e5638390467fac89ae1f7b85fc93815b_Out_2;
            Unity_Power_float(_Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1, _Property_013b523e19192f8593f2bcc154316b47_Out_0, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2);
            float _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_B_3, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1);
            float _Lerp_594e5a2708dbe78894dc533303332962_Out_3;
            Unity_Lerp_float(_Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1, _Lerp_594e5a2708dbe78894dc533303332962_Out_3);
            float _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3;
            Unity_Lerp_float(0, _Split_b20618c84cffd183aae7f27c2d0772cb_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3);
            float _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_688d5e023afdea8f88054040203609ac_Out_2;
            Unity_Multiply_float_float(_Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3, _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0, _Multiply_688d5e023afdea8f88054040203609ac_Out_2);
            float _Absolute_b525073675d39a899115ebede3255a97_Out_1;
            Unity_Absolute_float(_Multiply_688d5e023afdea8f88054040203609ac_Out_2, _Absolute_b525073675d39a899115ebede3255a97_Out_1);
            float _Property_b14b960de7b30882a67b30cf91355226_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_fd909f27e3507185bcb862a17c2e116e_Out_2;
            Unity_Power_float(_Absolute_b525073675d39a899115ebede3255a97_Out_1, _Property_b14b960de7b30882a67b30cf91355226_Out_0, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2);
            float _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3;
            Unity_Lerp_float(_Lerp_594e5a2708dbe78894dc533303332962_Out_3, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3, _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3);
            float4 _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0, _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2);
            float4 _Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_0709d20641a7668b85ded82df467d4f4_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_0709d20641a7668b85ded82df467d4f4_Out_0, _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2);
            float3 _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3);
            float3 _Normalize_5840852513c50882be7896a398055011_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5840852513c50882be7896a398055011_Out_1);
            float _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2;
            Unity_DotProduct_float3(_Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3, _Normalize_5840852513c50882be7896a398055011_Out_1, _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2);
            float _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1;
            Unity_Saturate_float(_DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2, _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1);
            float _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1;
            Unity_OneMinus_float(_Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1, _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1);
            float _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1;
            Unity_Absolute_float(_OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1, _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1);
            float _Power_0f033f56feb0de89a9152324c9659e0a_Out_2;
            Unity_Power_float(_Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1, 10, _Power_0f033f56feb0de89a9152324c9659e0a_Out_2);
            float4 _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2;
            Unity_Multiply_float4_float4(_Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0, (_Power_0f033f56feb0de89a9152324c9659e0a_Out_2.xxxx), _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2);
            float _Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0 = _RimLightPower;
            float4 _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2;
            Unity_Multiply_float4_float4(_Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2, (_Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2);
            float4 _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2);
            float4 _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2;
            Unity_Add_float4(_Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2, _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2);
            float4 _Clamp_cb735681159425838b158a92c7e830b0_Out_3;
            Unity_Clamp_float4(_Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, float4(0, 0, 0, 0), _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, _Clamp_cb735681159425838b158a92c7e830b0_Out_3);
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_R_1 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[0];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_G_2 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[1];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_B_3 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[2];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[3];
            float _Property_57dab79b7e7fc28c99642ba557430a27_Out_0 = _BaseMetallic;
            float _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2;
            Unity_Multiply_float_float(_Split_866a663ed067f988862843fe32765ff8_R_1, _Property_57dab79b7e7fc28c99642ba557430a27_Out_0, _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2);
            float _Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0 = _BaseAORemapMin;
            float _Property_5a040fb62cd8888895d4f920c4036587_Out_0 = _BaseAORemapMax;
            float2 _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0 = float2(_Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0, _Property_5a040fb62cd8888895d4f920c4036587_Out_0);
            float _Remap_de2674403349aa85b1136d42692d26f9_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_G_2, float2 (0, 1), _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0, _Remap_de2674403349aa85b1136d42692d26f9_Out_3);
            float3 _Vector3_4c4100faab122d8da757a32364182844_Out_0 = float3(_Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2, _Remap_de2674403349aa85b1136d42692d26f9_Out_3, 0);
            float _Property_7cdf7bda907cf087942cd072e635a869_Out_0 = _Base2Metallic;
            float _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2;
            Unity_Multiply_float_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1, _Property_7cdf7bda907cf087942cd072e635a869_Out_0, _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2);
            float _Property_b334f6ce40e54186b9864b004fbe88d2_Out_0 = _Base2AORemapMin;
            float _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0 = _Base2AORemapMax;
            float2 _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0 = float2(_Property_b334f6ce40e54186b9864b004fbe88d2_Out_0, _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0);
            float _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2, float2 (0, 1), _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3);
            float3 _Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0 = float3(_Multiply_befa03f2838946858f28ac63a284b0f8_Out_2, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869;
            float4 _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_4c4100faab122d8da757a32364182844_Out_0, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1);
            float _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0 = _CoverMetallic;
            float _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2;
            Unity_Multiply_float_float(_Split_b20618c84cffd183aae7f27c2d0772cb_R_1, _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0, _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2);
            float _Property_e52744d22eaee787aba665b5a103092d_Out_0 = _CoverAORemapMin;
            float _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0 = _CoverAORemapMax;
            float2 _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0 = float2(_Property_e52744d22eaee787aba665b5a103092d_Out_0, _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0);
            float _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_G_2, float2 (0, 1), _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3);
            float3 _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0 = float3(_Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3, 0);
            float3 _Lerp_5d687668f4856180be26ec62834c6113_Out_3;
            Unity_Lerp_float3((_HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1.xyz), _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_5d687668f4856180be26ec62834c6113_Out_3);
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[0];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[1];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_B_3 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[2];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_A_4 = 0;
            surface.BaseColor = (_Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3.xyz);
            surface.Emission = (_Clamp_cb735681159425838b158a92c7e830b0_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4;
            surface.Occlusion = _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2;
            surface.NormalTS = _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            surface.Metallic = _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord1 =                  input.texCoord1;
            output.texCoord2 =                  input.texCoord2;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassMotionVectors.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "TransparentDepthPrepass"
            Tags
            {
                "LightMode" = "TransparentDepthPrepass"
            }
        
            // Render State
            Cull [_CullMode]
        Blend One Zero
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskDepth]
        Ref [_StencilRefDepth]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_TRANSPARENT_DEPTH_PREPASS
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float4 _BaseTilingOffset;
        float _BaseTriplanarThreshold;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2TriplanarThreshold;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float3 _CoverDirection;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverTriplanarThreshold;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float _CoverEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float4 _RimColor;
        float _RimLightPower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Lava_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options renderinglayer procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float
        {
        };
        
        void SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(float3 Vector3_314C8600, Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        struct Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2);
        float3 _Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float3 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float3_float3(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2;
        Unity_Multiply_float_float(_Split_6299d4ddcc4c74828aea40a46fdb896e_B_3, -1, _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2);
        float2 _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0 = float2(_Multiply_de711f4a4614bd89a463b53374cf4036_Out_2, 1);
        float2 _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2));
        _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0);
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float2 _Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0 = float2(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4, _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5);
        float2 _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2;
        Unity_Multiply_float2_float2(_Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0, _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2);
        float2 _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_b227c84042055e8faa1a9fdc69529707_Out_2;
        Unity_Add_float2(_Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2, _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0, _Add_b227c84042055e8faa1a9fdc69529707_Out_2);
        float _Split_2cfb9eacd8762483941459cdf28bda97_R_1 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[0];
        float _Split_2cfb9eacd8762483941459cdf28bda97_G_2 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[1];
        float _Split_2cfb9eacd8762483941459cdf28bda97_B_3 = 0;
        float _Split_2cfb9eacd8762483941459cdf28bda97_A_4 = 0;
        float _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0 = float3(_Split_2cfb9eacd8762483941459cdf28bda97_R_1, _Split_2cfb9eacd8762483941459cdf28bda97_G_2, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float3_float3(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_R_1, 1);
        float2 _Multiply_862402885a49f18cb87278ab53bc6744_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_862402885a49f18cb87278ab53bc6744_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_862402885a49f18cb87278ab53bc6744_Out_2));
        _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0);
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float _Multiply_4649b768be76d784a3284bacde795359_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Multiply_4649b768be76d784a3284bacde795359_Out_2);
        float2 _Vector2_819fcd5eb484438eacad1987576d7d67_Out_0 = float2(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4, _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5);
        float2 _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2;
        Unity_Multiply_float2_float2(_Vector2_819fcd5eb484438eacad1987576d7d67_Out_0, _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2);
        float2 _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2;
        Unity_Add_float2(_Multiply_58530ebb3c6d798b93686a76247bf505_Out_2, _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0, _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2);
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[0];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[1];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_B_3 = 0;
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_A_4 = 0;
        float3 _Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0 = float3(_Multiply_4649b768be76d784a3284bacde795359_Out_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1);
        float3 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float3_float3(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float3 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float3(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float3 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float3(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float3 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float3(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        float3x3 Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1 = TransformWorldToTangent(_Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2.xyz, Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World);
        float3 _Normalize_15ef346824db0a8797631ed8b998e673_Out_1;
        Unity_Normalize_float3(_Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1, _Normalize_15ef346824db0a8797631ed8b998e673_Out_1);
        XYZ_1 = (float4(_Normalize_15ef346824db0a8797631ed8b998e673_Out_1, 1.0));
        XZ_2 = (float4(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, 1.0));
        YZ_3 = (float4(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, 1.0));
        XY_4 = (float4(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float4 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2));
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float4 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2));
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float4 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float4 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float4(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float4 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float4(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float4 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float4(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        YZ_3 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0;
        XY_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d;
            float3 _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1;
            SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(IN.ObjectSpacePosition, _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d, _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1);
            description.Position = _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float Alpha;
            float3 NormalTS;
            float Smoothness;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_72c615246e955087b85288c29905f048_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            float4 _Property_d4a357b2daff5587ae46468726a33797_Out_0 = _BaseTilingOffset;
            float4 _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_d4a357b2daff5587ae46468726a33797_Out_0, _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2);
            float _Property_b168be530d5b4082a2816fc835b55e19_Out_0 = _BaseTriplanarThreshold;
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_72c615246e955087b85288c29905f048_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4);
            float _Property_7edd97bda70eb38a8c4253094700be37_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1.xyz), _Property_7edd97bda70eb38a8c4253094700be37_Out_0, _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2);
            UnityTexture2D _Property_080b6cb46abb00848263c964726eac36_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_080b6cb46abb00848263c964726eac36_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4);
            float _Split_866a663ed067f988862843fe32765ff8_R_1 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[0];
            float _Split_866a663ed067f988862843fe32765ff8_G_2 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[1];
            float _Split_866a663ed067f988862843fe32765ff8_B_3 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[2];
            float _Split_866a663ed067f988862843fe32765ff8_A_4 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[3];
            float _Property_3b9891099f2f3e84b765eb453f6f6810_Out_0 = _HeightMin;
            float _Property_bde21360babd9089a90a45cd2843925b_Out_0 = _HeightMax;
            float2 _Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0 = float2(_Property_3b9891099f2f3e84b765eb453f6f6810_Out_0, _Property_bde21360babd9089a90a45cd2843925b_Out_0);
            float _Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0 = _HeightOffset;
            float2 _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2;
            Unity_Add_float2(_Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0, (_Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0.xx), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2);
            float _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_B_3, float2 (0, 1), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3);
            UnityTexture2D _Property_6809577d1aa24984aa957e13d0574602_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            float4 _Property_221c724b2137d58c8c387fee5b48be14_Out_0 = _Base2TilingOffset;
            float4 _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_221c724b2137d58c8c387fee5b48be14_Out_0, _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2);
            float _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0 = _Base2TriplanarThreshold;
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_6809577d1aa24984aa957e13d0574602_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4);
            float _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1.xyz), _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0, _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2);
            float _Property_312b653a29ccc087849b1493611fb73c_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.tex, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.samplerstate, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.r;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_G_5 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.g;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_B_6 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.b;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_A_7 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.a;
            float _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1);
            float _Branch_6b7615e16629338ba87d3570a0096f66_Out_3;
            Unity_Branch_float(_Property_312b653a29ccc087849b1493611fb73c_Out_0, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1, _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _Branch_6b7615e16629338ba87d3570a0096f66_Out_3);
            UnityTexture2D _Property_b4749c77856157858fffde0aed55fc74_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_b4749c77856157858fffde0aed55fc74_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4);
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[0];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[1];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[2];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[3];
            float _Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0 = _HeightMin2;
            float _Property_145222f375008a879315637be0f172c5_Out_0 = _HeightMax2;
            float2 _Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0 = float2(_Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0, _Property_145222f375008a879315637be0f172c5_Out_0);
            float _Property_8be924d801daee88b294af592a560e75_Out_0 = _HeightOffset2;
            float2 _Add_37703f1eb9ce078daaedca833705f5dd_Out_2;
            Unity_Add_float2(_Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0, (_Property_8be924d801daee88b294af592a560e75_Out_0.xx), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2);
            float _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3, float2 (0, 1), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3);
            float _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2;
            Unity_Multiply_float_float(_Branch_6b7615e16629338ba87d3570a0096f66_Out_3, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3, _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2);
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_R_1 = IN.VertexColor[0];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2 = IN.VertexColor[1];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3 = IN.VertexColor[2];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_A_4 = IN.VertexColor[3];
            float _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2;
            Unity_Multiply_float_float(_Multiply_d9f42ca072d9188ab2566400157a199f_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2);
            float _Property_c0dc9341fd635288a1c2869945617704_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_1276d06b2c028187bc5fb2018f7da110;
            float4 _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1);
            UnityTexture2D _Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            float4 _Property_9bedb34aba10fa89a5f5b18919971491_Out_0 = _CoverTilingOffset;
            float4 _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_9bedb34aba10fa89a5f5b18919971491_Out_0, _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2);
            float _Property_bf361924f27f848994241bda91fc2005_Out_0 = _CoverTriplanarThreshold;
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4);
            float _Property_0709d20641a7668b85ded82df467d4f4_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_0709d20641a7668b85ded82df467d4f4_Out_0, _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2);
            float _Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_89bda93a711241049250cd3215f22c11_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0 = IN.uv0;
            float4 _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0 = SAMPLE_TEXTURE2D(_Property_89bda93a711241049250cd3215f22c11_Out_0.tex, _Property_89bda93a711241049250cd3215f22c11_Out_0.samplerstate, _Property_89bda93a711241049250cd3215f22c11_Out_0.GetTransformedUV((_UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0.xy)));
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_R_4 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.r;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_G_5 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.g;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_B_6 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.b;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_A_7 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.a;
            float _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0 = _CoverMaskPower;
            float _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_b8be215db546638398ea07060feb5224_A_7, _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0, _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2);
            float _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3;
            Unity_Clamp_float(_Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2, 0, 1, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3);
            float3 _Property_509761afcb3aad8f9a29405c122dbf08_Out_0 = _CoverDirection;
            float _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0, _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2);
            float3 _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, IN.WorldSpaceNormal, _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2);
            float _Split_e74c8f300b486e86a5700118b60b7885_R_1 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[0];
            float _Split_e74c8f300b486e86a5700118b60b7885_G_2 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[1];
            float _Split_e74c8f300b486e86a5700118b60b7885_B_3 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[2];
            float _Split_e74c8f300b486e86a5700118b60b7885_A_4 = 0;
            float _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2;
            Unity_Add_float(_Split_e74c8f300b486e86a5700118b60b7885_R_1, _Split_e74c8f300b486e86a5700118b60b7885_G_2, _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2);
            float _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2;
            Unity_Add_float(_Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2, _Split_e74c8f300b486e86a5700118b60b7885_B_3, _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2);
            float _Property_ca7cc2d889a56683904c7546a72cedbf_Out_0 = _Cover_Amount;
            float _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2;
            Unity_Subtract_float(4, _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2);
            float _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2;
            Unity_Divide_float(_Property_ca7cc2d889a56683904c7546a72cedbf_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2);
            float _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1;
            Unity_Absolute_float(_Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2, _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1);
            float _Power_681b2745dbae62839624b98240ca04f7_Out_2;
            Unity_Power_float(_Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Power_681b2745dbae62839624b98240ca04f7_Out_2);
            float _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3;
            Unity_Clamp_float(_Power_681b2745dbae62839624b98240ca04f7_Out_2, 0, 2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3);
            float _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2;
            Unity_Multiply_float_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2);
            float _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1;
            Unity_Saturate_float(_Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2, _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1);
            float _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3;
            Unity_Clamp_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, 0, 0.9999, _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3);
            float _Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0 = _Cover_Max_Angle;
            float _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2;
            Unity_Divide_float(_Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0, 45, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2);
            float _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1;
            Unity_OneMinus_float(_Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1);
            float _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2;
            Unity_Subtract_float(_Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1, _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2);
            float _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3;
            Unity_Clamp_float(_Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2, 0, 2, _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3);
            float _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2;
            Unity_Divide_float(1, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2);
            float _Multiply_749d76436ed5e58abec68ae130db866b_Out_2;
            Unity_Multiply_float_float(_Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2, _Multiply_749d76436ed5e58abec68ae130db866b_Out_2);
            float _Absolute_043a189b52847189ad0575955b41f403_Out_1;
            Unity_Absolute_float(_Multiply_749d76436ed5e58abec68ae130db866b_Out_2, _Absolute_043a189b52847189ad0575955b41f403_Out_1);
            float _Property_d4f4330ee4eced8d88fb074732401835_Out_0 = _CoverHardness;
            float _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2;
            Unity_Power_float(_Absolute_043a189b52847189ad0575955b41f403_Out_1, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2);
            float _Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0 = _Cover_Min_Height;
            float _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1;
            Unity_OneMinus_float(_Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0, _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1);
            float _Split_815418660959f184b10470e678ebae30_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_815418660959f184b10470e678ebae30_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_815418660959f184b10470e678ebae30_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_815418660959f184b10470e678ebae30_A_4 = 0;
            float _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2;
            Unity_Add_float(_OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1, _Split_815418660959f184b10470e678ebae30_G_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2);
            float _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, 1, _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2);
            float _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3;
            Unity_Clamp_float(_Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2, 0, 1, _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3);
            float _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0 = _Cover_Min_Height_Blending;
            float _Add_e57f70c02382b28397642f05af76cfb0_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0, _Add_e57f70c02382b28397642f05af76cfb0_Out_2);
            float _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2;
            Unity_Divide_float(_Add_e57f70c02382b28397642f05af76cfb0_Out_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2);
            float _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1;
            Unity_OneMinus_float(_Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2, _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1);
            float _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2;
            Unity_Add_float(_OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1, -0.5, _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2);
            float _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3;
            Unity_Clamp_float(_Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2, 0, 1, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3);
            float _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2;
            Unity_Add_float(_Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3, _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2);
            float _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3;
            Unity_Clamp_float(_Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2, 0, 1, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3);
            float _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2;
            Unity_Multiply_float_float(_Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2);
            float _Multiply_5336a32115eb29849650688fd99ee185_Out_2;
            Unity_Multiply_float_float(_Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_5336a32115eb29849650688fd99ee185_Out_2);
            float3 _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2, (_Multiply_5336a32115eb29849650688fd99ee185_Out_2.xxx), _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3);
            float3x3 Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1 = normalize(mul(Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent, _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3.xyz).xyz);
            float3 _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1, _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2);
            float _Split_b821124768adb688becbc5d63b26adb4_R_1 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[0];
            float _Split_b821124768adb688becbc5d63b26adb4_G_2 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[1];
            float _Split_b821124768adb688becbc5d63b26adb4_B_3 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[2];
            float _Split_b821124768adb688becbc5d63b26adb4_A_4 = 0;
            float _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2;
            Unity_Add_float(_Split_b821124768adb688becbc5d63b26adb4_R_1, _Split_b821124768adb688becbc5d63b26adb4_G_2, _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2);
            float _Add_508b788633abc0829f0843d1b1f942c2_Out_2;
            Unity_Add_float(_Add_fd43b427bfe3748cb0ced35df3b22159_Out_2, _Split_b821124768adb688becbc5d63b26adb4_B_3, _Add_508b788633abc0829f0843d1b1f942c2_Out_2);
            float _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2;
            Unity_Multiply_float_float(_Add_508b788633abc0829f0843d1b1f942c2_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2);
            float _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2;
            Unity_Multiply_float_float(_Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2);
            float _Multiply_b907f38702eabd80a6c67777243459de_Out_2;
            Unity_Multiply_float_float(_Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2);
            float _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2;
            Unity_Multiply_float_float(_Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2, _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2);
            UnityTexture2D _Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_9b6d5da081e434808a5840cbd915bb28;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4);
            float _Split_b20618c84cffd183aae7f27c2d0772cb_R_1 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[0];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_G_2 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[1];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_B_3 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[2];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_A_4 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[3];
            float _Property_987a8037965fff81a4930627358fc6e3_Out_0 = _CoverHeightMapMin;
            float _Property_89aeacdce0000086a98e45df79358a56_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_d18b9686bb8af48c85d99d319830c000_Out_0 = float2(_Property_987a8037965fff81a4930627358fc6e3_Out_0, _Property_89aeacdce0000086a98e45df79358a56_Out_0);
            float _Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0 = _CoverHeightMapOffset;
            float2 _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2;
            Unity_Add_float2(_Vector2_d18b9686bb8af48c85d99d319830c000_Out_0, (_Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0.xx), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2);
            float _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_B_3, float2 (0, 1), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3);
            float _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2;
            Unity_Multiply_float_float(_Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3, _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2);
            float _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2;
            Unity_Multiply_float_float(_Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2, _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2);
            float _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1;
            Unity_Saturate_float(_Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1);
            float _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2;
            Unity_Multiply_float_float(_Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2);
            float _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3;
            Unity_Branch_float(_Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3);
            float3 _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3);
            UnityTexture2D _Property_d92b1410e1d6bc81a86076b09e35f302_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_d92b1410e1d6bc81a86076b09e35f302_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4);
            float4 _Property_17f0f1bec4ec6485881127275660d4f1_Out_0 = _BaseColor;
            float4 _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _Property_17f0f1bec4ec6485881127275660d4f1_Out_0, _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2);
            float _Split_473d9bf097327483847264a7cc5c61f9_R_1 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[0];
            float _Split_473d9bf097327483847264a7cc5c61f9_G_2 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[1];
            float _Split_473d9bf097327483847264a7cc5c61f9_B_3 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[2];
            float _Split_473d9bf097327483847264a7cc5c61f9_A_4 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[3];
            float _Split_2ffd394bfe87c786b791f90b404c032d_R_1 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[0];
            float _Split_2ffd394bfe87c786b791f90b404c032d_G_2 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[1];
            float _Split_2ffd394bfe87c786b791f90b404c032d_B_3 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[2];
            float _Split_2ffd394bfe87c786b791f90b404c032d_A_4 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[3];
            float _Property_a1b1d767544de781a39d6415872f7285_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0 = float2(_Property_a1b1d767544de781a39d6415872f7285_Out_0, _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0);
            float _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3;
            Unity_Remap_float(_Split_2ffd394bfe87c786b791f90b404c032d_A_4, float2 (0, 1), _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3);
            float4 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4;
            float3 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5;
            float2 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6;
            Unity_Combine_float(_Split_473d9bf097327483847264a7cc5c61f9_R_1, _Split_473d9bf097327483847264a7cc5c61f9_G_2, _Split_473d9bf097327483847264a7cc5c61f9_B_3, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6);
            UnityTexture2D _Property_11586ef261ce8e87953046ff84ce22ab_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_ca3aaaec266f85859b75e37163da7cba;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_11586ef261ce8e87953046ff84ce22ab_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4);
            float4 _Property_60dff9cc4310ea89874789591a78d84b_Out_0 = _Base2Color;
            float4 _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _Property_60dff9cc4310ea89874789591a78d84b_Out_0, _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2);
            float _Split_96d66d11efd8418aa95cffd04b788c51_R_1 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[0];
            float _Split_96d66d11efd8418aa95cffd04b788c51_G_2 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[1];
            float _Split_96d66d11efd8418aa95cffd04b788c51_B_3 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[2];
            float _Split_96d66d11efd8418aa95cffd04b788c51_A_4 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[3];
            float _Split_837cde6fde77238baac188382335775d_R_1 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[0];
            float _Split_837cde6fde77238baac188382335775d_G_2 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[1];
            float _Split_837cde6fde77238baac188382335775d_B_3 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[2];
            float _Split_837cde6fde77238baac188382335775d_A_4 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[3];
            float _Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0 = float2(_Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0, _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0);
            float _Remap_697b96439d3a0983800a051b2b4edd90_Out_3;
            Unity_Remap_float(_Split_837cde6fde77238baac188382335775d_A_4, float2 (0, 1), _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3);
            float4 _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4;
            float3 _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5;
            float2 _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6;
            Unity_Combine_float(_Split_96d66d11efd8418aa95cffd04b788c51_R_1, _Split_96d66d11efd8418aa95cffd04b788c51_G_2, _Split_96d66d11efd8418aa95cffd04b788c51_B_3, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5, _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5;
            float4 _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1);
            UnityTexture2D _Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4);
            float4 _Property_19547f2fe562798683b730e775cbfb39_Out_0 = _CoverBaseColor;
            float4 _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _Property_19547f2fe562798683b730e775cbfb39_Out_0, _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2);
            float _Split_0d31d5c6a74be68484498325bbfacd3c_R_1 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[0];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_G_2 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[1];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_B_3 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[2];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_A_4 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[3];
            float _Split_90237729226dca849687b6c56fde4cbe_R_1 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[0];
            float _Split_90237729226dca849687b6c56fde4cbe_G_2 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[1];
            float _Split_90237729226dca849687b6c56fde4cbe_B_3 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[2];
            float _Split_90237729226dca849687b6c56fde4cbe_A_4 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[3];
            float _Property_007771e9e06cc78b9844d01f8129c541_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0 = float2(_Property_007771e9e06cc78b9844d01f8129c541_Out_0, _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0);
            float _Remap_690ea2a75496a283a66513f691c4f9db_Out_3;
            Unity_Remap_float(_Split_90237729226dca849687b6c56fde4cbe_A_4, float2 (0, 1), _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3);
            float4 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4;
            float3 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5;
            float2 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6;
            Unity_Combine_float(_Split_0d31d5c6a74be68484498325bbfacd3c_R_1, _Split_0d31d5c6a74be68484498325bbfacd3c_G_2, _Split_0d31d5c6a74be68484498325bbfacd3c_B_3, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6);
            float4 _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3;
            Unity_Lerp_float4(_HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxxx), _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3);
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_R_1 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[0];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_G_2 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[1];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_B_3 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[2];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[3];
            surface.Alpha = 1;
            surface.NormalTS = _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            surface.Smoothness = _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "FullScreenDebug"
            Tags
            {
                "LightMode" = "FullScreenDebug"
            }
        
            // Render State
            Cull [_CullMode]
        ZTest LEqual
        ZWrite Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_FULL_SCREEN_DEBUG
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float4 _BaseTilingOffset;
        float _BaseTriplanarThreshold;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2TriplanarThreshold;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float3 _CoverDirection;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverTriplanarThreshold;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float _CoverEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float4 _RimColor;
        float _RimLightPower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Lava_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options renderinglayer procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float
        {
        };
        
        void SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(float3 Vector3_314C8600, Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float4 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2));
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float4 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2));
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float4 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float4 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float4(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float4 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float4(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float4 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float4(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        YZ_3 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0;
        XY_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        struct Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2);
        float3 _Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float3 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float3_float3(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2;
        Unity_Multiply_float_float(_Split_6299d4ddcc4c74828aea40a46fdb896e_B_3, -1, _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2);
        float2 _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0 = float2(_Multiply_de711f4a4614bd89a463b53374cf4036_Out_2, 1);
        float2 _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2));
        _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0);
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float2 _Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0 = float2(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4, _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5);
        float2 _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2;
        Unity_Multiply_float2_float2(_Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0, _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2);
        float2 _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_b227c84042055e8faa1a9fdc69529707_Out_2;
        Unity_Add_float2(_Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2, _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0, _Add_b227c84042055e8faa1a9fdc69529707_Out_2);
        float _Split_2cfb9eacd8762483941459cdf28bda97_R_1 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[0];
        float _Split_2cfb9eacd8762483941459cdf28bda97_G_2 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[1];
        float _Split_2cfb9eacd8762483941459cdf28bda97_B_3 = 0;
        float _Split_2cfb9eacd8762483941459cdf28bda97_A_4 = 0;
        float _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0 = float3(_Split_2cfb9eacd8762483941459cdf28bda97_R_1, _Split_2cfb9eacd8762483941459cdf28bda97_G_2, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float3_float3(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_R_1, 1);
        float2 _Multiply_862402885a49f18cb87278ab53bc6744_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_862402885a49f18cb87278ab53bc6744_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_862402885a49f18cb87278ab53bc6744_Out_2));
        _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0);
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float _Multiply_4649b768be76d784a3284bacde795359_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Multiply_4649b768be76d784a3284bacde795359_Out_2);
        float2 _Vector2_819fcd5eb484438eacad1987576d7d67_Out_0 = float2(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4, _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5);
        float2 _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2;
        Unity_Multiply_float2_float2(_Vector2_819fcd5eb484438eacad1987576d7d67_Out_0, _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2);
        float2 _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2;
        Unity_Add_float2(_Multiply_58530ebb3c6d798b93686a76247bf505_Out_2, _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0, _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2);
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[0];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[1];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_B_3 = 0;
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_A_4 = 0;
        float3 _Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0 = float3(_Multiply_4649b768be76d784a3284bacde795359_Out_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1);
        float3 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float3_float3(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float3 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float3(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float3 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float3(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float3 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float3(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        float3x3 Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1 = TransformWorldToTangent(_Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2.xyz, Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World);
        float3 _Normalize_15ef346824db0a8797631ed8b998e673_Out_1;
        Unity_Normalize_float3(_Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1, _Normalize_15ef346824db0a8797631ed8b998e673_Out_1);
        XYZ_1 = (float4(_Normalize_15ef346824db0a8797631ed8b998e673_Out_1, 1.0));
        XZ_2 = (float4(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, 1.0));
        YZ_3 = (float4(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, 1.0));
        XY_4 = (float4(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d;
            float3 _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1;
            SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(IN.ObjectSpacePosition, _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d, _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1);
            description.Position = _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_d92b1410e1d6bc81a86076b09e35f302_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_d4a357b2daff5587ae46468726a33797_Out_0 = _BaseTilingOffset;
            float4 _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_d4a357b2daff5587ae46468726a33797_Out_0, _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2);
            float _Property_b168be530d5b4082a2816fc835b55e19_Out_0 = _BaseTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_d92b1410e1d6bc81a86076b09e35f302_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4);
            float4 _Property_17f0f1bec4ec6485881127275660d4f1_Out_0 = _BaseColor;
            float4 _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _Property_17f0f1bec4ec6485881127275660d4f1_Out_0, _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2);
            float _Split_473d9bf097327483847264a7cc5c61f9_R_1 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[0];
            float _Split_473d9bf097327483847264a7cc5c61f9_G_2 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[1];
            float _Split_473d9bf097327483847264a7cc5c61f9_B_3 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[2];
            float _Split_473d9bf097327483847264a7cc5c61f9_A_4 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[3];
            float _Split_2ffd394bfe87c786b791f90b404c032d_R_1 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[0];
            float _Split_2ffd394bfe87c786b791f90b404c032d_G_2 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[1];
            float _Split_2ffd394bfe87c786b791f90b404c032d_B_3 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[2];
            float _Split_2ffd394bfe87c786b791f90b404c032d_A_4 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[3];
            float _Property_a1b1d767544de781a39d6415872f7285_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0 = float2(_Property_a1b1d767544de781a39d6415872f7285_Out_0, _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0);
            float _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3;
            Unity_Remap_float(_Split_2ffd394bfe87c786b791f90b404c032d_A_4, float2 (0, 1), _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3);
            float4 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4;
            float3 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5;
            float2 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6;
            Unity_Combine_float(_Split_473d9bf097327483847264a7cc5c61f9_R_1, _Split_473d9bf097327483847264a7cc5c61f9_G_2, _Split_473d9bf097327483847264a7cc5c61f9_B_3, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6);
            UnityTexture2D _Property_080b6cb46abb00848263c964726eac36_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_080b6cb46abb00848263c964726eac36_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4);
            float _Split_866a663ed067f988862843fe32765ff8_R_1 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[0];
            float _Split_866a663ed067f988862843fe32765ff8_G_2 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[1];
            float _Split_866a663ed067f988862843fe32765ff8_B_3 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[2];
            float _Split_866a663ed067f988862843fe32765ff8_A_4 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[3];
            float _Property_3b9891099f2f3e84b765eb453f6f6810_Out_0 = _HeightMin;
            float _Property_bde21360babd9089a90a45cd2843925b_Out_0 = _HeightMax;
            float2 _Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0 = float2(_Property_3b9891099f2f3e84b765eb453f6f6810_Out_0, _Property_bde21360babd9089a90a45cd2843925b_Out_0);
            float _Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0 = _HeightOffset;
            float2 _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2;
            Unity_Add_float2(_Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0, (_Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0.xx), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2);
            float _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_B_3, float2 (0, 1), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3);
            UnityTexture2D _Property_11586ef261ce8e87953046ff84ce22ab_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_221c724b2137d58c8c387fee5b48be14_Out_0 = _Base2TilingOffset;
            float4 _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_221c724b2137d58c8c387fee5b48be14_Out_0, _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2);
            float _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0 = _Base2TriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_ca3aaaec266f85859b75e37163da7cba;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_11586ef261ce8e87953046ff84ce22ab_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4);
            float4 _Property_60dff9cc4310ea89874789591a78d84b_Out_0 = _Base2Color;
            float4 _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _Property_60dff9cc4310ea89874789591a78d84b_Out_0, _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2);
            float _Split_96d66d11efd8418aa95cffd04b788c51_R_1 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[0];
            float _Split_96d66d11efd8418aa95cffd04b788c51_G_2 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[1];
            float _Split_96d66d11efd8418aa95cffd04b788c51_B_3 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[2];
            float _Split_96d66d11efd8418aa95cffd04b788c51_A_4 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[3];
            float _Split_837cde6fde77238baac188382335775d_R_1 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[0];
            float _Split_837cde6fde77238baac188382335775d_G_2 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[1];
            float _Split_837cde6fde77238baac188382335775d_B_3 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[2];
            float _Split_837cde6fde77238baac188382335775d_A_4 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[3];
            float _Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0 = float2(_Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0, _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0);
            float _Remap_697b96439d3a0983800a051b2b4edd90_Out_3;
            Unity_Remap_float(_Split_837cde6fde77238baac188382335775d_A_4, float2 (0, 1), _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3);
            float4 _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4;
            float3 _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5;
            float2 _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6;
            Unity_Combine_float(_Split_96d66d11efd8418aa95cffd04b788c51_R_1, _Split_96d66d11efd8418aa95cffd04b788c51_G_2, _Split_96d66d11efd8418aa95cffd04b788c51_B_3, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5, _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6);
            float _Property_312b653a29ccc087849b1493611fb73c_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.tex, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.samplerstate, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.r;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_G_5 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.g;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_B_6 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.b;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_A_7 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.a;
            float _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1);
            float _Branch_6b7615e16629338ba87d3570a0096f66_Out_3;
            Unity_Branch_float(_Property_312b653a29ccc087849b1493611fb73c_Out_0, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1, _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _Branch_6b7615e16629338ba87d3570a0096f66_Out_3);
            UnityTexture2D _Property_b4749c77856157858fffde0aed55fc74_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_b4749c77856157858fffde0aed55fc74_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4);
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[0];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[1];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[2];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[3];
            float _Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0 = _HeightMin2;
            float _Property_145222f375008a879315637be0f172c5_Out_0 = _HeightMax2;
            float2 _Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0 = float2(_Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0, _Property_145222f375008a879315637be0f172c5_Out_0);
            float _Property_8be924d801daee88b294af592a560e75_Out_0 = _HeightOffset2;
            float2 _Add_37703f1eb9ce078daaedca833705f5dd_Out_2;
            Unity_Add_float2(_Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0, (_Property_8be924d801daee88b294af592a560e75_Out_0.xx), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2);
            float _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3, float2 (0, 1), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3);
            float _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2;
            Unity_Multiply_float_float(_Branch_6b7615e16629338ba87d3570a0096f66_Out_3, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3, _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2);
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_R_1 = IN.VertexColor[0];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2 = IN.VertexColor[1];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3 = IN.VertexColor[2];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_A_4 = IN.VertexColor[3];
            float _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2;
            Unity_Multiply_float_float(_Multiply_d9f42ca072d9188ab2566400157a199f_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2);
            float _Property_c0dc9341fd635288a1c2869945617704_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5;
            float4 _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1);
            UnityTexture2D _Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_9bedb34aba10fa89a5f5b18919971491_Out_0 = _CoverTilingOffset;
            float4 _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_9bedb34aba10fa89a5f5b18919971491_Out_0, _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2);
            float _Property_bf361924f27f848994241bda91fc2005_Out_0 = _CoverTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4);
            float4 _Property_19547f2fe562798683b730e775cbfb39_Out_0 = _CoverBaseColor;
            float4 _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _Property_19547f2fe562798683b730e775cbfb39_Out_0, _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2);
            float _Split_0d31d5c6a74be68484498325bbfacd3c_R_1 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[0];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_G_2 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[1];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_B_3 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[2];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_A_4 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[3];
            float _Split_90237729226dca849687b6c56fde4cbe_R_1 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[0];
            float _Split_90237729226dca849687b6c56fde4cbe_G_2 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[1];
            float _Split_90237729226dca849687b6c56fde4cbe_B_3 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[2];
            float _Split_90237729226dca849687b6c56fde4cbe_A_4 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[3];
            float _Property_007771e9e06cc78b9844d01f8129c541_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0 = float2(_Property_007771e9e06cc78b9844d01f8129c541_Out_0, _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0);
            float _Remap_690ea2a75496a283a66513f691c4f9db_Out_3;
            Unity_Remap_float(_Split_90237729226dca849687b6c56fde4cbe_A_4, float2 (0, 1), _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3);
            float4 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4;
            float3 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5;
            float2 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6;
            Unity_Combine_float(_Split_0d31d5c6a74be68484498325bbfacd3c_R_1, _Split_0d31d5c6a74be68484498325bbfacd3c_G_2, _Split_0d31d5c6a74be68484498325bbfacd3c_B_3, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6);
            float _Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_89bda93a711241049250cd3215f22c11_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0 = IN.uv0;
            float4 _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0 = SAMPLE_TEXTURE2D(_Property_89bda93a711241049250cd3215f22c11_Out_0.tex, _Property_89bda93a711241049250cd3215f22c11_Out_0.samplerstate, _Property_89bda93a711241049250cd3215f22c11_Out_0.GetTransformedUV((_UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0.xy)));
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_R_4 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.r;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_G_5 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.g;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_B_6 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.b;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_A_7 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.a;
            float _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0 = _CoverMaskPower;
            float _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_b8be215db546638398ea07060feb5224_A_7, _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0, _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2);
            float _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3;
            Unity_Clamp_float(_Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2, 0, 1, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3);
            float3 _Property_509761afcb3aad8f9a29405c122dbf08_Out_0 = _CoverDirection;
            UnityTexture2D _Property_72c615246e955087b85288c29905f048_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_72c615246e955087b85288c29905f048_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4);
            float _Property_7edd97bda70eb38a8c4253094700be37_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1.xyz), _Property_7edd97bda70eb38a8c4253094700be37_Out_0, _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2);
            UnityTexture2D _Property_6809577d1aa24984aa957e13d0574602_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_6809577d1aa24984aa957e13d0574602_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4);
            float _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1.xyz), _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0, _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_1276d06b2c028187bc5fb2018f7da110;
            float4 _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1);
            UnityTexture2D _Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4);
            float _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0, _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2);
            float3 _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, IN.WorldSpaceNormal, _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2);
            float _Split_e74c8f300b486e86a5700118b60b7885_R_1 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[0];
            float _Split_e74c8f300b486e86a5700118b60b7885_G_2 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[1];
            float _Split_e74c8f300b486e86a5700118b60b7885_B_3 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[2];
            float _Split_e74c8f300b486e86a5700118b60b7885_A_4 = 0;
            float _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2;
            Unity_Add_float(_Split_e74c8f300b486e86a5700118b60b7885_R_1, _Split_e74c8f300b486e86a5700118b60b7885_G_2, _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2);
            float _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2;
            Unity_Add_float(_Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2, _Split_e74c8f300b486e86a5700118b60b7885_B_3, _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2);
            float _Property_ca7cc2d889a56683904c7546a72cedbf_Out_0 = _Cover_Amount;
            float _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2;
            Unity_Subtract_float(4, _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2);
            float _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2;
            Unity_Divide_float(_Property_ca7cc2d889a56683904c7546a72cedbf_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2);
            float _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1;
            Unity_Absolute_float(_Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2, _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1);
            float _Power_681b2745dbae62839624b98240ca04f7_Out_2;
            Unity_Power_float(_Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Power_681b2745dbae62839624b98240ca04f7_Out_2);
            float _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3;
            Unity_Clamp_float(_Power_681b2745dbae62839624b98240ca04f7_Out_2, 0, 2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3);
            float _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2;
            Unity_Multiply_float_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2);
            float _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1;
            Unity_Saturate_float(_Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2, _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1);
            float _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3;
            Unity_Clamp_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, 0, 0.9999, _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3);
            float _Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0 = _Cover_Max_Angle;
            float _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2;
            Unity_Divide_float(_Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0, 45, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2);
            float _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1;
            Unity_OneMinus_float(_Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1);
            float _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2;
            Unity_Subtract_float(_Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1, _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2);
            float _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3;
            Unity_Clamp_float(_Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2, 0, 2, _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3);
            float _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2;
            Unity_Divide_float(1, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2);
            float _Multiply_749d76436ed5e58abec68ae130db866b_Out_2;
            Unity_Multiply_float_float(_Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2, _Multiply_749d76436ed5e58abec68ae130db866b_Out_2);
            float _Absolute_043a189b52847189ad0575955b41f403_Out_1;
            Unity_Absolute_float(_Multiply_749d76436ed5e58abec68ae130db866b_Out_2, _Absolute_043a189b52847189ad0575955b41f403_Out_1);
            float _Property_d4f4330ee4eced8d88fb074732401835_Out_0 = _CoverHardness;
            float _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2;
            Unity_Power_float(_Absolute_043a189b52847189ad0575955b41f403_Out_1, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2);
            float _Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0 = _Cover_Min_Height;
            float _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1;
            Unity_OneMinus_float(_Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0, _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1);
            float _Split_815418660959f184b10470e678ebae30_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_815418660959f184b10470e678ebae30_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_815418660959f184b10470e678ebae30_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_815418660959f184b10470e678ebae30_A_4 = 0;
            float _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2;
            Unity_Add_float(_OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1, _Split_815418660959f184b10470e678ebae30_G_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2);
            float _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, 1, _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2);
            float _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3;
            Unity_Clamp_float(_Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2, 0, 1, _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3);
            float _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0 = _Cover_Min_Height_Blending;
            float _Add_e57f70c02382b28397642f05af76cfb0_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0, _Add_e57f70c02382b28397642f05af76cfb0_Out_2);
            float _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2;
            Unity_Divide_float(_Add_e57f70c02382b28397642f05af76cfb0_Out_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2);
            float _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1;
            Unity_OneMinus_float(_Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2, _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1);
            float _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2;
            Unity_Add_float(_OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1, -0.5, _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2);
            float _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3;
            Unity_Clamp_float(_Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2, 0, 1, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3);
            float _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2;
            Unity_Add_float(_Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3, _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2);
            float _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3;
            Unity_Clamp_float(_Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2, 0, 1, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3);
            float _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2;
            Unity_Multiply_float_float(_Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2);
            float _Multiply_5336a32115eb29849650688fd99ee185_Out_2;
            Unity_Multiply_float_float(_Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_5336a32115eb29849650688fd99ee185_Out_2);
            float3 _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2, (_Multiply_5336a32115eb29849650688fd99ee185_Out_2.xxx), _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3);
            float3x3 Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1 = normalize(mul(Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent, _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3.xyz).xyz);
            float3 _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1, _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2);
            float _Split_b821124768adb688becbc5d63b26adb4_R_1 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[0];
            float _Split_b821124768adb688becbc5d63b26adb4_G_2 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[1];
            float _Split_b821124768adb688becbc5d63b26adb4_B_3 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[2];
            float _Split_b821124768adb688becbc5d63b26adb4_A_4 = 0;
            float _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2;
            Unity_Add_float(_Split_b821124768adb688becbc5d63b26adb4_R_1, _Split_b821124768adb688becbc5d63b26adb4_G_2, _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2);
            float _Add_508b788633abc0829f0843d1b1f942c2_Out_2;
            Unity_Add_float(_Add_fd43b427bfe3748cb0ced35df3b22159_Out_2, _Split_b821124768adb688becbc5d63b26adb4_B_3, _Add_508b788633abc0829f0843d1b1f942c2_Out_2);
            float _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2;
            Unity_Multiply_float_float(_Add_508b788633abc0829f0843d1b1f942c2_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2);
            float _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2;
            Unity_Multiply_float_float(_Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2);
            float _Multiply_b907f38702eabd80a6c67777243459de_Out_2;
            Unity_Multiply_float_float(_Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2);
            float _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2;
            Unity_Multiply_float_float(_Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2, _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2);
            UnityTexture2D _Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_9b6d5da081e434808a5840cbd915bb28;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4);
            float _Split_b20618c84cffd183aae7f27c2d0772cb_R_1 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[0];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_G_2 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[1];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_B_3 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[2];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_A_4 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[3];
            float _Property_987a8037965fff81a4930627358fc6e3_Out_0 = _CoverHeightMapMin;
            float _Property_89aeacdce0000086a98e45df79358a56_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_d18b9686bb8af48c85d99d319830c000_Out_0 = float2(_Property_987a8037965fff81a4930627358fc6e3_Out_0, _Property_89aeacdce0000086a98e45df79358a56_Out_0);
            float _Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0 = _CoverHeightMapOffset;
            float2 _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2;
            Unity_Add_float2(_Vector2_d18b9686bb8af48c85d99d319830c000_Out_0, (_Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0.xx), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2);
            float _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_B_3, float2 (0, 1), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3);
            float _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2;
            Unity_Multiply_float_float(_Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3, _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2);
            float _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2;
            Unity_Multiply_float_float(_Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2, _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2);
            float _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1;
            Unity_Saturate_float(_Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1);
            float _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2;
            Unity_Multiply_float_float(_Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2);
            float _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3;
            Unity_Branch_float(_Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3);
            float4 _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3;
            Unity_Lerp_float4(_HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxxx), _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3);
            float _Split_2d3577de3d626c8683c82ad2f5337a65_R_1 = IN.VertexColor[0];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_G_2 = IN.VertexColor[1];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_B_3 = IN.VertexColor[2];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_A_4 = IN.VertexColor[3];
            float _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_R_1, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1);
            float _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3;
            Unity_Lerp_float(0, _Split_866a663ed067f988862843fe32765ff8_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3);
            float _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2;
            Unity_Multiply_float_float(_Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3, _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0, _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2);
            float _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1;
            Unity_Absolute_float(_Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2, _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1);
            float _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2;
            Unity_Power_float(_Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1, _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0, _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2);
            float _Lerp_773fc936303dec838cfd7db23903de62_Out_3;
            Unity_Lerp_float(0, _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_773fc936303dec838cfd7db23903de62_Out_3);
            float _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2;
            Unity_Multiply_float_float(_Lerp_773fc936303dec838cfd7db23903de62_Out_3, _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0, _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2);
            float _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1;
            Unity_Absolute_float(_Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2, _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1);
            float _Property_013b523e19192f8593f2bcc154316b47_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_e5638390467fac89ae1f7b85fc93815b_Out_2;
            Unity_Power_float(_Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1, _Property_013b523e19192f8593f2bcc154316b47_Out_0, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2);
            float _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_B_3, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1);
            float _Lerp_594e5a2708dbe78894dc533303332962_Out_3;
            Unity_Lerp_float(_Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1, _Lerp_594e5a2708dbe78894dc533303332962_Out_3);
            float _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3;
            Unity_Lerp_float(0, _Split_b20618c84cffd183aae7f27c2d0772cb_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3);
            float _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_688d5e023afdea8f88054040203609ac_Out_2;
            Unity_Multiply_float_float(_Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3, _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0, _Multiply_688d5e023afdea8f88054040203609ac_Out_2);
            float _Absolute_b525073675d39a899115ebede3255a97_Out_1;
            Unity_Absolute_float(_Multiply_688d5e023afdea8f88054040203609ac_Out_2, _Absolute_b525073675d39a899115ebede3255a97_Out_1);
            float _Property_b14b960de7b30882a67b30cf91355226_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_fd909f27e3507185bcb862a17c2e116e_Out_2;
            Unity_Power_float(_Absolute_b525073675d39a899115ebede3255a97_Out_1, _Property_b14b960de7b30882a67b30cf91355226_Out_0, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2);
            float _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3;
            Unity_Lerp_float(_Lerp_594e5a2708dbe78894dc533303332962_Out_3, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3, _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3);
            float4 _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0, _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2);
            float4 _Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_0709d20641a7668b85ded82df467d4f4_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_0709d20641a7668b85ded82df467d4f4_Out_0, _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2);
            float3 _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3);
            float3 _Normalize_5840852513c50882be7896a398055011_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5840852513c50882be7896a398055011_Out_1);
            float _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2;
            Unity_DotProduct_float3(_Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3, _Normalize_5840852513c50882be7896a398055011_Out_1, _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2);
            float _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1;
            Unity_Saturate_float(_DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2, _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1);
            float _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1;
            Unity_OneMinus_float(_Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1, _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1);
            float _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1;
            Unity_Absolute_float(_OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1, _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1);
            float _Power_0f033f56feb0de89a9152324c9659e0a_Out_2;
            Unity_Power_float(_Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1, 10, _Power_0f033f56feb0de89a9152324c9659e0a_Out_2);
            float4 _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2;
            Unity_Multiply_float4_float4(_Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0, (_Power_0f033f56feb0de89a9152324c9659e0a_Out_2.xxxx), _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2);
            float _Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0 = _RimLightPower;
            float4 _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2;
            Unity_Multiply_float4_float4(_Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2, (_Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2);
            float4 _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2);
            float4 _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2;
            Unity_Add_float4(_Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2, _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2);
            float4 _Clamp_cb735681159425838b158a92c7e830b0_Out_3;
            Unity_Clamp_float4(_Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, float4(0, 0, 0, 0), _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, _Clamp_cb735681159425838b158a92c7e830b0_Out_3);
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_R_1 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[0];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_G_2 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[1];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_B_3 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[2];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[3];
            float _Property_57dab79b7e7fc28c99642ba557430a27_Out_0 = _BaseMetallic;
            float _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2;
            Unity_Multiply_float_float(_Split_866a663ed067f988862843fe32765ff8_R_1, _Property_57dab79b7e7fc28c99642ba557430a27_Out_0, _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2);
            float _Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0 = _BaseAORemapMin;
            float _Property_5a040fb62cd8888895d4f920c4036587_Out_0 = _BaseAORemapMax;
            float2 _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0 = float2(_Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0, _Property_5a040fb62cd8888895d4f920c4036587_Out_0);
            float _Remap_de2674403349aa85b1136d42692d26f9_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_G_2, float2 (0, 1), _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0, _Remap_de2674403349aa85b1136d42692d26f9_Out_3);
            float3 _Vector3_4c4100faab122d8da757a32364182844_Out_0 = float3(_Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2, _Remap_de2674403349aa85b1136d42692d26f9_Out_3, 0);
            float _Property_7cdf7bda907cf087942cd072e635a869_Out_0 = _Base2Metallic;
            float _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2;
            Unity_Multiply_float_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1, _Property_7cdf7bda907cf087942cd072e635a869_Out_0, _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2);
            float _Property_b334f6ce40e54186b9864b004fbe88d2_Out_0 = _Base2AORemapMin;
            float _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0 = _Base2AORemapMax;
            float2 _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0 = float2(_Property_b334f6ce40e54186b9864b004fbe88d2_Out_0, _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0);
            float _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2, float2 (0, 1), _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3);
            float3 _Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0 = float3(_Multiply_befa03f2838946858f28ac63a284b0f8_Out_2, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869;
            float4 _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_4c4100faab122d8da757a32364182844_Out_0, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1);
            float _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0 = _CoverMetallic;
            float _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2;
            Unity_Multiply_float_float(_Split_b20618c84cffd183aae7f27c2d0772cb_R_1, _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0, _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2);
            float _Property_e52744d22eaee787aba665b5a103092d_Out_0 = _CoverAORemapMin;
            float _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0 = _CoverAORemapMax;
            float2 _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0 = float2(_Property_e52744d22eaee787aba665b5a103092d_Out_0, _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0);
            float _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_G_2, float2 (0, 1), _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3);
            float3 _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0 = float3(_Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3, 0);
            float3 _Lerp_5d687668f4856180be26ec62834c6113_Out_3;
            Unity_Lerp_float3((_HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1.xyz), _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_5d687668f4856180be26ec62834c6113_Out_3);
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[0];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[1];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_B_3 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[2];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_A_4 = 0;
            surface.BaseColor = (_Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3.xyz);
            surface.Emission = (_Clamp_cb735681159425838b158a92c7e830b0_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4;
            surface.Occlusion = _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2;
            surface.NormalTS = _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            surface.Metallic = _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassFullScreenDebug.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "DepthOnly"
            Tags
            {
                "LightMode" = "DepthOnly"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskDepth]
        Ref [_StencilRefDepth]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma multi_compile _ WRITE_NORMAL_BUFFER
        #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ WRITE_DECAL_BUFFER
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float4 _BaseTilingOffset;
        float _BaseTriplanarThreshold;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2TriplanarThreshold;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float3 _CoverDirection;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverTriplanarThreshold;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float _CoverEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float4 _RimColor;
        float _RimLightPower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Lava_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options renderinglayer procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float
        {
        };
        
        void SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(float3 Vector3_314C8600, Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float4 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2));
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float4 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2));
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float4 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float4 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float4(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float4 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float4(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float4 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float4(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        YZ_3 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0;
        XY_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        struct Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2);
        float3 _Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float3 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float3_float3(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2;
        Unity_Multiply_float_float(_Split_6299d4ddcc4c74828aea40a46fdb896e_B_3, -1, _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2);
        float2 _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0 = float2(_Multiply_de711f4a4614bd89a463b53374cf4036_Out_2, 1);
        float2 _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2));
        _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0);
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float2 _Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0 = float2(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4, _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5);
        float2 _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2;
        Unity_Multiply_float2_float2(_Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0, _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2);
        float2 _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_b227c84042055e8faa1a9fdc69529707_Out_2;
        Unity_Add_float2(_Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2, _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0, _Add_b227c84042055e8faa1a9fdc69529707_Out_2);
        float _Split_2cfb9eacd8762483941459cdf28bda97_R_1 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[0];
        float _Split_2cfb9eacd8762483941459cdf28bda97_G_2 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[1];
        float _Split_2cfb9eacd8762483941459cdf28bda97_B_3 = 0;
        float _Split_2cfb9eacd8762483941459cdf28bda97_A_4 = 0;
        float _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0 = float3(_Split_2cfb9eacd8762483941459cdf28bda97_R_1, _Split_2cfb9eacd8762483941459cdf28bda97_G_2, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float3_float3(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_R_1, 1);
        float2 _Multiply_862402885a49f18cb87278ab53bc6744_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_862402885a49f18cb87278ab53bc6744_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_862402885a49f18cb87278ab53bc6744_Out_2));
        _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0);
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float _Multiply_4649b768be76d784a3284bacde795359_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Multiply_4649b768be76d784a3284bacde795359_Out_2);
        float2 _Vector2_819fcd5eb484438eacad1987576d7d67_Out_0 = float2(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4, _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5);
        float2 _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2;
        Unity_Multiply_float2_float2(_Vector2_819fcd5eb484438eacad1987576d7d67_Out_0, _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2);
        float2 _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2;
        Unity_Add_float2(_Multiply_58530ebb3c6d798b93686a76247bf505_Out_2, _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0, _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2);
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[0];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[1];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_B_3 = 0;
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_A_4 = 0;
        float3 _Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0 = float3(_Multiply_4649b768be76d784a3284bacde795359_Out_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1);
        float3 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float3_float3(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float3 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float3(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float3 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float3(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float3 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float3(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        float3x3 Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1 = TransformWorldToTangent(_Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2.xyz, Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World);
        float3 _Normalize_15ef346824db0a8797631ed8b998e673_Out_1;
        Unity_Normalize_float3(_Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1, _Normalize_15ef346824db0a8797631ed8b998e673_Out_1);
        XYZ_1 = (float4(_Normalize_15ef346824db0a8797631ed8b998e673_Out_1, 1.0));
        XZ_2 = (float4(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, 1.0));
        YZ_3 = (float4(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, 1.0));
        XY_4 = (float4(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d;
            float3 _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1;
            SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(IN.ObjectSpacePosition, _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d, _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1);
            description.Position = _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_d92b1410e1d6bc81a86076b09e35f302_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_d4a357b2daff5587ae46468726a33797_Out_0 = _BaseTilingOffset;
            float4 _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_d4a357b2daff5587ae46468726a33797_Out_0, _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2);
            float _Property_b168be530d5b4082a2816fc835b55e19_Out_0 = _BaseTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_d92b1410e1d6bc81a86076b09e35f302_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4);
            float4 _Property_17f0f1bec4ec6485881127275660d4f1_Out_0 = _BaseColor;
            float4 _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _Property_17f0f1bec4ec6485881127275660d4f1_Out_0, _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2);
            float _Split_473d9bf097327483847264a7cc5c61f9_R_1 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[0];
            float _Split_473d9bf097327483847264a7cc5c61f9_G_2 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[1];
            float _Split_473d9bf097327483847264a7cc5c61f9_B_3 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[2];
            float _Split_473d9bf097327483847264a7cc5c61f9_A_4 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[3];
            float _Split_2ffd394bfe87c786b791f90b404c032d_R_1 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[0];
            float _Split_2ffd394bfe87c786b791f90b404c032d_G_2 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[1];
            float _Split_2ffd394bfe87c786b791f90b404c032d_B_3 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[2];
            float _Split_2ffd394bfe87c786b791f90b404c032d_A_4 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[3];
            float _Property_a1b1d767544de781a39d6415872f7285_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0 = float2(_Property_a1b1d767544de781a39d6415872f7285_Out_0, _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0);
            float _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3;
            Unity_Remap_float(_Split_2ffd394bfe87c786b791f90b404c032d_A_4, float2 (0, 1), _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3);
            float4 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4;
            float3 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5;
            float2 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6;
            Unity_Combine_float(_Split_473d9bf097327483847264a7cc5c61f9_R_1, _Split_473d9bf097327483847264a7cc5c61f9_G_2, _Split_473d9bf097327483847264a7cc5c61f9_B_3, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6);
            UnityTexture2D _Property_080b6cb46abb00848263c964726eac36_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_080b6cb46abb00848263c964726eac36_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4);
            float _Split_866a663ed067f988862843fe32765ff8_R_1 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[0];
            float _Split_866a663ed067f988862843fe32765ff8_G_2 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[1];
            float _Split_866a663ed067f988862843fe32765ff8_B_3 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[2];
            float _Split_866a663ed067f988862843fe32765ff8_A_4 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[3];
            float _Property_3b9891099f2f3e84b765eb453f6f6810_Out_0 = _HeightMin;
            float _Property_bde21360babd9089a90a45cd2843925b_Out_0 = _HeightMax;
            float2 _Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0 = float2(_Property_3b9891099f2f3e84b765eb453f6f6810_Out_0, _Property_bde21360babd9089a90a45cd2843925b_Out_0);
            float _Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0 = _HeightOffset;
            float2 _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2;
            Unity_Add_float2(_Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0, (_Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0.xx), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2);
            float _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_B_3, float2 (0, 1), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3);
            UnityTexture2D _Property_11586ef261ce8e87953046ff84ce22ab_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_221c724b2137d58c8c387fee5b48be14_Out_0 = _Base2TilingOffset;
            float4 _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_221c724b2137d58c8c387fee5b48be14_Out_0, _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2);
            float _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0 = _Base2TriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_ca3aaaec266f85859b75e37163da7cba;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_11586ef261ce8e87953046ff84ce22ab_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4);
            float4 _Property_60dff9cc4310ea89874789591a78d84b_Out_0 = _Base2Color;
            float4 _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _Property_60dff9cc4310ea89874789591a78d84b_Out_0, _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2);
            float _Split_96d66d11efd8418aa95cffd04b788c51_R_1 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[0];
            float _Split_96d66d11efd8418aa95cffd04b788c51_G_2 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[1];
            float _Split_96d66d11efd8418aa95cffd04b788c51_B_3 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[2];
            float _Split_96d66d11efd8418aa95cffd04b788c51_A_4 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[3];
            float _Split_837cde6fde77238baac188382335775d_R_1 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[0];
            float _Split_837cde6fde77238baac188382335775d_G_2 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[1];
            float _Split_837cde6fde77238baac188382335775d_B_3 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[2];
            float _Split_837cde6fde77238baac188382335775d_A_4 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[3];
            float _Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0 = float2(_Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0, _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0);
            float _Remap_697b96439d3a0983800a051b2b4edd90_Out_3;
            Unity_Remap_float(_Split_837cde6fde77238baac188382335775d_A_4, float2 (0, 1), _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3);
            float4 _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4;
            float3 _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5;
            float2 _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6;
            Unity_Combine_float(_Split_96d66d11efd8418aa95cffd04b788c51_R_1, _Split_96d66d11efd8418aa95cffd04b788c51_G_2, _Split_96d66d11efd8418aa95cffd04b788c51_B_3, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5, _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6);
            float _Property_312b653a29ccc087849b1493611fb73c_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.tex, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.samplerstate, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.r;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_G_5 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.g;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_B_6 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.b;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_A_7 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.a;
            float _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1);
            float _Branch_6b7615e16629338ba87d3570a0096f66_Out_3;
            Unity_Branch_float(_Property_312b653a29ccc087849b1493611fb73c_Out_0, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1, _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _Branch_6b7615e16629338ba87d3570a0096f66_Out_3);
            UnityTexture2D _Property_b4749c77856157858fffde0aed55fc74_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_b4749c77856157858fffde0aed55fc74_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4);
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[0];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[1];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[2];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[3];
            float _Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0 = _HeightMin2;
            float _Property_145222f375008a879315637be0f172c5_Out_0 = _HeightMax2;
            float2 _Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0 = float2(_Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0, _Property_145222f375008a879315637be0f172c5_Out_0);
            float _Property_8be924d801daee88b294af592a560e75_Out_0 = _HeightOffset2;
            float2 _Add_37703f1eb9ce078daaedca833705f5dd_Out_2;
            Unity_Add_float2(_Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0, (_Property_8be924d801daee88b294af592a560e75_Out_0.xx), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2);
            float _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3, float2 (0, 1), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3);
            float _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2;
            Unity_Multiply_float_float(_Branch_6b7615e16629338ba87d3570a0096f66_Out_3, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3, _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2);
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_R_1 = IN.VertexColor[0];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2 = IN.VertexColor[1];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3 = IN.VertexColor[2];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_A_4 = IN.VertexColor[3];
            float _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2;
            Unity_Multiply_float_float(_Multiply_d9f42ca072d9188ab2566400157a199f_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2);
            float _Property_c0dc9341fd635288a1c2869945617704_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5;
            float4 _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1);
            UnityTexture2D _Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_9bedb34aba10fa89a5f5b18919971491_Out_0 = _CoverTilingOffset;
            float4 _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_9bedb34aba10fa89a5f5b18919971491_Out_0, _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2);
            float _Property_bf361924f27f848994241bda91fc2005_Out_0 = _CoverTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4);
            float4 _Property_19547f2fe562798683b730e775cbfb39_Out_0 = _CoverBaseColor;
            float4 _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _Property_19547f2fe562798683b730e775cbfb39_Out_0, _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2);
            float _Split_0d31d5c6a74be68484498325bbfacd3c_R_1 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[0];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_G_2 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[1];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_B_3 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[2];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_A_4 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[3];
            float _Split_90237729226dca849687b6c56fde4cbe_R_1 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[0];
            float _Split_90237729226dca849687b6c56fde4cbe_G_2 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[1];
            float _Split_90237729226dca849687b6c56fde4cbe_B_3 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[2];
            float _Split_90237729226dca849687b6c56fde4cbe_A_4 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[3];
            float _Property_007771e9e06cc78b9844d01f8129c541_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0 = float2(_Property_007771e9e06cc78b9844d01f8129c541_Out_0, _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0);
            float _Remap_690ea2a75496a283a66513f691c4f9db_Out_3;
            Unity_Remap_float(_Split_90237729226dca849687b6c56fde4cbe_A_4, float2 (0, 1), _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3);
            float4 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4;
            float3 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5;
            float2 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6;
            Unity_Combine_float(_Split_0d31d5c6a74be68484498325bbfacd3c_R_1, _Split_0d31d5c6a74be68484498325bbfacd3c_G_2, _Split_0d31d5c6a74be68484498325bbfacd3c_B_3, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6);
            float _Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_89bda93a711241049250cd3215f22c11_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0 = IN.uv0;
            float4 _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0 = SAMPLE_TEXTURE2D(_Property_89bda93a711241049250cd3215f22c11_Out_0.tex, _Property_89bda93a711241049250cd3215f22c11_Out_0.samplerstate, _Property_89bda93a711241049250cd3215f22c11_Out_0.GetTransformedUV((_UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0.xy)));
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_R_4 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.r;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_G_5 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.g;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_B_6 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.b;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_A_7 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.a;
            float _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0 = _CoverMaskPower;
            float _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_b8be215db546638398ea07060feb5224_A_7, _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0, _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2);
            float _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3;
            Unity_Clamp_float(_Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2, 0, 1, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3);
            float3 _Property_509761afcb3aad8f9a29405c122dbf08_Out_0 = _CoverDirection;
            UnityTexture2D _Property_72c615246e955087b85288c29905f048_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_72c615246e955087b85288c29905f048_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4);
            float _Property_7edd97bda70eb38a8c4253094700be37_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1.xyz), _Property_7edd97bda70eb38a8c4253094700be37_Out_0, _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2);
            UnityTexture2D _Property_6809577d1aa24984aa957e13d0574602_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_6809577d1aa24984aa957e13d0574602_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4);
            float _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1.xyz), _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0, _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_1276d06b2c028187bc5fb2018f7da110;
            float4 _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1);
            UnityTexture2D _Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4);
            float _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0, _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2);
            float3 _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, IN.WorldSpaceNormal, _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2);
            float _Split_e74c8f300b486e86a5700118b60b7885_R_1 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[0];
            float _Split_e74c8f300b486e86a5700118b60b7885_G_2 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[1];
            float _Split_e74c8f300b486e86a5700118b60b7885_B_3 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[2];
            float _Split_e74c8f300b486e86a5700118b60b7885_A_4 = 0;
            float _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2;
            Unity_Add_float(_Split_e74c8f300b486e86a5700118b60b7885_R_1, _Split_e74c8f300b486e86a5700118b60b7885_G_2, _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2);
            float _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2;
            Unity_Add_float(_Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2, _Split_e74c8f300b486e86a5700118b60b7885_B_3, _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2);
            float _Property_ca7cc2d889a56683904c7546a72cedbf_Out_0 = _Cover_Amount;
            float _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2;
            Unity_Subtract_float(4, _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2);
            float _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2;
            Unity_Divide_float(_Property_ca7cc2d889a56683904c7546a72cedbf_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2);
            float _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1;
            Unity_Absolute_float(_Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2, _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1);
            float _Power_681b2745dbae62839624b98240ca04f7_Out_2;
            Unity_Power_float(_Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Power_681b2745dbae62839624b98240ca04f7_Out_2);
            float _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3;
            Unity_Clamp_float(_Power_681b2745dbae62839624b98240ca04f7_Out_2, 0, 2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3);
            float _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2;
            Unity_Multiply_float_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2);
            float _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1;
            Unity_Saturate_float(_Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2, _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1);
            float _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3;
            Unity_Clamp_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, 0, 0.9999, _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3);
            float _Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0 = _Cover_Max_Angle;
            float _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2;
            Unity_Divide_float(_Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0, 45, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2);
            float _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1;
            Unity_OneMinus_float(_Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1);
            float _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2;
            Unity_Subtract_float(_Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1, _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2);
            float _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3;
            Unity_Clamp_float(_Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2, 0, 2, _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3);
            float _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2;
            Unity_Divide_float(1, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2);
            float _Multiply_749d76436ed5e58abec68ae130db866b_Out_2;
            Unity_Multiply_float_float(_Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2, _Multiply_749d76436ed5e58abec68ae130db866b_Out_2);
            float _Absolute_043a189b52847189ad0575955b41f403_Out_1;
            Unity_Absolute_float(_Multiply_749d76436ed5e58abec68ae130db866b_Out_2, _Absolute_043a189b52847189ad0575955b41f403_Out_1);
            float _Property_d4f4330ee4eced8d88fb074732401835_Out_0 = _CoverHardness;
            float _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2;
            Unity_Power_float(_Absolute_043a189b52847189ad0575955b41f403_Out_1, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2);
            float _Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0 = _Cover_Min_Height;
            float _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1;
            Unity_OneMinus_float(_Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0, _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1);
            float _Split_815418660959f184b10470e678ebae30_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_815418660959f184b10470e678ebae30_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_815418660959f184b10470e678ebae30_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_815418660959f184b10470e678ebae30_A_4 = 0;
            float _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2;
            Unity_Add_float(_OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1, _Split_815418660959f184b10470e678ebae30_G_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2);
            float _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, 1, _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2);
            float _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3;
            Unity_Clamp_float(_Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2, 0, 1, _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3);
            float _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0 = _Cover_Min_Height_Blending;
            float _Add_e57f70c02382b28397642f05af76cfb0_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0, _Add_e57f70c02382b28397642f05af76cfb0_Out_2);
            float _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2;
            Unity_Divide_float(_Add_e57f70c02382b28397642f05af76cfb0_Out_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2);
            float _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1;
            Unity_OneMinus_float(_Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2, _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1);
            float _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2;
            Unity_Add_float(_OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1, -0.5, _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2);
            float _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3;
            Unity_Clamp_float(_Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2, 0, 1, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3);
            float _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2;
            Unity_Add_float(_Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3, _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2);
            float _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3;
            Unity_Clamp_float(_Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2, 0, 1, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3);
            float _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2;
            Unity_Multiply_float_float(_Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2);
            float _Multiply_5336a32115eb29849650688fd99ee185_Out_2;
            Unity_Multiply_float_float(_Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_5336a32115eb29849650688fd99ee185_Out_2);
            float3 _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2, (_Multiply_5336a32115eb29849650688fd99ee185_Out_2.xxx), _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3);
            float3x3 Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1 = normalize(mul(Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent, _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3.xyz).xyz);
            float3 _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1, _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2);
            float _Split_b821124768adb688becbc5d63b26adb4_R_1 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[0];
            float _Split_b821124768adb688becbc5d63b26adb4_G_2 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[1];
            float _Split_b821124768adb688becbc5d63b26adb4_B_3 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[2];
            float _Split_b821124768adb688becbc5d63b26adb4_A_4 = 0;
            float _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2;
            Unity_Add_float(_Split_b821124768adb688becbc5d63b26adb4_R_1, _Split_b821124768adb688becbc5d63b26adb4_G_2, _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2);
            float _Add_508b788633abc0829f0843d1b1f942c2_Out_2;
            Unity_Add_float(_Add_fd43b427bfe3748cb0ced35df3b22159_Out_2, _Split_b821124768adb688becbc5d63b26adb4_B_3, _Add_508b788633abc0829f0843d1b1f942c2_Out_2);
            float _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2;
            Unity_Multiply_float_float(_Add_508b788633abc0829f0843d1b1f942c2_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2);
            float _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2;
            Unity_Multiply_float_float(_Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2);
            float _Multiply_b907f38702eabd80a6c67777243459de_Out_2;
            Unity_Multiply_float_float(_Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2);
            float _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2;
            Unity_Multiply_float_float(_Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2, _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2);
            UnityTexture2D _Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_9b6d5da081e434808a5840cbd915bb28;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4);
            float _Split_b20618c84cffd183aae7f27c2d0772cb_R_1 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[0];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_G_2 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[1];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_B_3 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[2];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_A_4 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[3];
            float _Property_987a8037965fff81a4930627358fc6e3_Out_0 = _CoverHeightMapMin;
            float _Property_89aeacdce0000086a98e45df79358a56_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_d18b9686bb8af48c85d99d319830c000_Out_0 = float2(_Property_987a8037965fff81a4930627358fc6e3_Out_0, _Property_89aeacdce0000086a98e45df79358a56_Out_0);
            float _Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0 = _CoverHeightMapOffset;
            float2 _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2;
            Unity_Add_float2(_Vector2_d18b9686bb8af48c85d99d319830c000_Out_0, (_Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0.xx), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2);
            float _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_B_3, float2 (0, 1), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3);
            float _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2;
            Unity_Multiply_float_float(_Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3, _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2);
            float _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2;
            Unity_Multiply_float_float(_Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2, _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2);
            float _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1;
            Unity_Saturate_float(_Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1);
            float _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2;
            Unity_Multiply_float_float(_Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2);
            float _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3;
            Unity_Branch_float(_Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3);
            float4 _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3;
            Unity_Lerp_float4(_HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxxx), _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3);
            float _Split_2d3577de3d626c8683c82ad2f5337a65_R_1 = IN.VertexColor[0];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_G_2 = IN.VertexColor[1];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_B_3 = IN.VertexColor[2];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_A_4 = IN.VertexColor[3];
            float _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_R_1, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1);
            float _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3;
            Unity_Lerp_float(0, _Split_866a663ed067f988862843fe32765ff8_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3);
            float _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2;
            Unity_Multiply_float_float(_Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3, _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0, _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2);
            float _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1;
            Unity_Absolute_float(_Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2, _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1);
            float _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2;
            Unity_Power_float(_Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1, _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0, _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2);
            float _Lerp_773fc936303dec838cfd7db23903de62_Out_3;
            Unity_Lerp_float(0, _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_773fc936303dec838cfd7db23903de62_Out_3);
            float _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2;
            Unity_Multiply_float_float(_Lerp_773fc936303dec838cfd7db23903de62_Out_3, _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0, _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2);
            float _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1;
            Unity_Absolute_float(_Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2, _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1);
            float _Property_013b523e19192f8593f2bcc154316b47_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_e5638390467fac89ae1f7b85fc93815b_Out_2;
            Unity_Power_float(_Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1, _Property_013b523e19192f8593f2bcc154316b47_Out_0, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2);
            float _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_B_3, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1);
            float _Lerp_594e5a2708dbe78894dc533303332962_Out_3;
            Unity_Lerp_float(_Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1, _Lerp_594e5a2708dbe78894dc533303332962_Out_3);
            float _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3;
            Unity_Lerp_float(0, _Split_b20618c84cffd183aae7f27c2d0772cb_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3);
            float _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_688d5e023afdea8f88054040203609ac_Out_2;
            Unity_Multiply_float_float(_Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3, _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0, _Multiply_688d5e023afdea8f88054040203609ac_Out_2);
            float _Absolute_b525073675d39a899115ebede3255a97_Out_1;
            Unity_Absolute_float(_Multiply_688d5e023afdea8f88054040203609ac_Out_2, _Absolute_b525073675d39a899115ebede3255a97_Out_1);
            float _Property_b14b960de7b30882a67b30cf91355226_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_fd909f27e3507185bcb862a17c2e116e_Out_2;
            Unity_Power_float(_Absolute_b525073675d39a899115ebede3255a97_Out_1, _Property_b14b960de7b30882a67b30cf91355226_Out_0, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2);
            float _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3;
            Unity_Lerp_float(_Lerp_594e5a2708dbe78894dc533303332962_Out_3, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3, _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3);
            float4 _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0, _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2);
            float4 _Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_0709d20641a7668b85ded82df467d4f4_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_0709d20641a7668b85ded82df467d4f4_Out_0, _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2);
            float3 _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3);
            float3 _Normalize_5840852513c50882be7896a398055011_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5840852513c50882be7896a398055011_Out_1);
            float _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2;
            Unity_DotProduct_float3(_Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3, _Normalize_5840852513c50882be7896a398055011_Out_1, _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2);
            float _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1;
            Unity_Saturate_float(_DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2, _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1);
            float _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1;
            Unity_OneMinus_float(_Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1, _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1);
            float _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1;
            Unity_Absolute_float(_OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1, _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1);
            float _Power_0f033f56feb0de89a9152324c9659e0a_Out_2;
            Unity_Power_float(_Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1, 10, _Power_0f033f56feb0de89a9152324c9659e0a_Out_2);
            float4 _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2;
            Unity_Multiply_float4_float4(_Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0, (_Power_0f033f56feb0de89a9152324c9659e0a_Out_2.xxxx), _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2);
            float _Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0 = _RimLightPower;
            float4 _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2;
            Unity_Multiply_float4_float4(_Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2, (_Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2);
            float4 _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2);
            float4 _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2;
            Unity_Add_float4(_Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2, _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2);
            float4 _Clamp_cb735681159425838b158a92c7e830b0_Out_3;
            Unity_Clamp_float4(_Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, float4(0, 0, 0, 0), _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, _Clamp_cb735681159425838b158a92c7e830b0_Out_3);
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_R_1 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[0];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_G_2 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[1];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_B_3 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[2];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[3];
            float _Property_57dab79b7e7fc28c99642ba557430a27_Out_0 = _BaseMetallic;
            float _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2;
            Unity_Multiply_float_float(_Split_866a663ed067f988862843fe32765ff8_R_1, _Property_57dab79b7e7fc28c99642ba557430a27_Out_0, _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2);
            float _Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0 = _BaseAORemapMin;
            float _Property_5a040fb62cd8888895d4f920c4036587_Out_0 = _BaseAORemapMax;
            float2 _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0 = float2(_Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0, _Property_5a040fb62cd8888895d4f920c4036587_Out_0);
            float _Remap_de2674403349aa85b1136d42692d26f9_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_G_2, float2 (0, 1), _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0, _Remap_de2674403349aa85b1136d42692d26f9_Out_3);
            float3 _Vector3_4c4100faab122d8da757a32364182844_Out_0 = float3(_Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2, _Remap_de2674403349aa85b1136d42692d26f9_Out_3, 0);
            float _Property_7cdf7bda907cf087942cd072e635a869_Out_0 = _Base2Metallic;
            float _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2;
            Unity_Multiply_float_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1, _Property_7cdf7bda907cf087942cd072e635a869_Out_0, _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2);
            float _Property_b334f6ce40e54186b9864b004fbe88d2_Out_0 = _Base2AORemapMin;
            float _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0 = _Base2AORemapMax;
            float2 _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0 = float2(_Property_b334f6ce40e54186b9864b004fbe88d2_Out_0, _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0);
            float _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2, float2 (0, 1), _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3);
            float3 _Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0 = float3(_Multiply_befa03f2838946858f28ac63a284b0f8_Out_2, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869;
            float4 _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_4c4100faab122d8da757a32364182844_Out_0, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1);
            float _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0 = _CoverMetallic;
            float _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2;
            Unity_Multiply_float_float(_Split_b20618c84cffd183aae7f27c2d0772cb_R_1, _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0, _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2);
            float _Property_e52744d22eaee787aba665b5a103092d_Out_0 = _CoverAORemapMin;
            float _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0 = _CoverAORemapMax;
            float2 _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0 = float2(_Property_e52744d22eaee787aba665b5a103092d_Out_0, _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0);
            float _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_G_2, float2 (0, 1), _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3);
            float3 _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0 = float3(_Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3, 0);
            float3 _Lerp_5d687668f4856180be26ec62834c6113_Out_3;
            Unity_Lerp_float3((_HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1.xyz), _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_5d687668f4856180be26ec62834c6113_Out_3);
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[0];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[1];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_B_3 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[2];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_A_4 = 0;
            surface.BaseColor = (_Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3.xyz);
            surface.Emission = (_Clamp_cb735681159425838b158a92c7e830b0_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4;
            surface.Occlusion = _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2;
            surface.NormalTS = _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            surface.Metallic = _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "GBuffer"
            Tags
            {
                "LightMode" = "GBuffer"
            }
        
            // Render State
            Cull [_CullMode]
        ZTest [_ZTestGBuffer]
        Stencil
        {
        WriteMask [_StencilWriteMaskGBuffer]
        Ref [_StencilRefGBuffer]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma multi_compile_fragment _ LIGHT_LAYERS
        #pragma multi_compile_raytracing _ LIGHT_LAYERS
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
        #pragma multi_compile_raytracing _ SHADOWS_SHADOWMASK
        #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
        #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_GBUFFER
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float4 _BaseTilingOffset;
        float _BaseTriplanarThreshold;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2TriplanarThreshold;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float3 _CoverDirection;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverTriplanarThreshold;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float _CoverEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float4 _RimColor;
        float _RimLightPower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Lava_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv1 : TEXCOORD1;
             float4 uv2 : TEXCOORD2;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
             float4 interp6 : INTERP6;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.texCoord1;
            output.interp5.xyzw =  input.texCoord2;
            output.interp6.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.texCoord1 = input.interp4.xyzw;
            output.texCoord2 = input.interp5.xyzw;
            output.color = input.interp6.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options renderinglayer procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float
        {
        };
        
        void SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(float3 Vector3_314C8600, Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float4 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2));
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float4 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2));
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float4 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float4 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float4(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float4 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float4(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float4 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float4(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        YZ_3 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0;
        XY_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        struct Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2);
        float3 _Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float3 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float3_float3(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2;
        Unity_Multiply_float_float(_Split_6299d4ddcc4c74828aea40a46fdb896e_B_3, -1, _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2);
        float2 _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0 = float2(_Multiply_de711f4a4614bd89a463b53374cf4036_Out_2, 1);
        float2 _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2));
        _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0);
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float2 _Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0 = float2(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4, _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5);
        float2 _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2;
        Unity_Multiply_float2_float2(_Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0, _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2);
        float2 _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_b227c84042055e8faa1a9fdc69529707_Out_2;
        Unity_Add_float2(_Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2, _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0, _Add_b227c84042055e8faa1a9fdc69529707_Out_2);
        float _Split_2cfb9eacd8762483941459cdf28bda97_R_1 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[0];
        float _Split_2cfb9eacd8762483941459cdf28bda97_G_2 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[1];
        float _Split_2cfb9eacd8762483941459cdf28bda97_B_3 = 0;
        float _Split_2cfb9eacd8762483941459cdf28bda97_A_4 = 0;
        float _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0 = float3(_Split_2cfb9eacd8762483941459cdf28bda97_R_1, _Split_2cfb9eacd8762483941459cdf28bda97_G_2, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float3_float3(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_R_1, 1);
        float2 _Multiply_862402885a49f18cb87278ab53bc6744_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_862402885a49f18cb87278ab53bc6744_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_862402885a49f18cb87278ab53bc6744_Out_2));
        _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0);
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float _Multiply_4649b768be76d784a3284bacde795359_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Multiply_4649b768be76d784a3284bacde795359_Out_2);
        float2 _Vector2_819fcd5eb484438eacad1987576d7d67_Out_0 = float2(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4, _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5);
        float2 _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2;
        Unity_Multiply_float2_float2(_Vector2_819fcd5eb484438eacad1987576d7d67_Out_0, _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2);
        float2 _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2;
        Unity_Add_float2(_Multiply_58530ebb3c6d798b93686a76247bf505_Out_2, _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0, _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2);
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[0];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[1];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_B_3 = 0;
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_A_4 = 0;
        float3 _Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0 = float3(_Multiply_4649b768be76d784a3284bacde795359_Out_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1);
        float3 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float3_float3(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float3 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float3(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float3 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float3(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float3 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float3(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        float3x3 Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1 = TransformWorldToTangent(_Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2.xyz, Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World);
        float3 _Normalize_15ef346824db0a8797631ed8b998e673_Out_1;
        Unity_Normalize_float3(_Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1, _Normalize_15ef346824db0a8797631ed8b998e673_Out_1);
        XYZ_1 = (float4(_Normalize_15ef346824db0a8797631ed8b998e673_Out_1, 1.0));
        XZ_2 = (float4(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, 1.0));
        YZ_3 = (float4(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, 1.0));
        XY_4 = (float4(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d;
            float3 _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1;
            SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(IN.ObjectSpacePosition, _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d, _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1);
            description.Position = _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
            float4 VTPackedFeedback;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_d92b1410e1d6bc81a86076b09e35f302_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_d4a357b2daff5587ae46468726a33797_Out_0 = _BaseTilingOffset;
            float4 _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_d4a357b2daff5587ae46468726a33797_Out_0, _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2);
            float _Property_b168be530d5b4082a2816fc835b55e19_Out_0 = _BaseTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_d92b1410e1d6bc81a86076b09e35f302_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4);
            float4 _Property_17f0f1bec4ec6485881127275660d4f1_Out_0 = _BaseColor;
            float4 _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _Property_17f0f1bec4ec6485881127275660d4f1_Out_0, _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2);
            float _Split_473d9bf097327483847264a7cc5c61f9_R_1 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[0];
            float _Split_473d9bf097327483847264a7cc5c61f9_G_2 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[1];
            float _Split_473d9bf097327483847264a7cc5c61f9_B_3 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[2];
            float _Split_473d9bf097327483847264a7cc5c61f9_A_4 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[3];
            float _Split_2ffd394bfe87c786b791f90b404c032d_R_1 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[0];
            float _Split_2ffd394bfe87c786b791f90b404c032d_G_2 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[1];
            float _Split_2ffd394bfe87c786b791f90b404c032d_B_3 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[2];
            float _Split_2ffd394bfe87c786b791f90b404c032d_A_4 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[3];
            float _Property_a1b1d767544de781a39d6415872f7285_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0 = float2(_Property_a1b1d767544de781a39d6415872f7285_Out_0, _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0);
            float _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3;
            Unity_Remap_float(_Split_2ffd394bfe87c786b791f90b404c032d_A_4, float2 (0, 1), _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3);
            float4 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4;
            float3 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5;
            float2 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6;
            Unity_Combine_float(_Split_473d9bf097327483847264a7cc5c61f9_R_1, _Split_473d9bf097327483847264a7cc5c61f9_G_2, _Split_473d9bf097327483847264a7cc5c61f9_B_3, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6);
            UnityTexture2D _Property_080b6cb46abb00848263c964726eac36_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_080b6cb46abb00848263c964726eac36_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4);
            float _Split_866a663ed067f988862843fe32765ff8_R_1 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[0];
            float _Split_866a663ed067f988862843fe32765ff8_G_2 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[1];
            float _Split_866a663ed067f988862843fe32765ff8_B_3 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[2];
            float _Split_866a663ed067f988862843fe32765ff8_A_4 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[3];
            float _Property_3b9891099f2f3e84b765eb453f6f6810_Out_0 = _HeightMin;
            float _Property_bde21360babd9089a90a45cd2843925b_Out_0 = _HeightMax;
            float2 _Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0 = float2(_Property_3b9891099f2f3e84b765eb453f6f6810_Out_0, _Property_bde21360babd9089a90a45cd2843925b_Out_0);
            float _Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0 = _HeightOffset;
            float2 _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2;
            Unity_Add_float2(_Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0, (_Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0.xx), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2);
            float _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_B_3, float2 (0, 1), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3);
            UnityTexture2D _Property_11586ef261ce8e87953046ff84ce22ab_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_221c724b2137d58c8c387fee5b48be14_Out_0 = _Base2TilingOffset;
            float4 _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_221c724b2137d58c8c387fee5b48be14_Out_0, _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2);
            float _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0 = _Base2TriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_ca3aaaec266f85859b75e37163da7cba;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_11586ef261ce8e87953046ff84ce22ab_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4);
            float4 _Property_60dff9cc4310ea89874789591a78d84b_Out_0 = _Base2Color;
            float4 _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _Property_60dff9cc4310ea89874789591a78d84b_Out_0, _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2);
            float _Split_96d66d11efd8418aa95cffd04b788c51_R_1 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[0];
            float _Split_96d66d11efd8418aa95cffd04b788c51_G_2 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[1];
            float _Split_96d66d11efd8418aa95cffd04b788c51_B_3 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[2];
            float _Split_96d66d11efd8418aa95cffd04b788c51_A_4 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[3];
            float _Split_837cde6fde77238baac188382335775d_R_1 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[0];
            float _Split_837cde6fde77238baac188382335775d_G_2 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[1];
            float _Split_837cde6fde77238baac188382335775d_B_3 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[2];
            float _Split_837cde6fde77238baac188382335775d_A_4 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[3];
            float _Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0 = float2(_Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0, _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0);
            float _Remap_697b96439d3a0983800a051b2b4edd90_Out_3;
            Unity_Remap_float(_Split_837cde6fde77238baac188382335775d_A_4, float2 (0, 1), _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3);
            float4 _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4;
            float3 _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5;
            float2 _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6;
            Unity_Combine_float(_Split_96d66d11efd8418aa95cffd04b788c51_R_1, _Split_96d66d11efd8418aa95cffd04b788c51_G_2, _Split_96d66d11efd8418aa95cffd04b788c51_B_3, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5, _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6);
            float _Property_312b653a29ccc087849b1493611fb73c_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.tex, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.samplerstate, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.r;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_G_5 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.g;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_B_6 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.b;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_A_7 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.a;
            float _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1);
            float _Branch_6b7615e16629338ba87d3570a0096f66_Out_3;
            Unity_Branch_float(_Property_312b653a29ccc087849b1493611fb73c_Out_0, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1, _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _Branch_6b7615e16629338ba87d3570a0096f66_Out_3);
            UnityTexture2D _Property_b4749c77856157858fffde0aed55fc74_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_b4749c77856157858fffde0aed55fc74_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4);
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[0];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[1];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[2];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[3];
            float _Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0 = _HeightMin2;
            float _Property_145222f375008a879315637be0f172c5_Out_0 = _HeightMax2;
            float2 _Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0 = float2(_Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0, _Property_145222f375008a879315637be0f172c5_Out_0);
            float _Property_8be924d801daee88b294af592a560e75_Out_0 = _HeightOffset2;
            float2 _Add_37703f1eb9ce078daaedca833705f5dd_Out_2;
            Unity_Add_float2(_Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0, (_Property_8be924d801daee88b294af592a560e75_Out_0.xx), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2);
            float _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3, float2 (0, 1), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3);
            float _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2;
            Unity_Multiply_float_float(_Branch_6b7615e16629338ba87d3570a0096f66_Out_3, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3, _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2);
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_R_1 = IN.VertexColor[0];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2 = IN.VertexColor[1];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3 = IN.VertexColor[2];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_A_4 = IN.VertexColor[3];
            float _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2;
            Unity_Multiply_float_float(_Multiply_d9f42ca072d9188ab2566400157a199f_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2);
            float _Property_c0dc9341fd635288a1c2869945617704_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5;
            float4 _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1);
            UnityTexture2D _Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_9bedb34aba10fa89a5f5b18919971491_Out_0 = _CoverTilingOffset;
            float4 _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_9bedb34aba10fa89a5f5b18919971491_Out_0, _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2);
            float _Property_bf361924f27f848994241bda91fc2005_Out_0 = _CoverTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4);
            float4 _Property_19547f2fe562798683b730e775cbfb39_Out_0 = _CoverBaseColor;
            float4 _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _Property_19547f2fe562798683b730e775cbfb39_Out_0, _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2);
            float _Split_0d31d5c6a74be68484498325bbfacd3c_R_1 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[0];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_G_2 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[1];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_B_3 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[2];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_A_4 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[3];
            float _Split_90237729226dca849687b6c56fde4cbe_R_1 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[0];
            float _Split_90237729226dca849687b6c56fde4cbe_G_2 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[1];
            float _Split_90237729226dca849687b6c56fde4cbe_B_3 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[2];
            float _Split_90237729226dca849687b6c56fde4cbe_A_4 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[3];
            float _Property_007771e9e06cc78b9844d01f8129c541_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0 = float2(_Property_007771e9e06cc78b9844d01f8129c541_Out_0, _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0);
            float _Remap_690ea2a75496a283a66513f691c4f9db_Out_3;
            Unity_Remap_float(_Split_90237729226dca849687b6c56fde4cbe_A_4, float2 (0, 1), _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3);
            float4 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4;
            float3 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5;
            float2 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6;
            Unity_Combine_float(_Split_0d31d5c6a74be68484498325bbfacd3c_R_1, _Split_0d31d5c6a74be68484498325bbfacd3c_G_2, _Split_0d31d5c6a74be68484498325bbfacd3c_B_3, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6);
            float _Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_89bda93a711241049250cd3215f22c11_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0 = IN.uv0;
            float4 _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0 = SAMPLE_TEXTURE2D(_Property_89bda93a711241049250cd3215f22c11_Out_0.tex, _Property_89bda93a711241049250cd3215f22c11_Out_0.samplerstate, _Property_89bda93a711241049250cd3215f22c11_Out_0.GetTransformedUV((_UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0.xy)));
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_R_4 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.r;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_G_5 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.g;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_B_6 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.b;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_A_7 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.a;
            float _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0 = _CoverMaskPower;
            float _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_b8be215db546638398ea07060feb5224_A_7, _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0, _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2);
            float _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3;
            Unity_Clamp_float(_Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2, 0, 1, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3);
            float3 _Property_509761afcb3aad8f9a29405c122dbf08_Out_0 = _CoverDirection;
            UnityTexture2D _Property_72c615246e955087b85288c29905f048_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_72c615246e955087b85288c29905f048_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4);
            float _Property_7edd97bda70eb38a8c4253094700be37_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1.xyz), _Property_7edd97bda70eb38a8c4253094700be37_Out_0, _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2);
            UnityTexture2D _Property_6809577d1aa24984aa957e13d0574602_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_6809577d1aa24984aa957e13d0574602_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4);
            float _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1.xyz), _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0, _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_1276d06b2c028187bc5fb2018f7da110;
            float4 _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1);
            UnityTexture2D _Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4);
            float _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0, _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2);
            float3 _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, IN.WorldSpaceNormal, _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2);
            float _Split_e74c8f300b486e86a5700118b60b7885_R_1 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[0];
            float _Split_e74c8f300b486e86a5700118b60b7885_G_2 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[1];
            float _Split_e74c8f300b486e86a5700118b60b7885_B_3 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[2];
            float _Split_e74c8f300b486e86a5700118b60b7885_A_4 = 0;
            float _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2;
            Unity_Add_float(_Split_e74c8f300b486e86a5700118b60b7885_R_1, _Split_e74c8f300b486e86a5700118b60b7885_G_2, _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2);
            float _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2;
            Unity_Add_float(_Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2, _Split_e74c8f300b486e86a5700118b60b7885_B_3, _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2);
            float _Property_ca7cc2d889a56683904c7546a72cedbf_Out_0 = _Cover_Amount;
            float _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2;
            Unity_Subtract_float(4, _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2);
            float _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2;
            Unity_Divide_float(_Property_ca7cc2d889a56683904c7546a72cedbf_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2);
            float _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1;
            Unity_Absolute_float(_Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2, _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1);
            float _Power_681b2745dbae62839624b98240ca04f7_Out_2;
            Unity_Power_float(_Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Power_681b2745dbae62839624b98240ca04f7_Out_2);
            float _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3;
            Unity_Clamp_float(_Power_681b2745dbae62839624b98240ca04f7_Out_2, 0, 2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3);
            float _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2;
            Unity_Multiply_float_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2);
            float _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1;
            Unity_Saturate_float(_Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2, _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1);
            float _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3;
            Unity_Clamp_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, 0, 0.9999, _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3);
            float _Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0 = _Cover_Max_Angle;
            float _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2;
            Unity_Divide_float(_Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0, 45, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2);
            float _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1;
            Unity_OneMinus_float(_Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1);
            float _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2;
            Unity_Subtract_float(_Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1, _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2);
            float _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3;
            Unity_Clamp_float(_Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2, 0, 2, _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3);
            float _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2;
            Unity_Divide_float(1, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2);
            float _Multiply_749d76436ed5e58abec68ae130db866b_Out_2;
            Unity_Multiply_float_float(_Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2, _Multiply_749d76436ed5e58abec68ae130db866b_Out_2);
            float _Absolute_043a189b52847189ad0575955b41f403_Out_1;
            Unity_Absolute_float(_Multiply_749d76436ed5e58abec68ae130db866b_Out_2, _Absolute_043a189b52847189ad0575955b41f403_Out_1);
            float _Property_d4f4330ee4eced8d88fb074732401835_Out_0 = _CoverHardness;
            float _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2;
            Unity_Power_float(_Absolute_043a189b52847189ad0575955b41f403_Out_1, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2);
            float _Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0 = _Cover_Min_Height;
            float _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1;
            Unity_OneMinus_float(_Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0, _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1);
            float _Split_815418660959f184b10470e678ebae30_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_815418660959f184b10470e678ebae30_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_815418660959f184b10470e678ebae30_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_815418660959f184b10470e678ebae30_A_4 = 0;
            float _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2;
            Unity_Add_float(_OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1, _Split_815418660959f184b10470e678ebae30_G_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2);
            float _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, 1, _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2);
            float _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3;
            Unity_Clamp_float(_Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2, 0, 1, _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3);
            float _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0 = _Cover_Min_Height_Blending;
            float _Add_e57f70c02382b28397642f05af76cfb0_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0, _Add_e57f70c02382b28397642f05af76cfb0_Out_2);
            float _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2;
            Unity_Divide_float(_Add_e57f70c02382b28397642f05af76cfb0_Out_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2);
            float _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1;
            Unity_OneMinus_float(_Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2, _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1);
            float _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2;
            Unity_Add_float(_OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1, -0.5, _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2);
            float _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3;
            Unity_Clamp_float(_Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2, 0, 1, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3);
            float _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2;
            Unity_Add_float(_Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3, _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2);
            float _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3;
            Unity_Clamp_float(_Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2, 0, 1, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3);
            float _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2;
            Unity_Multiply_float_float(_Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2);
            float _Multiply_5336a32115eb29849650688fd99ee185_Out_2;
            Unity_Multiply_float_float(_Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_5336a32115eb29849650688fd99ee185_Out_2);
            float3 _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2, (_Multiply_5336a32115eb29849650688fd99ee185_Out_2.xxx), _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3);
            float3x3 Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1 = normalize(mul(Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent, _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3.xyz).xyz);
            float3 _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1, _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2);
            float _Split_b821124768adb688becbc5d63b26adb4_R_1 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[0];
            float _Split_b821124768adb688becbc5d63b26adb4_G_2 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[1];
            float _Split_b821124768adb688becbc5d63b26adb4_B_3 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[2];
            float _Split_b821124768adb688becbc5d63b26adb4_A_4 = 0;
            float _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2;
            Unity_Add_float(_Split_b821124768adb688becbc5d63b26adb4_R_1, _Split_b821124768adb688becbc5d63b26adb4_G_2, _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2);
            float _Add_508b788633abc0829f0843d1b1f942c2_Out_2;
            Unity_Add_float(_Add_fd43b427bfe3748cb0ced35df3b22159_Out_2, _Split_b821124768adb688becbc5d63b26adb4_B_3, _Add_508b788633abc0829f0843d1b1f942c2_Out_2);
            float _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2;
            Unity_Multiply_float_float(_Add_508b788633abc0829f0843d1b1f942c2_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2);
            float _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2;
            Unity_Multiply_float_float(_Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2);
            float _Multiply_b907f38702eabd80a6c67777243459de_Out_2;
            Unity_Multiply_float_float(_Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2);
            float _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2;
            Unity_Multiply_float_float(_Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2, _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2);
            UnityTexture2D _Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_9b6d5da081e434808a5840cbd915bb28;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4);
            float _Split_b20618c84cffd183aae7f27c2d0772cb_R_1 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[0];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_G_2 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[1];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_B_3 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[2];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_A_4 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[3];
            float _Property_987a8037965fff81a4930627358fc6e3_Out_0 = _CoverHeightMapMin;
            float _Property_89aeacdce0000086a98e45df79358a56_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_d18b9686bb8af48c85d99d319830c000_Out_0 = float2(_Property_987a8037965fff81a4930627358fc6e3_Out_0, _Property_89aeacdce0000086a98e45df79358a56_Out_0);
            float _Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0 = _CoverHeightMapOffset;
            float2 _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2;
            Unity_Add_float2(_Vector2_d18b9686bb8af48c85d99d319830c000_Out_0, (_Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0.xx), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2);
            float _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_B_3, float2 (0, 1), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3);
            float _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2;
            Unity_Multiply_float_float(_Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3, _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2);
            float _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2;
            Unity_Multiply_float_float(_Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2, _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2);
            float _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1;
            Unity_Saturate_float(_Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1);
            float _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2;
            Unity_Multiply_float_float(_Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2);
            float _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3;
            Unity_Branch_float(_Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3);
            float4 _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3;
            Unity_Lerp_float4(_HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxxx), _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3);
            float _Split_2d3577de3d626c8683c82ad2f5337a65_R_1 = IN.VertexColor[0];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_G_2 = IN.VertexColor[1];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_B_3 = IN.VertexColor[2];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_A_4 = IN.VertexColor[3];
            float _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_R_1, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1);
            float _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3;
            Unity_Lerp_float(0, _Split_866a663ed067f988862843fe32765ff8_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3);
            float _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2;
            Unity_Multiply_float_float(_Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3, _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0, _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2);
            float _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1;
            Unity_Absolute_float(_Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2, _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1);
            float _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2;
            Unity_Power_float(_Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1, _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0, _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2);
            float _Lerp_773fc936303dec838cfd7db23903de62_Out_3;
            Unity_Lerp_float(0, _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_773fc936303dec838cfd7db23903de62_Out_3);
            float _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2;
            Unity_Multiply_float_float(_Lerp_773fc936303dec838cfd7db23903de62_Out_3, _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0, _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2);
            float _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1;
            Unity_Absolute_float(_Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2, _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1);
            float _Property_013b523e19192f8593f2bcc154316b47_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_e5638390467fac89ae1f7b85fc93815b_Out_2;
            Unity_Power_float(_Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1, _Property_013b523e19192f8593f2bcc154316b47_Out_0, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2);
            float _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_B_3, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1);
            float _Lerp_594e5a2708dbe78894dc533303332962_Out_3;
            Unity_Lerp_float(_Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1, _Lerp_594e5a2708dbe78894dc533303332962_Out_3);
            float _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3;
            Unity_Lerp_float(0, _Split_b20618c84cffd183aae7f27c2d0772cb_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3);
            float _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_688d5e023afdea8f88054040203609ac_Out_2;
            Unity_Multiply_float_float(_Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3, _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0, _Multiply_688d5e023afdea8f88054040203609ac_Out_2);
            float _Absolute_b525073675d39a899115ebede3255a97_Out_1;
            Unity_Absolute_float(_Multiply_688d5e023afdea8f88054040203609ac_Out_2, _Absolute_b525073675d39a899115ebede3255a97_Out_1);
            float _Property_b14b960de7b30882a67b30cf91355226_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_fd909f27e3507185bcb862a17c2e116e_Out_2;
            Unity_Power_float(_Absolute_b525073675d39a899115ebede3255a97_Out_1, _Property_b14b960de7b30882a67b30cf91355226_Out_0, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2);
            float _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3;
            Unity_Lerp_float(_Lerp_594e5a2708dbe78894dc533303332962_Out_3, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3, _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3);
            float4 _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0, _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2);
            float4 _Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_0709d20641a7668b85ded82df467d4f4_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_0709d20641a7668b85ded82df467d4f4_Out_0, _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2);
            float3 _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3);
            float3 _Normalize_5840852513c50882be7896a398055011_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5840852513c50882be7896a398055011_Out_1);
            float _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2;
            Unity_DotProduct_float3(_Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3, _Normalize_5840852513c50882be7896a398055011_Out_1, _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2);
            float _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1;
            Unity_Saturate_float(_DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2, _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1);
            float _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1;
            Unity_OneMinus_float(_Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1, _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1);
            float _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1;
            Unity_Absolute_float(_OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1, _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1);
            float _Power_0f033f56feb0de89a9152324c9659e0a_Out_2;
            Unity_Power_float(_Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1, 10, _Power_0f033f56feb0de89a9152324c9659e0a_Out_2);
            float4 _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2;
            Unity_Multiply_float4_float4(_Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0, (_Power_0f033f56feb0de89a9152324c9659e0a_Out_2.xxxx), _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2);
            float _Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0 = _RimLightPower;
            float4 _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2;
            Unity_Multiply_float4_float4(_Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2, (_Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2);
            float4 _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2);
            float4 _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2;
            Unity_Add_float4(_Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2, _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2);
            float4 _Clamp_cb735681159425838b158a92c7e830b0_Out_3;
            Unity_Clamp_float4(_Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, float4(0, 0, 0, 0), _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, _Clamp_cb735681159425838b158a92c7e830b0_Out_3);
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_R_1 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[0];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_G_2 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[1];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_B_3 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[2];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[3];
            float _Property_57dab79b7e7fc28c99642ba557430a27_Out_0 = _BaseMetallic;
            float _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2;
            Unity_Multiply_float_float(_Split_866a663ed067f988862843fe32765ff8_R_1, _Property_57dab79b7e7fc28c99642ba557430a27_Out_0, _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2);
            float _Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0 = _BaseAORemapMin;
            float _Property_5a040fb62cd8888895d4f920c4036587_Out_0 = _BaseAORemapMax;
            float2 _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0 = float2(_Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0, _Property_5a040fb62cd8888895d4f920c4036587_Out_0);
            float _Remap_de2674403349aa85b1136d42692d26f9_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_G_2, float2 (0, 1), _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0, _Remap_de2674403349aa85b1136d42692d26f9_Out_3);
            float3 _Vector3_4c4100faab122d8da757a32364182844_Out_0 = float3(_Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2, _Remap_de2674403349aa85b1136d42692d26f9_Out_3, 0);
            float _Property_7cdf7bda907cf087942cd072e635a869_Out_0 = _Base2Metallic;
            float _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2;
            Unity_Multiply_float_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1, _Property_7cdf7bda907cf087942cd072e635a869_Out_0, _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2);
            float _Property_b334f6ce40e54186b9864b004fbe88d2_Out_0 = _Base2AORemapMin;
            float _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0 = _Base2AORemapMax;
            float2 _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0 = float2(_Property_b334f6ce40e54186b9864b004fbe88d2_Out_0, _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0);
            float _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2, float2 (0, 1), _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3);
            float3 _Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0 = float3(_Multiply_befa03f2838946858f28ac63a284b0f8_Out_2, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869;
            float4 _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_4c4100faab122d8da757a32364182844_Out_0, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1);
            float _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0 = _CoverMetallic;
            float _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2;
            Unity_Multiply_float_float(_Split_b20618c84cffd183aae7f27c2d0772cb_R_1, _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0, _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2);
            float _Property_e52744d22eaee787aba665b5a103092d_Out_0 = _CoverAORemapMin;
            float _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0 = _CoverAORemapMax;
            float2 _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0 = float2(_Property_e52744d22eaee787aba665b5a103092d_Out_0, _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0);
            float _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_G_2, float2 (0, 1), _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3);
            float3 _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0 = float3(_Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3, 0);
            float3 _Lerp_5d687668f4856180be26ec62834c6113_Out_3;
            Unity_Lerp_float3((_HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1.xyz), _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_5d687668f4856180be26ec62834c6113_Out_3);
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[0];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[1];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_B_3 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[2];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_A_4 = 0;
            surface.BaseColor = (_Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3.xyz);
            surface.Emission = (_Clamp_cb735681159425838b158a92c7e830b0_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4;
            surface.Occlusion = _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2;
            surface.NormalTS = _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            surface.Metallic = _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1;
            {
                surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
            }
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord1 =                  input.texCoord1;
            output.texCoord2 =                  input.texCoord2;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassGBuffer.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "Forward"
            Tags
            {
                "LightMode" = "Forward"
            }
        
            // Render State
            Cull [_CullModeForward]
        Blend [_SrcBlend] [_DstBlend], [_AlphaSrcBlend] [_AlphaDstBlend]
        ZTest [_ZTestDepthEqualForOpaque]
        ZWrite [_ZWrite]
        ColorMask [_ColorMaskTransparentVelOne] 1
        ColorMask [_ColorMaskTransparentVelTwo] 2
        Stencil
        {
        WriteMask [_StencilWriteMask]
        Ref [_StencilRef]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
        #pragma multi_compile_raytracing _ SHADOWS_SHADOWMASK
        #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
        #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
        #pragma multi_compile_fragment SHADOW_LOW SHADOW_MEDIUM SHADOW_HIGH SHADOW_VERY_HIGH
        #pragma multi_compile_fragment SCREEN_SPACE_SHADOWS_OFF SCREEN_SPACE_SHADOWS_ON
        #pragma multi_compile_fragment USE_FPTL_LIGHTLIST USE_CLUSTERED_LIGHTLIST
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_FORWARD
        #define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING 1
        #define HAS_LIGHTLOOP 1
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SHADER_LIT 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float4 _BaseTilingOffset;
        float _BaseTriplanarThreshold;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2TriplanarThreshold;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float3 _CoverDirection;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverTriplanarThreshold;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float _CoverEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float4 _RimColor;
        float _RimLightPower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Lava_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv1 : TEXCOORD1;
             float4 uv2 : TEXCOORD2;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
             float4 interp6 : INTERP6;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.texCoord1;
            output.interp5.xyzw =  input.texCoord2;
            output.interp6.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.texCoord1 = input.interp4.xyzw;
            output.texCoord2 = input.interp5.xyzw;
            output.color = input.interp6.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options renderinglayer procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float
        {
        };
        
        void SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(float3 Vector3_314C8600, Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float4 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2));
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float4 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2));
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float4 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float4 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float4(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float4 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float4(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float4 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float4(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        YZ_3 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0;
        XY_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        struct Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2);
        float3 _Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float3 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float3_float3(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2;
        Unity_Multiply_float_float(_Split_6299d4ddcc4c74828aea40a46fdb896e_B_3, -1, _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2);
        float2 _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0 = float2(_Multiply_de711f4a4614bd89a463b53374cf4036_Out_2, 1);
        float2 _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2));
        _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0);
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float2 _Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0 = float2(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4, _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5);
        float2 _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2;
        Unity_Multiply_float2_float2(_Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0, _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2);
        float2 _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_b227c84042055e8faa1a9fdc69529707_Out_2;
        Unity_Add_float2(_Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2, _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0, _Add_b227c84042055e8faa1a9fdc69529707_Out_2);
        float _Split_2cfb9eacd8762483941459cdf28bda97_R_1 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[0];
        float _Split_2cfb9eacd8762483941459cdf28bda97_G_2 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[1];
        float _Split_2cfb9eacd8762483941459cdf28bda97_B_3 = 0;
        float _Split_2cfb9eacd8762483941459cdf28bda97_A_4 = 0;
        float _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0 = float3(_Split_2cfb9eacd8762483941459cdf28bda97_R_1, _Split_2cfb9eacd8762483941459cdf28bda97_G_2, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float3_float3(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_R_1, 1);
        float2 _Multiply_862402885a49f18cb87278ab53bc6744_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_862402885a49f18cb87278ab53bc6744_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_862402885a49f18cb87278ab53bc6744_Out_2));
        _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0);
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float _Multiply_4649b768be76d784a3284bacde795359_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Multiply_4649b768be76d784a3284bacde795359_Out_2);
        float2 _Vector2_819fcd5eb484438eacad1987576d7d67_Out_0 = float2(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4, _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5);
        float2 _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2;
        Unity_Multiply_float2_float2(_Vector2_819fcd5eb484438eacad1987576d7d67_Out_0, _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2);
        float2 _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2;
        Unity_Add_float2(_Multiply_58530ebb3c6d798b93686a76247bf505_Out_2, _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0, _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2);
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[0];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[1];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_B_3 = 0;
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_A_4 = 0;
        float3 _Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0 = float3(_Multiply_4649b768be76d784a3284bacde795359_Out_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1);
        float3 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float3_float3(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float3 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float3(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float3 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float3(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float3 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float3(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        float3x3 Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1 = TransformWorldToTangent(_Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2.xyz, Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World);
        float3 _Normalize_15ef346824db0a8797631ed8b998e673_Out_1;
        Unity_Normalize_float3(_Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1, _Normalize_15ef346824db0a8797631ed8b998e673_Out_1);
        XYZ_1 = (float4(_Normalize_15ef346824db0a8797631ed8b998e673_Out_1, 1.0));
        XZ_2 = (float4(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, 1.0));
        YZ_3 = (float4(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, 1.0));
        XY_4 = (float4(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d;
            float3 _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1;
            SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(IN.ObjectSpacePosition, _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d, _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1);
            description.Position = _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
            float4 VTPackedFeedback;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_d92b1410e1d6bc81a86076b09e35f302_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_d4a357b2daff5587ae46468726a33797_Out_0 = _BaseTilingOffset;
            float4 _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_d4a357b2daff5587ae46468726a33797_Out_0, _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2);
            float _Property_b168be530d5b4082a2816fc835b55e19_Out_0 = _BaseTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_d92b1410e1d6bc81a86076b09e35f302_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4);
            float4 _Property_17f0f1bec4ec6485881127275660d4f1_Out_0 = _BaseColor;
            float4 _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _Property_17f0f1bec4ec6485881127275660d4f1_Out_0, _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2);
            float _Split_473d9bf097327483847264a7cc5c61f9_R_1 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[0];
            float _Split_473d9bf097327483847264a7cc5c61f9_G_2 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[1];
            float _Split_473d9bf097327483847264a7cc5c61f9_B_3 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[2];
            float _Split_473d9bf097327483847264a7cc5c61f9_A_4 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[3];
            float _Split_2ffd394bfe87c786b791f90b404c032d_R_1 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[0];
            float _Split_2ffd394bfe87c786b791f90b404c032d_G_2 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[1];
            float _Split_2ffd394bfe87c786b791f90b404c032d_B_3 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[2];
            float _Split_2ffd394bfe87c786b791f90b404c032d_A_4 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[3];
            float _Property_a1b1d767544de781a39d6415872f7285_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0 = float2(_Property_a1b1d767544de781a39d6415872f7285_Out_0, _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0);
            float _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3;
            Unity_Remap_float(_Split_2ffd394bfe87c786b791f90b404c032d_A_4, float2 (0, 1), _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3);
            float4 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4;
            float3 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5;
            float2 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6;
            Unity_Combine_float(_Split_473d9bf097327483847264a7cc5c61f9_R_1, _Split_473d9bf097327483847264a7cc5c61f9_G_2, _Split_473d9bf097327483847264a7cc5c61f9_B_3, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6);
            UnityTexture2D _Property_080b6cb46abb00848263c964726eac36_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_080b6cb46abb00848263c964726eac36_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4);
            float _Split_866a663ed067f988862843fe32765ff8_R_1 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[0];
            float _Split_866a663ed067f988862843fe32765ff8_G_2 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[1];
            float _Split_866a663ed067f988862843fe32765ff8_B_3 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[2];
            float _Split_866a663ed067f988862843fe32765ff8_A_4 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[3];
            float _Property_3b9891099f2f3e84b765eb453f6f6810_Out_0 = _HeightMin;
            float _Property_bde21360babd9089a90a45cd2843925b_Out_0 = _HeightMax;
            float2 _Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0 = float2(_Property_3b9891099f2f3e84b765eb453f6f6810_Out_0, _Property_bde21360babd9089a90a45cd2843925b_Out_0);
            float _Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0 = _HeightOffset;
            float2 _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2;
            Unity_Add_float2(_Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0, (_Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0.xx), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2);
            float _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_B_3, float2 (0, 1), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3);
            UnityTexture2D _Property_11586ef261ce8e87953046ff84ce22ab_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_221c724b2137d58c8c387fee5b48be14_Out_0 = _Base2TilingOffset;
            float4 _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_221c724b2137d58c8c387fee5b48be14_Out_0, _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2);
            float _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0 = _Base2TriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_ca3aaaec266f85859b75e37163da7cba;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_11586ef261ce8e87953046ff84ce22ab_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4);
            float4 _Property_60dff9cc4310ea89874789591a78d84b_Out_0 = _Base2Color;
            float4 _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _Property_60dff9cc4310ea89874789591a78d84b_Out_0, _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2);
            float _Split_96d66d11efd8418aa95cffd04b788c51_R_1 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[0];
            float _Split_96d66d11efd8418aa95cffd04b788c51_G_2 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[1];
            float _Split_96d66d11efd8418aa95cffd04b788c51_B_3 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[2];
            float _Split_96d66d11efd8418aa95cffd04b788c51_A_4 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[3];
            float _Split_837cde6fde77238baac188382335775d_R_1 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[0];
            float _Split_837cde6fde77238baac188382335775d_G_2 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[1];
            float _Split_837cde6fde77238baac188382335775d_B_3 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[2];
            float _Split_837cde6fde77238baac188382335775d_A_4 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[3];
            float _Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0 = float2(_Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0, _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0);
            float _Remap_697b96439d3a0983800a051b2b4edd90_Out_3;
            Unity_Remap_float(_Split_837cde6fde77238baac188382335775d_A_4, float2 (0, 1), _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3);
            float4 _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4;
            float3 _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5;
            float2 _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6;
            Unity_Combine_float(_Split_96d66d11efd8418aa95cffd04b788c51_R_1, _Split_96d66d11efd8418aa95cffd04b788c51_G_2, _Split_96d66d11efd8418aa95cffd04b788c51_B_3, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5, _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6);
            float _Property_312b653a29ccc087849b1493611fb73c_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.tex, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.samplerstate, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.r;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_G_5 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.g;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_B_6 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.b;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_A_7 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.a;
            float _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1);
            float _Branch_6b7615e16629338ba87d3570a0096f66_Out_3;
            Unity_Branch_float(_Property_312b653a29ccc087849b1493611fb73c_Out_0, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1, _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _Branch_6b7615e16629338ba87d3570a0096f66_Out_3);
            UnityTexture2D _Property_b4749c77856157858fffde0aed55fc74_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_b4749c77856157858fffde0aed55fc74_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4);
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[0];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[1];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[2];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[3];
            float _Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0 = _HeightMin2;
            float _Property_145222f375008a879315637be0f172c5_Out_0 = _HeightMax2;
            float2 _Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0 = float2(_Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0, _Property_145222f375008a879315637be0f172c5_Out_0);
            float _Property_8be924d801daee88b294af592a560e75_Out_0 = _HeightOffset2;
            float2 _Add_37703f1eb9ce078daaedca833705f5dd_Out_2;
            Unity_Add_float2(_Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0, (_Property_8be924d801daee88b294af592a560e75_Out_0.xx), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2);
            float _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3, float2 (0, 1), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3);
            float _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2;
            Unity_Multiply_float_float(_Branch_6b7615e16629338ba87d3570a0096f66_Out_3, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3, _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2);
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_R_1 = IN.VertexColor[0];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2 = IN.VertexColor[1];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3 = IN.VertexColor[2];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_A_4 = IN.VertexColor[3];
            float _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2;
            Unity_Multiply_float_float(_Multiply_d9f42ca072d9188ab2566400157a199f_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2);
            float _Property_c0dc9341fd635288a1c2869945617704_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5;
            float4 _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1);
            UnityTexture2D _Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_9bedb34aba10fa89a5f5b18919971491_Out_0 = _CoverTilingOffset;
            float4 _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_9bedb34aba10fa89a5f5b18919971491_Out_0, _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2);
            float _Property_bf361924f27f848994241bda91fc2005_Out_0 = _CoverTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4);
            float4 _Property_19547f2fe562798683b730e775cbfb39_Out_0 = _CoverBaseColor;
            float4 _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _Property_19547f2fe562798683b730e775cbfb39_Out_0, _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2);
            float _Split_0d31d5c6a74be68484498325bbfacd3c_R_1 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[0];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_G_2 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[1];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_B_3 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[2];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_A_4 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[3];
            float _Split_90237729226dca849687b6c56fde4cbe_R_1 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[0];
            float _Split_90237729226dca849687b6c56fde4cbe_G_2 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[1];
            float _Split_90237729226dca849687b6c56fde4cbe_B_3 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[2];
            float _Split_90237729226dca849687b6c56fde4cbe_A_4 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[3];
            float _Property_007771e9e06cc78b9844d01f8129c541_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0 = float2(_Property_007771e9e06cc78b9844d01f8129c541_Out_0, _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0);
            float _Remap_690ea2a75496a283a66513f691c4f9db_Out_3;
            Unity_Remap_float(_Split_90237729226dca849687b6c56fde4cbe_A_4, float2 (0, 1), _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3);
            float4 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4;
            float3 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5;
            float2 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6;
            Unity_Combine_float(_Split_0d31d5c6a74be68484498325bbfacd3c_R_1, _Split_0d31d5c6a74be68484498325bbfacd3c_G_2, _Split_0d31d5c6a74be68484498325bbfacd3c_B_3, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6);
            float _Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_89bda93a711241049250cd3215f22c11_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0 = IN.uv0;
            float4 _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0 = SAMPLE_TEXTURE2D(_Property_89bda93a711241049250cd3215f22c11_Out_0.tex, _Property_89bda93a711241049250cd3215f22c11_Out_0.samplerstate, _Property_89bda93a711241049250cd3215f22c11_Out_0.GetTransformedUV((_UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0.xy)));
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_R_4 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.r;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_G_5 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.g;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_B_6 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.b;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_A_7 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.a;
            float _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0 = _CoverMaskPower;
            float _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_b8be215db546638398ea07060feb5224_A_7, _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0, _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2);
            float _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3;
            Unity_Clamp_float(_Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2, 0, 1, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3);
            float3 _Property_509761afcb3aad8f9a29405c122dbf08_Out_0 = _CoverDirection;
            UnityTexture2D _Property_72c615246e955087b85288c29905f048_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_72c615246e955087b85288c29905f048_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4);
            float _Property_7edd97bda70eb38a8c4253094700be37_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1.xyz), _Property_7edd97bda70eb38a8c4253094700be37_Out_0, _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2);
            UnityTexture2D _Property_6809577d1aa24984aa957e13d0574602_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_6809577d1aa24984aa957e13d0574602_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4);
            float _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1.xyz), _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0, _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_1276d06b2c028187bc5fb2018f7da110;
            float4 _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1);
            UnityTexture2D _Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4);
            float _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0, _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2);
            float3 _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, IN.WorldSpaceNormal, _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2);
            float _Split_e74c8f300b486e86a5700118b60b7885_R_1 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[0];
            float _Split_e74c8f300b486e86a5700118b60b7885_G_2 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[1];
            float _Split_e74c8f300b486e86a5700118b60b7885_B_3 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[2];
            float _Split_e74c8f300b486e86a5700118b60b7885_A_4 = 0;
            float _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2;
            Unity_Add_float(_Split_e74c8f300b486e86a5700118b60b7885_R_1, _Split_e74c8f300b486e86a5700118b60b7885_G_2, _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2);
            float _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2;
            Unity_Add_float(_Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2, _Split_e74c8f300b486e86a5700118b60b7885_B_3, _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2);
            float _Property_ca7cc2d889a56683904c7546a72cedbf_Out_0 = _Cover_Amount;
            float _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2;
            Unity_Subtract_float(4, _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2);
            float _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2;
            Unity_Divide_float(_Property_ca7cc2d889a56683904c7546a72cedbf_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2);
            float _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1;
            Unity_Absolute_float(_Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2, _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1);
            float _Power_681b2745dbae62839624b98240ca04f7_Out_2;
            Unity_Power_float(_Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Power_681b2745dbae62839624b98240ca04f7_Out_2);
            float _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3;
            Unity_Clamp_float(_Power_681b2745dbae62839624b98240ca04f7_Out_2, 0, 2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3);
            float _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2;
            Unity_Multiply_float_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2);
            float _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1;
            Unity_Saturate_float(_Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2, _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1);
            float _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3;
            Unity_Clamp_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, 0, 0.9999, _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3);
            float _Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0 = _Cover_Max_Angle;
            float _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2;
            Unity_Divide_float(_Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0, 45, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2);
            float _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1;
            Unity_OneMinus_float(_Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1);
            float _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2;
            Unity_Subtract_float(_Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1, _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2);
            float _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3;
            Unity_Clamp_float(_Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2, 0, 2, _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3);
            float _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2;
            Unity_Divide_float(1, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2);
            float _Multiply_749d76436ed5e58abec68ae130db866b_Out_2;
            Unity_Multiply_float_float(_Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2, _Multiply_749d76436ed5e58abec68ae130db866b_Out_2);
            float _Absolute_043a189b52847189ad0575955b41f403_Out_1;
            Unity_Absolute_float(_Multiply_749d76436ed5e58abec68ae130db866b_Out_2, _Absolute_043a189b52847189ad0575955b41f403_Out_1);
            float _Property_d4f4330ee4eced8d88fb074732401835_Out_0 = _CoverHardness;
            float _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2;
            Unity_Power_float(_Absolute_043a189b52847189ad0575955b41f403_Out_1, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2);
            float _Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0 = _Cover_Min_Height;
            float _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1;
            Unity_OneMinus_float(_Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0, _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1);
            float _Split_815418660959f184b10470e678ebae30_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_815418660959f184b10470e678ebae30_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_815418660959f184b10470e678ebae30_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_815418660959f184b10470e678ebae30_A_4 = 0;
            float _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2;
            Unity_Add_float(_OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1, _Split_815418660959f184b10470e678ebae30_G_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2);
            float _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, 1, _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2);
            float _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3;
            Unity_Clamp_float(_Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2, 0, 1, _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3);
            float _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0 = _Cover_Min_Height_Blending;
            float _Add_e57f70c02382b28397642f05af76cfb0_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0, _Add_e57f70c02382b28397642f05af76cfb0_Out_2);
            float _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2;
            Unity_Divide_float(_Add_e57f70c02382b28397642f05af76cfb0_Out_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2);
            float _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1;
            Unity_OneMinus_float(_Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2, _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1);
            float _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2;
            Unity_Add_float(_OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1, -0.5, _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2);
            float _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3;
            Unity_Clamp_float(_Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2, 0, 1, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3);
            float _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2;
            Unity_Add_float(_Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3, _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2);
            float _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3;
            Unity_Clamp_float(_Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2, 0, 1, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3);
            float _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2;
            Unity_Multiply_float_float(_Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2);
            float _Multiply_5336a32115eb29849650688fd99ee185_Out_2;
            Unity_Multiply_float_float(_Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_5336a32115eb29849650688fd99ee185_Out_2);
            float3 _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2, (_Multiply_5336a32115eb29849650688fd99ee185_Out_2.xxx), _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3);
            float3x3 Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1 = normalize(mul(Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent, _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3.xyz).xyz);
            float3 _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1, _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2);
            float _Split_b821124768adb688becbc5d63b26adb4_R_1 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[0];
            float _Split_b821124768adb688becbc5d63b26adb4_G_2 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[1];
            float _Split_b821124768adb688becbc5d63b26adb4_B_3 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[2];
            float _Split_b821124768adb688becbc5d63b26adb4_A_4 = 0;
            float _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2;
            Unity_Add_float(_Split_b821124768adb688becbc5d63b26adb4_R_1, _Split_b821124768adb688becbc5d63b26adb4_G_2, _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2);
            float _Add_508b788633abc0829f0843d1b1f942c2_Out_2;
            Unity_Add_float(_Add_fd43b427bfe3748cb0ced35df3b22159_Out_2, _Split_b821124768adb688becbc5d63b26adb4_B_3, _Add_508b788633abc0829f0843d1b1f942c2_Out_2);
            float _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2;
            Unity_Multiply_float_float(_Add_508b788633abc0829f0843d1b1f942c2_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2);
            float _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2;
            Unity_Multiply_float_float(_Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2);
            float _Multiply_b907f38702eabd80a6c67777243459de_Out_2;
            Unity_Multiply_float_float(_Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2);
            float _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2;
            Unity_Multiply_float_float(_Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2, _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2);
            UnityTexture2D _Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_9b6d5da081e434808a5840cbd915bb28;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4);
            float _Split_b20618c84cffd183aae7f27c2d0772cb_R_1 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[0];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_G_2 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[1];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_B_3 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[2];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_A_4 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[3];
            float _Property_987a8037965fff81a4930627358fc6e3_Out_0 = _CoverHeightMapMin;
            float _Property_89aeacdce0000086a98e45df79358a56_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_d18b9686bb8af48c85d99d319830c000_Out_0 = float2(_Property_987a8037965fff81a4930627358fc6e3_Out_0, _Property_89aeacdce0000086a98e45df79358a56_Out_0);
            float _Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0 = _CoverHeightMapOffset;
            float2 _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2;
            Unity_Add_float2(_Vector2_d18b9686bb8af48c85d99d319830c000_Out_0, (_Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0.xx), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2);
            float _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_B_3, float2 (0, 1), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3);
            float _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2;
            Unity_Multiply_float_float(_Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3, _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2);
            float _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2;
            Unity_Multiply_float_float(_Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2, _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2);
            float _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1;
            Unity_Saturate_float(_Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1);
            float _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2;
            Unity_Multiply_float_float(_Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2);
            float _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3;
            Unity_Branch_float(_Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3);
            float4 _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3;
            Unity_Lerp_float4(_HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxxx), _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3);
            float _Split_2d3577de3d626c8683c82ad2f5337a65_R_1 = IN.VertexColor[0];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_G_2 = IN.VertexColor[1];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_B_3 = IN.VertexColor[2];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_A_4 = IN.VertexColor[3];
            float _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_R_1, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1);
            float _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3;
            Unity_Lerp_float(0, _Split_866a663ed067f988862843fe32765ff8_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3);
            float _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2;
            Unity_Multiply_float_float(_Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3, _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0, _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2);
            float _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1;
            Unity_Absolute_float(_Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2, _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1);
            float _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2;
            Unity_Power_float(_Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1, _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0, _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2);
            float _Lerp_773fc936303dec838cfd7db23903de62_Out_3;
            Unity_Lerp_float(0, _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_773fc936303dec838cfd7db23903de62_Out_3);
            float _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2;
            Unity_Multiply_float_float(_Lerp_773fc936303dec838cfd7db23903de62_Out_3, _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0, _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2);
            float _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1;
            Unity_Absolute_float(_Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2, _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1);
            float _Property_013b523e19192f8593f2bcc154316b47_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_e5638390467fac89ae1f7b85fc93815b_Out_2;
            Unity_Power_float(_Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1, _Property_013b523e19192f8593f2bcc154316b47_Out_0, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2);
            float _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_B_3, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1);
            float _Lerp_594e5a2708dbe78894dc533303332962_Out_3;
            Unity_Lerp_float(_Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1, _Lerp_594e5a2708dbe78894dc533303332962_Out_3);
            float _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3;
            Unity_Lerp_float(0, _Split_b20618c84cffd183aae7f27c2d0772cb_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3);
            float _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_688d5e023afdea8f88054040203609ac_Out_2;
            Unity_Multiply_float_float(_Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3, _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0, _Multiply_688d5e023afdea8f88054040203609ac_Out_2);
            float _Absolute_b525073675d39a899115ebede3255a97_Out_1;
            Unity_Absolute_float(_Multiply_688d5e023afdea8f88054040203609ac_Out_2, _Absolute_b525073675d39a899115ebede3255a97_Out_1);
            float _Property_b14b960de7b30882a67b30cf91355226_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_fd909f27e3507185bcb862a17c2e116e_Out_2;
            Unity_Power_float(_Absolute_b525073675d39a899115ebede3255a97_Out_1, _Property_b14b960de7b30882a67b30cf91355226_Out_0, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2);
            float _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3;
            Unity_Lerp_float(_Lerp_594e5a2708dbe78894dc533303332962_Out_3, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3, _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3);
            float4 _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0, _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2);
            float4 _Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_0709d20641a7668b85ded82df467d4f4_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_0709d20641a7668b85ded82df467d4f4_Out_0, _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2);
            float3 _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3);
            float3 _Normalize_5840852513c50882be7896a398055011_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5840852513c50882be7896a398055011_Out_1);
            float _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2;
            Unity_DotProduct_float3(_Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3, _Normalize_5840852513c50882be7896a398055011_Out_1, _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2);
            float _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1;
            Unity_Saturate_float(_DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2, _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1);
            float _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1;
            Unity_OneMinus_float(_Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1, _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1);
            float _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1;
            Unity_Absolute_float(_OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1, _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1);
            float _Power_0f033f56feb0de89a9152324c9659e0a_Out_2;
            Unity_Power_float(_Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1, 10, _Power_0f033f56feb0de89a9152324c9659e0a_Out_2);
            float4 _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2;
            Unity_Multiply_float4_float4(_Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0, (_Power_0f033f56feb0de89a9152324c9659e0a_Out_2.xxxx), _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2);
            float _Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0 = _RimLightPower;
            float4 _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2;
            Unity_Multiply_float4_float4(_Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2, (_Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2);
            float4 _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2);
            float4 _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2;
            Unity_Add_float4(_Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2, _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2);
            float4 _Clamp_cb735681159425838b158a92c7e830b0_Out_3;
            Unity_Clamp_float4(_Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, float4(0, 0, 0, 0), _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, _Clamp_cb735681159425838b158a92c7e830b0_Out_3);
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_R_1 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[0];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_G_2 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[1];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_B_3 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[2];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[3];
            float _Property_57dab79b7e7fc28c99642ba557430a27_Out_0 = _BaseMetallic;
            float _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2;
            Unity_Multiply_float_float(_Split_866a663ed067f988862843fe32765ff8_R_1, _Property_57dab79b7e7fc28c99642ba557430a27_Out_0, _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2);
            float _Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0 = _BaseAORemapMin;
            float _Property_5a040fb62cd8888895d4f920c4036587_Out_0 = _BaseAORemapMax;
            float2 _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0 = float2(_Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0, _Property_5a040fb62cd8888895d4f920c4036587_Out_0);
            float _Remap_de2674403349aa85b1136d42692d26f9_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_G_2, float2 (0, 1), _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0, _Remap_de2674403349aa85b1136d42692d26f9_Out_3);
            float3 _Vector3_4c4100faab122d8da757a32364182844_Out_0 = float3(_Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2, _Remap_de2674403349aa85b1136d42692d26f9_Out_3, 0);
            float _Property_7cdf7bda907cf087942cd072e635a869_Out_0 = _Base2Metallic;
            float _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2;
            Unity_Multiply_float_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1, _Property_7cdf7bda907cf087942cd072e635a869_Out_0, _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2);
            float _Property_b334f6ce40e54186b9864b004fbe88d2_Out_0 = _Base2AORemapMin;
            float _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0 = _Base2AORemapMax;
            float2 _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0 = float2(_Property_b334f6ce40e54186b9864b004fbe88d2_Out_0, _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0);
            float _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2, float2 (0, 1), _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3);
            float3 _Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0 = float3(_Multiply_befa03f2838946858f28ac63a284b0f8_Out_2, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869;
            float4 _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_4c4100faab122d8da757a32364182844_Out_0, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1);
            float _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0 = _CoverMetallic;
            float _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2;
            Unity_Multiply_float_float(_Split_b20618c84cffd183aae7f27c2d0772cb_R_1, _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0, _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2);
            float _Property_e52744d22eaee787aba665b5a103092d_Out_0 = _CoverAORemapMin;
            float _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0 = _CoverAORemapMax;
            float2 _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0 = float2(_Property_e52744d22eaee787aba665b5a103092d_Out_0, _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0);
            float _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_G_2, float2 (0, 1), _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3);
            float3 _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0 = float3(_Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3, 0);
            float3 _Lerp_5d687668f4856180be26ec62834c6113_Out_3;
            Unity_Lerp_float3((_HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1.xyz), _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_5d687668f4856180be26ec62834c6113_Out_3);
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[0];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[1];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_B_3 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[2];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_A_4 = 0;
            surface.BaseColor = (_Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3.xyz);
            surface.Emission = (_Clamp_cb735681159425838b158a92c7e830b0_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4;
            surface.Occlusion = _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2;
            surface.NormalTS = _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            surface.Metallic = _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1;
            {
                surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
            }
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord1 =                  input.texCoord1;
            output.texCoord2 =                  input.texCoord2;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassForward.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "RayTracingPrepass"
            Tags
            {
                "LightMode" = "RayTracingPrepass"
            }
        
            // Render State
            Cull [_CullMode]
        Blend One Zero
        ZWrite On
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_CONSTANT
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float4 _BaseTilingOffset;
        float _BaseTriplanarThreshold;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2TriplanarThreshold;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float3 _CoverDirection;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverTriplanarThreshold;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float _CoverEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float4 _RimColor;
        float _RimLightPower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Lava_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options renderinglayer procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float
        {
        };
        
        void SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(float3 Vector3_314C8600, Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float4 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2));
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float4 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2));
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float4 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float4 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float4(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float4 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float4(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float4 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float4(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        YZ_3 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0;
        XY_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        struct Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2);
        float3 _Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float3 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float3_float3(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2;
        Unity_Multiply_float_float(_Split_6299d4ddcc4c74828aea40a46fdb896e_B_3, -1, _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2);
        float2 _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0 = float2(_Multiply_de711f4a4614bd89a463b53374cf4036_Out_2, 1);
        float2 _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2));
        _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0);
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float2 _Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0 = float2(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4, _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5);
        float2 _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2;
        Unity_Multiply_float2_float2(_Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0, _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2);
        float2 _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_b227c84042055e8faa1a9fdc69529707_Out_2;
        Unity_Add_float2(_Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2, _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0, _Add_b227c84042055e8faa1a9fdc69529707_Out_2);
        float _Split_2cfb9eacd8762483941459cdf28bda97_R_1 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[0];
        float _Split_2cfb9eacd8762483941459cdf28bda97_G_2 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[1];
        float _Split_2cfb9eacd8762483941459cdf28bda97_B_3 = 0;
        float _Split_2cfb9eacd8762483941459cdf28bda97_A_4 = 0;
        float _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0 = float3(_Split_2cfb9eacd8762483941459cdf28bda97_R_1, _Split_2cfb9eacd8762483941459cdf28bda97_G_2, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float3_float3(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_R_1, 1);
        float2 _Multiply_862402885a49f18cb87278ab53bc6744_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_862402885a49f18cb87278ab53bc6744_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_862402885a49f18cb87278ab53bc6744_Out_2));
        _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0);
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float _Multiply_4649b768be76d784a3284bacde795359_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Multiply_4649b768be76d784a3284bacde795359_Out_2);
        float2 _Vector2_819fcd5eb484438eacad1987576d7d67_Out_0 = float2(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4, _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5);
        float2 _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2;
        Unity_Multiply_float2_float2(_Vector2_819fcd5eb484438eacad1987576d7d67_Out_0, _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2);
        float2 _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2;
        Unity_Add_float2(_Multiply_58530ebb3c6d798b93686a76247bf505_Out_2, _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0, _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2);
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[0];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[1];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_B_3 = 0;
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_A_4 = 0;
        float3 _Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0 = float3(_Multiply_4649b768be76d784a3284bacde795359_Out_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1);
        float3 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float3_float3(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float3 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float3(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float3 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float3(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float3 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float3(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        float3x3 Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1 = TransformWorldToTangent(_Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2.xyz, Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World);
        float3 _Normalize_15ef346824db0a8797631ed8b998e673_Out_1;
        Unity_Normalize_float3(_Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1, _Normalize_15ef346824db0a8797631ed8b998e673_Out_1);
        XYZ_1 = (float4(_Normalize_15ef346824db0a8797631ed8b998e673_Out_1, 1.0));
        XZ_2 = (float4(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, 1.0));
        YZ_3 = (float4(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, 1.0));
        XY_4 = (float4(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d;
            float3 _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1;
            SG_NMLavaVSProIndirect_25f0d25648f9d4f45a0add4ada64b857_float(IN.ObjectSpacePosition, _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d, _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1);
            description.Position = _NMLavaVSProIndirect_c20e17878d596a8b956945b87a712d2d_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_d92b1410e1d6bc81a86076b09e35f302_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_d4a357b2daff5587ae46468726a33797_Out_0 = _BaseTilingOffset;
            float4 _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_d4a357b2daff5587ae46468726a33797_Out_0, _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2);
            float _Property_b168be530d5b4082a2816fc835b55e19_Out_0 = _BaseTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_d92b1410e1d6bc81a86076b09e35f302_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4);
            float4 _Property_17f0f1bec4ec6485881127275660d4f1_Out_0 = _BaseColor;
            float4 _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _Property_17f0f1bec4ec6485881127275660d4f1_Out_0, _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2);
            float _Split_473d9bf097327483847264a7cc5c61f9_R_1 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[0];
            float _Split_473d9bf097327483847264a7cc5c61f9_G_2 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[1];
            float _Split_473d9bf097327483847264a7cc5c61f9_B_3 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[2];
            float _Split_473d9bf097327483847264a7cc5c61f9_A_4 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[3];
            float _Split_2ffd394bfe87c786b791f90b404c032d_R_1 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[0];
            float _Split_2ffd394bfe87c786b791f90b404c032d_G_2 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[1];
            float _Split_2ffd394bfe87c786b791f90b404c032d_B_3 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[2];
            float _Split_2ffd394bfe87c786b791f90b404c032d_A_4 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[3];
            float _Property_a1b1d767544de781a39d6415872f7285_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0 = float2(_Property_a1b1d767544de781a39d6415872f7285_Out_0, _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0);
            float _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3;
            Unity_Remap_float(_Split_2ffd394bfe87c786b791f90b404c032d_A_4, float2 (0, 1), _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3);
            float4 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4;
            float3 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5;
            float2 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6;
            Unity_Combine_float(_Split_473d9bf097327483847264a7cc5c61f9_R_1, _Split_473d9bf097327483847264a7cc5c61f9_G_2, _Split_473d9bf097327483847264a7cc5c61f9_B_3, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6);
            UnityTexture2D _Property_080b6cb46abb00848263c964726eac36_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_080b6cb46abb00848263c964726eac36_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4);
            float _Split_866a663ed067f988862843fe32765ff8_R_1 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[0];
            float _Split_866a663ed067f988862843fe32765ff8_G_2 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[1];
            float _Split_866a663ed067f988862843fe32765ff8_B_3 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[2];
            float _Split_866a663ed067f988862843fe32765ff8_A_4 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[3];
            float _Property_3b9891099f2f3e84b765eb453f6f6810_Out_0 = _HeightMin;
            float _Property_bde21360babd9089a90a45cd2843925b_Out_0 = _HeightMax;
            float2 _Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0 = float2(_Property_3b9891099f2f3e84b765eb453f6f6810_Out_0, _Property_bde21360babd9089a90a45cd2843925b_Out_0);
            float _Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0 = _HeightOffset;
            float2 _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2;
            Unity_Add_float2(_Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0, (_Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0.xx), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2);
            float _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_B_3, float2 (0, 1), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3);
            UnityTexture2D _Property_11586ef261ce8e87953046ff84ce22ab_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_221c724b2137d58c8c387fee5b48be14_Out_0 = _Base2TilingOffset;
            float4 _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_221c724b2137d58c8c387fee5b48be14_Out_0, _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2);
            float _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0 = _Base2TriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_ca3aaaec266f85859b75e37163da7cba;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_11586ef261ce8e87953046ff84ce22ab_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4);
            float4 _Property_60dff9cc4310ea89874789591a78d84b_Out_0 = _Base2Color;
            float4 _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _Property_60dff9cc4310ea89874789591a78d84b_Out_0, _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2);
            float _Split_96d66d11efd8418aa95cffd04b788c51_R_1 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[0];
            float _Split_96d66d11efd8418aa95cffd04b788c51_G_2 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[1];
            float _Split_96d66d11efd8418aa95cffd04b788c51_B_3 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[2];
            float _Split_96d66d11efd8418aa95cffd04b788c51_A_4 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[3];
            float _Split_837cde6fde77238baac188382335775d_R_1 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[0];
            float _Split_837cde6fde77238baac188382335775d_G_2 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[1];
            float _Split_837cde6fde77238baac188382335775d_B_3 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[2];
            float _Split_837cde6fde77238baac188382335775d_A_4 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[3];
            float _Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0 = float2(_Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0, _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0);
            float _Remap_697b96439d3a0983800a051b2b4edd90_Out_3;
            Unity_Remap_float(_Split_837cde6fde77238baac188382335775d_A_4, float2 (0, 1), _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3);
            float4 _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4;
            float3 _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5;
            float2 _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6;
            Unity_Combine_float(_Split_96d66d11efd8418aa95cffd04b788c51_R_1, _Split_96d66d11efd8418aa95cffd04b788c51_G_2, _Split_96d66d11efd8418aa95cffd04b788c51_B_3, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5, _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6);
            float _Property_312b653a29ccc087849b1493611fb73c_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.tex, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.samplerstate, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.r;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_G_5 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.g;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_B_6 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.b;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_A_7 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.a;
            float _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1);
            float _Branch_6b7615e16629338ba87d3570a0096f66_Out_3;
            Unity_Branch_float(_Property_312b653a29ccc087849b1493611fb73c_Out_0, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1, _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _Branch_6b7615e16629338ba87d3570a0096f66_Out_3);
            UnityTexture2D _Property_b4749c77856157858fffde0aed55fc74_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_b4749c77856157858fffde0aed55fc74_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4);
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[0];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[1];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[2];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[3];
            float _Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0 = _HeightMin2;
            float _Property_145222f375008a879315637be0f172c5_Out_0 = _HeightMax2;
            float2 _Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0 = float2(_Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0, _Property_145222f375008a879315637be0f172c5_Out_0);
            float _Property_8be924d801daee88b294af592a560e75_Out_0 = _HeightOffset2;
            float2 _Add_37703f1eb9ce078daaedca833705f5dd_Out_2;
            Unity_Add_float2(_Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0, (_Property_8be924d801daee88b294af592a560e75_Out_0.xx), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2);
            float _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3, float2 (0, 1), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3);
            float _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2;
            Unity_Multiply_float_float(_Branch_6b7615e16629338ba87d3570a0096f66_Out_3, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3, _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2);
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_R_1 = IN.VertexColor[0];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2 = IN.VertexColor[1];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3 = IN.VertexColor[2];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_A_4 = IN.VertexColor[3];
            float _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2;
            Unity_Multiply_float_float(_Multiply_d9f42ca072d9188ab2566400157a199f_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2);
            float _Property_c0dc9341fd635288a1c2869945617704_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5;
            float4 _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1);
            UnityTexture2D _Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_9bedb34aba10fa89a5f5b18919971491_Out_0 = _CoverTilingOffset;
            float4 _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_9bedb34aba10fa89a5f5b18919971491_Out_0, _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2);
            float _Property_bf361924f27f848994241bda91fc2005_Out_0 = _CoverTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4);
            float4 _Property_19547f2fe562798683b730e775cbfb39_Out_0 = _CoverBaseColor;
            float4 _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _Property_19547f2fe562798683b730e775cbfb39_Out_0, _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2);
            float _Split_0d31d5c6a74be68484498325bbfacd3c_R_1 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[0];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_G_2 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[1];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_B_3 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[2];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_A_4 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[3];
            float _Split_90237729226dca849687b6c56fde4cbe_R_1 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[0];
            float _Split_90237729226dca849687b6c56fde4cbe_G_2 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[1];
            float _Split_90237729226dca849687b6c56fde4cbe_B_3 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[2];
            float _Split_90237729226dca849687b6c56fde4cbe_A_4 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[3];
            float _Property_007771e9e06cc78b9844d01f8129c541_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0 = float2(_Property_007771e9e06cc78b9844d01f8129c541_Out_0, _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0);
            float _Remap_690ea2a75496a283a66513f691c4f9db_Out_3;
            Unity_Remap_float(_Split_90237729226dca849687b6c56fde4cbe_A_4, float2 (0, 1), _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3);
            float4 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4;
            float3 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5;
            float2 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6;
            Unity_Combine_float(_Split_0d31d5c6a74be68484498325bbfacd3c_R_1, _Split_0d31d5c6a74be68484498325bbfacd3c_G_2, _Split_0d31d5c6a74be68484498325bbfacd3c_B_3, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6);
            float _Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_89bda93a711241049250cd3215f22c11_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0 = IN.uv0;
            float4 _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0 = SAMPLE_TEXTURE2D(_Property_89bda93a711241049250cd3215f22c11_Out_0.tex, _Property_89bda93a711241049250cd3215f22c11_Out_0.samplerstate, _Property_89bda93a711241049250cd3215f22c11_Out_0.GetTransformedUV((_UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0.xy)));
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_R_4 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.r;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_G_5 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.g;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_B_6 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.b;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_A_7 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.a;
            float _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0 = _CoverMaskPower;
            float _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_b8be215db546638398ea07060feb5224_A_7, _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0, _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2);
            float _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3;
            Unity_Clamp_float(_Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2, 0, 1, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3);
            float3 _Property_509761afcb3aad8f9a29405c122dbf08_Out_0 = _CoverDirection;
            UnityTexture2D _Property_72c615246e955087b85288c29905f048_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_72c615246e955087b85288c29905f048_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4);
            float _Property_7edd97bda70eb38a8c4253094700be37_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1.xyz), _Property_7edd97bda70eb38a8c4253094700be37_Out_0, _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2);
            UnityTexture2D _Property_6809577d1aa24984aa957e13d0574602_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_6809577d1aa24984aa957e13d0574602_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4);
            float _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1.xyz), _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0, _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_1276d06b2c028187bc5fb2018f7da110;
            float4 _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1);
            UnityTexture2D _Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4);
            float _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0, _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2);
            float3 _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, IN.WorldSpaceNormal, _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2);
            float _Split_e74c8f300b486e86a5700118b60b7885_R_1 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[0];
            float _Split_e74c8f300b486e86a5700118b60b7885_G_2 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[1];
            float _Split_e74c8f300b486e86a5700118b60b7885_B_3 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[2];
            float _Split_e74c8f300b486e86a5700118b60b7885_A_4 = 0;
            float _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2;
            Unity_Add_float(_Split_e74c8f300b486e86a5700118b60b7885_R_1, _Split_e74c8f300b486e86a5700118b60b7885_G_2, _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2);
            float _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2;
            Unity_Add_float(_Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2, _Split_e74c8f300b486e86a5700118b60b7885_B_3, _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2);
            float _Property_ca7cc2d889a56683904c7546a72cedbf_Out_0 = _Cover_Amount;
            float _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2;
            Unity_Subtract_float(4, _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2);
            float _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2;
            Unity_Divide_float(_Property_ca7cc2d889a56683904c7546a72cedbf_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2);
            float _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1;
            Unity_Absolute_float(_Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2, _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1);
            float _Power_681b2745dbae62839624b98240ca04f7_Out_2;
            Unity_Power_float(_Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Power_681b2745dbae62839624b98240ca04f7_Out_2);
            float _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3;
            Unity_Clamp_float(_Power_681b2745dbae62839624b98240ca04f7_Out_2, 0, 2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3);
            float _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2;
            Unity_Multiply_float_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2);
            float _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1;
            Unity_Saturate_float(_Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2, _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1);
            float _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3;
            Unity_Clamp_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, 0, 0.9999, _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3);
            float _Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0 = _Cover_Max_Angle;
            float _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2;
            Unity_Divide_float(_Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0, 45, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2);
            float _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1;
            Unity_OneMinus_float(_Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1);
            float _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2;
            Unity_Subtract_float(_Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1, _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2);
            float _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3;
            Unity_Clamp_float(_Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2, 0, 2, _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3);
            float _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2;
            Unity_Divide_float(1, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2);
            float _Multiply_749d76436ed5e58abec68ae130db866b_Out_2;
            Unity_Multiply_float_float(_Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2, _Multiply_749d76436ed5e58abec68ae130db866b_Out_2);
            float _Absolute_043a189b52847189ad0575955b41f403_Out_1;
            Unity_Absolute_float(_Multiply_749d76436ed5e58abec68ae130db866b_Out_2, _Absolute_043a189b52847189ad0575955b41f403_Out_1);
            float _Property_d4f4330ee4eced8d88fb074732401835_Out_0 = _CoverHardness;
            float _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2;
            Unity_Power_float(_Absolute_043a189b52847189ad0575955b41f403_Out_1, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2);
            float _Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0 = _Cover_Min_Height;
            float _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1;
            Unity_OneMinus_float(_Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0, _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1);
            float _Split_815418660959f184b10470e678ebae30_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_815418660959f184b10470e678ebae30_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_815418660959f184b10470e678ebae30_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_815418660959f184b10470e678ebae30_A_4 = 0;
            float _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2;
            Unity_Add_float(_OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1, _Split_815418660959f184b10470e678ebae30_G_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2);
            float _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, 1, _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2);
            float _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3;
            Unity_Clamp_float(_Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2, 0, 1, _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3);
            float _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0 = _Cover_Min_Height_Blending;
            float _Add_e57f70c02382b28397642f05af76cfb0_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0, _Add_e57f70c02382b28397642f05af76cfb0_Out_2);
            float _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2;
            Unity_Divide_float(_Add_e57f70c02382b28397642f05af76cfb0_Out_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2);
            float _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1;
            Unity_OneMinus_float(_Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2, _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1);
            float _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2;
            Unity_Add_float(_OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1, -0.5, _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2);
            float _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3;
            Unity_Clamp_float(_Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2, 0, 1, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3);
            float _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2;
            Unity_Add_float(_Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3, _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2);
            float _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3;
            Unity_Clamp_float(_Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2, 0, 1, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3);
            float _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2;
            Unity_Multiply_float_float(_Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2);
            float _Multiply_5336a32115eb29849650688fd99ee185_Out_2;
            Unity_Multiply_float_float(_Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_5336a32115eb29849650688fd99ee185_Out_2);
            float3 _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2, (_Multiply_5336a32115eb29849650688fd99ee185_Out_2.xxx), _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3);
            float3x3 Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1 = normalize(mul(Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent, _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3.xyz).xyz);
            float3 _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1, _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2);
            float _Split_b821124768adb688becbc5d63b26adb4_R_1 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[0];
            float _Split_b821124768adb688becbc5d63b26adb4_G_2 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[1];
            float _Split_b821124768adb688becbc5d63b26adb4_B_3 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[2];
            float _Split_b821124768adb688becbc5d63b26adb4_A_4 = 0;
            float _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2;
            Unity_Add_float(_Split_b821124768adb688becbc5d63b26adb4_R_1, _Split_b821124768adb688becbc5d63b26adb4_G_2, _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2);
            float _Add_508b788633abc0829f0843d1b1f942c2_Out_2;
            Unity_Add_float(_Add_fd43b427bfe3748cb0ced35df3b22159_Out_2, _Split_b821124768adb688becbc5d63b26adb4_B_3, _Add_508b788633abc0829f0843d1b1f942c2_Out_2);
            float _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2;
            Unity_Multiply_float_float(_Add_508b788633abc0829f0843d1b1f942c2_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2);
            float _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2;
            Unity_Multiply_float_float(_Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2);
            float _Multiply_b907f38702eabd80a6c67777243459de_Out_2;
            Unity_Multiply_float_float(_Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2);
            float _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2;
            Unity_Multiply_float_float(_Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2, _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2);
            UnityTexture2D _Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_9b6d5da081e434808a5840cbd915bb28;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4);
            float _Split_b20618c84cffd183aae7f27c2d0772cb_R_1 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[0];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_G_2 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[1];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_B_3 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[2];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_A_4 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[3];
            float _Property_987a8037965fff81a4930627358fc6e3_Out_0 = _CoverHeightMapMin;
            float _Property_89aeacdce0000086a98e45df79358a56_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_d18b9686bb8af48c85d99d319830c000_Out_0 = float2(_Property_987a8037965fff81a4930627358fc6e3_Out_0, _Property_89aeacdce0000086a98e45df79358a56_Out_0);
            float _Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0 = _CoverHeightMapOffset;
            float2 _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2;
            Unity_Add_float2(_Vector2_d18b9686bb8af48c85d99d319830c000_Out_0, (_Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0.xx), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2);
            float _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_B_3, float2 (0, 1), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3);
            float _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2;
            Unity_Multiply_float_float(_Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3, _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2);
            float _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2;
            Unity_Multiply_float_float(_Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2, _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2);
            float _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1;
            Unity_Saturate_float(_Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1);
            float _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2;
            Unity_Multiply_float_float(_Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2);
            float _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3;
            Unity_Branch_float(_Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3);
            float4 _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3;
            Unity_Lerp_float4(_HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxxx), _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3);
            float _Split_2d3577de3d626c8683c82ad2f5337a65_R_1 = IN.VertexColor[0];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_G_2 = IN.VertexColor[1];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_B_3 = IN.VertexColor[2];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_A_4 = IN.VertexColor[3];
            float _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_R_1, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1);
            float _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3;
            Unity_Lerp_float(0, _Split_866a663ed067f988862843fe32765ff8_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3);
            float _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2;
            Unity_Multiply_float_float(_Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3, _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0, _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2);
            float _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1;
            Unity_Absolute_float(_Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2, _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1);
            float _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2;
            Unity_Power_float(_Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1, _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0, _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2);
            float _Lerp_773fc936303dec838cfd7db23903de62_Out_3;
            Unity_Lerp_float(0, _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_773fc936303dec838cfd7db23903de62_Out_3);
            float _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2;
            Unity_Multiply_float_float(_Lerp_773fc936303dec838cfd7db23903de62_Out_3, _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0, _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2);
            float _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1;
            Unity_Absolute_float(_Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2, _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1);
            float _Property_013b523e19192f8593f2bcc154316b47_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_e5638390467fac89ae1f7b85fc93815b_Out_2;
            Unity_Power_float(_Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1, _Property_013b523e19192f8593f2bcc154316b47_Out_0, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2);
            float _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_B_3, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1);
            float _Lerp_594e5a2708dbe78894dc533303332962_Out_3;
            Unity_Lerp_float(_Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1, _Lerp_594e5a2708dbe78894dc533303332962_Out_3);
            float _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3;
            Unity_Lerp_float(0, _Split_b20618c84cffd183aae7f27c2d0772cb_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3);
            float _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_688d5e023afdea8f88054040203609ac_Out_2;
            Unity_Multiply_float_float(_Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3, _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0, _Multiply_688d5e023afdea8f88054040203609ac_Out_2);
            float _Absolute_b525073675d39a899115ebede3255a97_Out_1;
            Unity_Absolute_float(_Multiply_688d5e023afdea8f88054040203609ac_Out_2, _Absolute_b525073675d39a899115ebede3255a97_Out_1);
            float _Property_b14b960de7b30882a67b30cf91355226_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_fd909f27e3507185bcb862a17c2e116e_Out_2;
            Unity_Power_float(_Absolute_b525073675d39a899115ebede3255a97_Out_1, _Property_b14b960de7b30882a67b30cf91355226_Out_0, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2);
            float _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3;
            Unity_Lerp_float(_Lerp_594e5a2708dbe78894dc533303332962_Out_3, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3, _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3);
            float4 _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0, _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2);
            float4 _Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_0709d20641a7668b85ded82df467d4f4_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_0709d20641a7668b85ded82df467d4f4_Out_0, _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2);
            float3 _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3);
            float3 _Normalize_5840852513c50882be7896a398055011_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5840852513c50882be7896a398055011_Out_1);
            float _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2;
            Unity_DotProduct_float3(_Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3, _Normalize_5840852513c50882be7896a398055011_Out_1, _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2);
            float _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1;
            Unity_Saturate_float(_DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2, _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1);
            float _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1;
            Unity_OneMinus_float(_Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1, _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1);
            float _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1;
            Unity_Absolute_float(_OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1, _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1);
            float _Power_0f033f56feb0de89a9152324c9659e0a_Out_2;
            Unity_Power_float(_Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1, 10, _Power_0f033f56feb0de89a9152324c9659e0a_Out_2);
            float4 _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2;
            Unity_Multiply_float4_float4(_Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0, (_Power_0f033f56feb0de89a9152324c9659e0a_Out_2.xxxx), _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2);
            float _Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0 = _RimLightPower;
            float4 _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2;
            Unity_Multiply_float4_float4(_Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2, (_Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2);
            float4 _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2);
            float4 _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2;
            Unity_Add_float4(_Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2, _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2);
            float4 _Clamp_cb735681159425838b158a92c7e830b0_Out_3;
            Unity_Clamp_float4(_Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, float4(0, 0, 0, 0), _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, _Clamp_cb735681159425838b158a92c7e830b0_Out_3);
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_R_1 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[0];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_G_2 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[1];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_B_3 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[2];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[3];
            float _Property_57dab79b7e7fc28c99642ba557430a27_Out_0 = _BaseMetallic;
            float _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2;
            Unity_Multiply_float_float(_Split_866a663ed067f988862843fe32765ff8_R_1, _Property_57dab79b7e7fc28c99642ba557430a27_Out_0, _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2);
            float _Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0 = _BaseAORemapMin;
            float _Property_5a040fb62cd8888895d4f920c4036587_Out_0 = _BaseAORemapMax;
            float2 _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0 = float2(_Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0, _Property_5a040fb62cd8888895d4f920c4036587_Out_0);
            float _Remap_de2674403349aa85b1136d42692d26f9_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_G_2, float2 (0, 1), _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0, _Remap_de2674403349aa85b1136d42692d26f9_Out_3);
            float3 _Vector3_4c4100faab122d8da757a32364182844_Out_0 = float3(_Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2, _Remap_de2674403349aa85b1136d42692d26f9_Out_3, 0);
            float _Property_7cdf7bda907cf087942cd072e635a869_Out_0 = _Base2Metallic;
            float _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2;
            Unity_Multiply_float_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1, _Property_7cdf7bda907cf087942cd072e635a869_Out_0, _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2);
            float _Property_b334f6ce40e54186b9864b004fbe88d2_Out_0 = _Base2AORemapMin;
            float _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0 = _Base2AORemapMax;
            float2 _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0 = float2(_Property_b334f6ce40e54186b9864b004fbe88d2_Out_0, _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0);
            float _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2, float2 (0, 1), _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3);
            float3 _Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0 = float3(_Multiply_befa03f2838946858f28ac63a284b0f8_Out_2, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869;
            float4 _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_4c4100faab122d8da757a32364182844_Out_0, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1);
            float _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0 = _CoverMetallic;
            float _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2;
            Unity_Multiply_float_float(_Split_b20618c84cffd183aae7f27c2d0772cb_R_1, _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0, _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2);
            float _Property_e52744d22eaee787aba665b5a103092d_Out_0 = _CoverAORemapMin;
            float _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0 = _CoverAORemapMax;
            float2 _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0 = float2(_Property_e52744d22eaee787aba665b5a103092d_Out_0, _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0);
            float _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_G_2, float2 (0, 1), _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3);
            float3 _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0 = float3(_Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3, 0);
            float3 _Lerp_5d687668f4856180be26ec62834c6113_Out_3;
            Unity_Lerp_float3((_HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1.xyz), _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_5d687668f4856180be26ec62834c6113_Out_3);
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[0];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[1];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_B_3 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[2];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_A_4 = 0;
            surface.BaseColor = (_Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3.xyz);
            surface.Emission = (_Clamp_cb735681159425838b158a92c7e830b0_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4;
            surface.Occlusion = _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2;
            surface.NormalTS = _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            surface.Metallic = _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassConstant.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
    }
    SubShader
    {
        Tags
        {
            "RenderPipeline"="HDRenderPipeline"
            "RenderType"="HDLitShader"
            "Queue"="Geometry+225"
            "ShaderGraphShader"="true"
            "ShaderGraphTargetId"="HDLitSubTarget"
        }
        Pass
        {
            Name "IndirectDXR"
            Tags
            {
                "LightMode" = "IndirectDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 ps5
        
            // Keywords
            #pragma multi_compile _ MULTI_BOUNCE_INDIRECT
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_INDIRECT
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        #define HAS_LIGHTLOOP 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float4 _BaseTilingOffset;
        float _BaseTriplanarThreshold;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2TriplanarThreshold;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float3 _CoverDirection;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverTriplanarThreshold;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float _CoverEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float4 _RimColor;
        float _RimLightPower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float4 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2));
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float4 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2));
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float4 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float4 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float4(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float4 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float4(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float4 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float4(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        YZ_3 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0;
        XY_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        struct Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2);
        float3 _Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float3 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float3_float3(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2;
        Unity_Multiply_float_float(_Split_6299d4ddcc4c74828aea40a46fdb896e_B_3, -1, _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2);
        float2 _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0 = float2(_Multiply_de711f4a4614bd89a463b53374cf4036_Out_2, 1);
        float2 _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2));
        _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0);
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float2 _Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0 = float2(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4, _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5);
        float2 _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2;
        Unity_Multiply_float2_float2(_Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0, _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2);
        float2 _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_b227c84042055e8faa1a9fdc69529707_Out_2;
        Unity_Add_float2(_Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2, _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0, _Add_b227c84042055e8faa1a9fdc69529707_Out_2);
        float _Split_2cfb9eacd8762483941459cdf28bda97_R_1 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[0];
        float _Split_2cfb9eacd8762483941459cdf28bda97_G_2 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[1];
        float _Split_2cfb9eacd8762483941459cdf28bda97_B_3 = 0;
        float _Split_2cfb9eacd8762483941459cdf28bda97_A_4 = 0;
        float _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0 = float3(_Split_2cfb9eacd8762483941459cdf28bda97_R_1, _Split_2cfb9eacd8762483941459cdf28bda97_G_2, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float3_float3(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_R_1, 1);
        float2 _Multiply_862402885a49f18cb87278ab53bc6744_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_862402885a49f18cb87278ab53bc6744_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_862402885a49f18cb87278ab53bc6744_Out_2));
        _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0);
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float _Multiply_4649b768be76d784a3284bacde795359_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Multiply_4649b768be76d784a3284bacde795359_Out_2);
        float2 _Vector2_819fcd5eb484438eacad1987576d7d67_Out_0 = float2(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4, _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5);
        float2 _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2;
        Unity_Multiply_float2_float2(_Vector2_819fcd5eb484438eacad1987576d7d67_Out_0, _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2);
        float2 _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2;
        Unity_Add_float2(_Multiply_58530ebb3c6d798b93686a76247bf505_Out_2, _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0, _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2);
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[0];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[1];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_B_3 = 0;
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_A_4 = 0;
        float3 _Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0 = float3(_Multiply_4649b768be76d784a3284bacde795359_Out_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1);
        float3 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float3_float3(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float3 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float3(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float3 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float3(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float3 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float3(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        float3x3 Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1 = TransformWorldToTangent(_Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2.xyz, Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World);
        float3 _Normalize_15ef346824db0a8797631ed8b998e673_Out_1;
        Unity_Normalize_float3(_Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1, _Normalize_15ef346824db0a8797631ed8b998e673_Out_1);
        XYZ_1 = (float4(_Normalize_15ef346824db0a8797631ed8b998e673_Out_1, 1.0));
        XZ_2 = (float4(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, 1.0));
        YZ_3 = (float4(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, 1.0));
        XY_4 = (float4(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_d92b1410e1d6bc81a86076b09e35f302_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_d4a357b2daff5587ae46468726a33797_Out_0 = _BaseTilingOffset;
            float4 _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_d4a357b2daff5587ae46468726a33797_Out_0, _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2);
            float _Property_b168be530d5b4082a2816fc835b55e19_Out_0 = _BaseTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_d92b1410e1d6bc81a86076b09e35f302_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4);
            float4 _Property_17f0f1bec4ec6485881127275660d4f1_Out_0 = _BaseColor;
            float4 _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _Property_17f0f1bec4ec6485881127275660d4f1_Out_0, _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2);
            float _Split_473d9bf097327483847264a7cc5c61f9_R_1 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[0];
            float _Split_473d9bf097327483847264a7cc5c61f9_G_2 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[1];
            float _Split_473d9bf097327483847264a7cc5c61f9_B_3 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[2];
            float _Split_473d9bf097327483847264a7cc5c61f9_A_4 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[3];
            float _Split_2ffd394bfe87c786b791f90b404c032d_R_1 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[0];
            float _Split_2ffd394bfe87c786b791f90b404c032d_G_2 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[1];
            float _Split_2ffd394bfe87c786b791f90b404c032d_B_3 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[2];
            float _Split_2ffd394bfe87c786b791f90b404c032d_A_4 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[3];
            float _Property_a1b1d767544de781a39d6415872f7285_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0 = float2(_Property_a1b1d767544de781a39d6415872f7285_Out_0, _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0);
            float _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3;
            Unity_Remap_float(_Split_2ffd394bfe87c786b791f90b404c032d_A_4, float2 (0, 1), _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3);
            float4 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4;
            float3 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5;
            float2 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6;
            Unity_Combine_float(_Split_473d9bf097327483847264a7cc5c61f9_R_1, _Split_473d9bf097327483847264a7cc5c61f9_G_2, _Split_473d9bf097327483847264a7cc5c61f9_B_3, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6);
            UnityTexture2D _Property_080b6cb46abb00848263c964726eac36_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_080b6cb46abb00848263c964726eac36_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4);
            float _Split_866a663ed067f988862843fe32765ff8_R_1 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[0];
            float _Split_866a663ed067f988862843fe32765ff8_G_2 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[1];
            float _Split_866a663ed067f988862843fe32765ff8_B_3 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[2];
            float _Split_866a663ed067f988862843fe32765ff8_A_4 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[3];
            float _Property_3b9891099f2f3e84b765eb453f6f6810_Out_0 = _HeightMin;
            float _Property_bde21360babd9089a90a45cd2843925b_Out_0 = _HeightMax;
            float2 _Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0 = float2(_Property_3b9891099f2f3e84b765eb453f6f6810_Out_0, _Property_bde21360babd9089a90a45cd2843925b_Out_0);
            float _Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0 = _HeightOffset;
            float2 _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2;
            Unity_Add_float2(_Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0, (_Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0.xx), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2);
            float _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_B_3, float2 (0, 1), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3);
            UnityTexture2D _Property_11586ef261ce8e87953046ff84ce22ab_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_221c724b2137d58c8c387fee5b48be14_Out_0 = _Base2TilingOffset;
            float4 _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_221c724b2137d58c8c387fee5b48be14_Out_0, _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2);
            float _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0 = _Base2TriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_ca3aaaec266f85859b75e37163da7cba;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_11586ef261ce8e87953046ff84ce22ab_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4);
            float4 _Property_60dff9cc4310ea89874789591a78d84b_Out_0 = _Base2Color;
            float4 _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _Property_60dff9cc4310ea89874789591a78d84b_Out_0, _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2);
            float _Split_96d66d11efd8418aa95cffd04b788c51_R_1 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[0];
            float _Split_96d66d11efd8418aa95cffd04b788c51_G_2 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[1];
            float _Split_96d66d11efd8418aa95cffd04b788c51_B_3 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[2];
            float _Split_96d66d11efd8418aa95cffd04b788c51_A_4 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[3];
            float _Split_837cde6fde77238baac188382335775d_R_1 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[0];
            float _Split_837cde6fde77238baac188382335775d_G_2 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[1];
            float _Split_837cde6fde77238baac188382335775d_B_3 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[2];
            float _Split_837cde6fde77238baac188382335775d_A_4 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[3];
            float _Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0 = float2(_Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0, _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0);
            float _Remap_697b96439d3a0983800a051b2b4edd90_Out_3;
            Unity_Remap_float(_Split_837cde6fde77238baac188382335775d_A_4, float2 (0, 1), _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3);
            float4 _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4;
            float3 _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5;
            float2 _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6;
            Unity_Combine_float(_Split_96d66d11efd8418aa95cffd04b788c51_R_1, _Split_96d66d11efd8418aa95cffd04b788c51_G_2, _Split_96d66d11efd8418aa95cffd04b788c51_B_3, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5, _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6);
            float _Property_312b653a29ccc087849b1493611fb73c_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.tex, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.samplerstate, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.r;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_G_5 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.g;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_B_6 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.b;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_A_7 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.a;
            float _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1);
            float _Branch_6b7615e16629338ba87d3570a0096f66_Out_3;
            Unity_Branch_float(_Property_312b653a29ccc087849b1493611fb73c_Out_0, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1, _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _Branch_6b7615e16629338ba87d3570a0096f66_Out_3);
            UnityTexture2D _Property_b4749c77856157858fffde0aed55fc74_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_b4749c77856157858fffde0aed55fc74_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4);
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[0];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[1];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[2];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[3];
            float _Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0 = _HeightMin2;
            float _Property_145222f375008a879315637be0f172c5_Out_0 = _HeightMax2;
            float2 _Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0 = float2(_Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0, _Property_145222f375008a879315637be0f172c5_Out_0);
            float _Property_8be924d801daee88b294af592a560e75_Out_0 = _HeightOffset2;
            float2 _Add_37703f1eb9ce078daaedca833705f5dd_Out_2;
            Unity_Add_float2(_Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0, (_Property_8be924d801daee88b294af592a560e75_Out_0.xx), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2);
            float _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3, float2 (0, 1), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3);
            float _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2;
            Unity_Multiply_float_float(_Branch_6b7615e16629338ba87d3570a0096f66_Out_3, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3, _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2);
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_R_1 = IN.VertexColor[0];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2 = IN.VertexColor[1];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3 = IN.VertexColor[2];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_A_4 = IN.VertexColor[3];
            float _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2;
            Unity_Multiply_float_float(_Multiply_d9f42ca072d9188ab2566400157a199f_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2);
            float _Property_c0dc9341fd635288a1c2869945617704_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5;
            float4 _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1);
            UnityTexture2D _Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_9bedb34aba10fa89a5f5b18919971491_Out_0 = _CoverTilingOffset;
            float4 _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_9bedb34aba10fa89a5f5b18919971491_Out_0, _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2);
            float _Property_bf361924f27f848994241bda91fc2005_Out_0 = _CoverTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4);
            float4 _Property_19547f2fe562798683b730e775cbfb39_Out_0 = _CoverBaseColor;
            float4 _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _Property_19547f2fe562798683b730e775cbfb39_Out_0, _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2);
            float _Split_0d31d5c6a74be68484498325bbfacd3c_R_1 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[0];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_G_2 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[1];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_B_3 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[2];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_A_4 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[3];
            float _Split_90237729226dca849687b6c56fde4cbe_R_1 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[0];
            float _Split_90237729226dca849687b6c56fde4cbe_G_2 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[1];
            float _Split_90237729226dca849687b6c56fde4cbe_B_3 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[2];
            float _Split_90237729226dca849687b6c56fde4cbe_A_4 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[3];
            float _Property_007771e9e06cc78b9844d01f8129c541_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0 = float2(_Property_007771e9e06cc78b9844d01f8129c541_Out_0, _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0);
            float _Remap_690ea2a75496a283a66513f691c4f9db_Out_3;
            Unity_Remap_float(_Split_90237729226dca849687b6c56fde4cbe_A_4, float2 (0, 1), _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3);
            float4 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4;
            float3 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5;
            float2 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6;
            Unity_Combine_float(_Split_0d31d5c6a74be68484498325bbfacd3c_R_1, _Split_0d31d5c6a74be68484498325bbfacd3c_G_2, _Split_0d31d5c6a74be68484498325bbfacd3c_B_3, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6);
            float _Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_89bda93a711241049250cd3215f22c11_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0 = IN.uv0;
            float4 _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0 = SAMPLE_TEXTURE2D(_Property_89bda93a711241049250cd3215f22c11_Out_0.tex, _Property_89bda93a711241049250cd3215f22c11_Out_0.samplerstate, _Property_89bda93a711241049250cd3215f22c11_Out_0.GetTransformedUV((_UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0.xy)));
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_R_4 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.r;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_G_5 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.g;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_B_6 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.b;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_A_7 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.a;
            float _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0 = _CoverMaskPower;
            float _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_b8be215db546638398ea07060feb5224_A_7, _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0, _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2);
            float _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3;
            Unity_Clamp_float(_Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2, 0, 1, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3);
            float3 _Property_509761afcb3aad8f9a29405c122dbf08_Out_0 = _CoverDirection;
            UnityTexture2D _Property_72c615246e955087b85288c29905f048_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_72c615246e955087b85288c29905f048_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4);
            float _Property_7edd97bda70eb38a8c4253094700be37_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1.xyz), _Property_7edd97bda70eb38a8c4253094700be37_Out_0, _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2);
            UnityTexture2D _Property_6809577d1aa24984aa957e13d0574602_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_6809577d1aa24984aa957e13d0574602_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4);
            float _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1.xyz), _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0, _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_1276d06b2c028187bc5fb2018f7da110;
            float4 _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1);
            UnityTexture2D _Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4);
            float _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0, _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2);
            float3 _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, IN.WorldSpaceNormal, _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2);
            float _Split_e74c8f300b486e86a5700118b60b7885_R_1 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[0];
            float _Split_e74c8f300b486e86a5700118b60b7885_G_2 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[1];
            float _Split_e74c8f300b486e86a5700118b60b7885_B_3 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[2];
            float _Split_e74c8f300b486e86a5700118b60b7885_A_4 = 0;
            float _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2;
            Unity_Add_float(_Split_e74c8f300b486e86a5700118b60b7885_R_1, _Split_e74c8f300b486e86a5700118b60b7885_G_2, _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2);
            float _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2;
            Unity_Add_float(_Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2, _Split_e74c8f300b486e86a5700118b60b7885_B_3, _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2);
            float _Property_ca7cc2d889a56683904c7546a72cedbf_Out_0 = _Cover_Amount;
            float _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2;
            Unity_Subtract_float(4, _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2);
            float _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2;
            Unity_Divide_float(_Property_ca7cc2d889a56683904c7546a72cedbf_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2);
            float _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1;
            Unity_Absolute_float(_Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2, _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1);
            float _Power_681b2745dbae62839624b98240ca04f7_Out_2;
            Unity_Power_float(_Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Power_681b2745dbae62839624b98240ca04f7_Out_2);
            float _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3;
            Unity_Clamp_float(_Power_681b2745dbae62839624b98240ca04f7_Out_2, 0, 2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3);
            float _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2;
            Unity_Multiply_float_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2);
            float _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1;
            Unity_Saturate_float(_Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2, _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1);
            float _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3;
            Unity_Clamp_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, 0, 0.9999, _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3);
            float _Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0 = _Cover_Max_Angle;
            float _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2;
            Unity_Divide_float(_Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0, 45, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2);
            float _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1;
            Unity_OneMinus_float(_Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1);
            float _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2;
            Unity_Subtract_float(_Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1, _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2);
            float _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3;
            Unity_Clamp_float(_Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2, 0, 2, _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3);
            float _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2;
            Unity_Divide_float(1, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2);
            float _Multiply_749d76436ed5e58abec68ae130db866b_Out_2;
            Unity_Multiply_float_float(_Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2, _Multiply_749d76436ed5e58abec68ae130db866b_Out_2);
            float _Absolute_043a189b52847189ad0575955b41f403_Out_1;
            Unity_Absolute_float(_Multiply_749d76436ed5e58abec68ae130db866b_Out_2, _Absolute_043a189b52847189ad0575955b41f403_Out_1);
            float _Property_d4f4330ee4eced8d88fb074732401835_Out_0 = _CoverHardness;
            float _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2;
            Unity_Power_float(_Absolute_043a189b52847189ad0575955b41f403_Out_1, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2);
            float _Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0 = _Cover_Min_Height;
            float _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1;
            Unity_OneMinus_float(_Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0, _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1);
            float _Split_815418660959f184b10470e678ebae30_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_815418660959f184b10470e678ebae30_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_815418660959f184b10470e678ebae30_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_815418660959f184b10470e678ebae30_A_4 = 0;
            float _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2;
            Unity_Add_float(_OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1, _Split_815418660959f184b10470e678ebae30_G_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2);
            float _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, 1, _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2);
            float _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3;
            Unity_Clamp_float(_Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2, 0, 1, _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3);
            float _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0 = _Cover_Min_Height_Blending;
            float _Add_e57f70c02382b28397642f05af76cfb0_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0, _Add_e57f70c02382b28397642f05af76cfb0_Out_2);
            float _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2;
            Unity_Divide_float(_Add_e57f70c02382b28397642f05af76cfb0_Out_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2);
            float _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1;
            Unity_OneMinus_float(_Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2, _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1);
            float _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2;
            Unity_Add_float(_OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1, -0.5, _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2);
            float _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3;
            Unity_Clamp_float(_Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2, 0, 1, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3);
            float _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2;
            Unity_Add_float(_Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3, _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2);
            float _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3;
            Unity_Clamp_float(_Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2, 0, 1, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3);
            float _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2;
            Unity_Multiply_float_float(_Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2);
            float _Multiply_5336a32115eb29849650688fd99ee185_Out_2;
            Unity_Multiply_float_float(_Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_5336a32115eb29849650688fd99ee185_Out_2);
            float3 _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2, (_Multiply_5336a32115eb29849650688fd99ee185_Out_2.xxx), _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3);
            float3x3 Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1 = normalize(mul(Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent, _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3.xyz).xyz);
            float3 _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1, _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2);
            float _Split_b821124768adb688becbc5d63b26adb4_R_1 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[0];
            float _Split_b821124768adb688becbc5d63b26adb4_G_2 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[1];
            float _Split_b821124768adb688becbc5d63b26adb4_B_3 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[2];
            float _Split_b821124768adb688becbc5d63b26adb4_A_4 = 0;
            float _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2;
            Unity_Add_float(_Split_b821124768adb688becbc5d63b26adb4_R_1, _Split_b821124768adb688becbc5d63b26adb4_G_2, _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2);
            float _Add_508b788633abc0829f0843d1b1f942c2_Out_2;
            Unity_Add_float(_Add_fd43b427bfe3748cb0ced35df3b22159_Out_2, _Split_b821124768adb688becbc5d63b26adb4_B_3, _Add_508b788633abc0829f0843d1b1f942c2_Out_2);
            float _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2;
            Unity_Multiply_float_float(_Add_508b788633abc0829f0843d1b1f942c2_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2);
            float _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2;
            Unity_Multiply_float_float(_Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2);
            float _Multiply_b907f38702eabd80a6c67777243459de_Out_2;
            Unity_Multiply_float_float(_Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2);
            float _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2;
            Unity_Multiply_float_float(_Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2, _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2);
            UnityTexture2D _Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_9b6d5da081e434808a5840cbd915bb28;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4);
            float _Split_b20618c84cffd183aae7f27c2d0772cb_R_1 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[0];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_G_2 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[1];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_B_3 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[2];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_A_4 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[3];
            float _Property_987a8037965fff81a4930627358fc6e3_Out_0 = _CoverHeightMapMin;
            float _Property_89aeacdce0000086a98e45df79358a56_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_d18b9686bb8af48c85d99d319830c000_Out_0 = float2(_Property_987a8037965fff81a4930627358fc6e3_Out_0, _Property_89aeacdce0000086a98e45df79358a56_Out_0);
            float _Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0 = _CoverHeightMapOffset;
            float2 _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2;
            Unity_Add_float2(_Vector2_d18b9686bb8af48c85d99d319830c000_Out_0, (_Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0.xx), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2);
            float _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_B_3, float2 (0, 1), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3);
            float _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2;
            Unity_Multiply_float_float(_Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3, _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2);
            float _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2;
            Unity_Multiply_float_float(_Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2, _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2);
            float _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1;
            Unity_Saturate_float(_Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1);
            float _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2;
            Unity_Multiply_float_float(_Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2);
            float _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3;
            Unity_Branch_float(_Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3);
            float4 _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3;
            Unity_Lerp_float4(_HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxxx), _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3);
            float _Split_2d3577de3d626c8683c82ad2f5337a65_R_1 = IN.VertexColor[0];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_G_2 = IN.VertexColor[1];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_B_3 = IN.VertexColor[2];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_A_4 = IN.VertexColor[3];
            float _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_R_1, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1);
            float _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3;
            Unity_Lerp_float(0, _Split_866a663ed067f988862843fe32765ff8_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3);
            float _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2;
            Unity_Multiply_float_float(_Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3, _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0, _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2);
            float _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1;
            Unity_Absolute_float(_Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2, _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1);
            float _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2;
            Unity_Power_float(_Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1, _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0, _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2);
            float _Lerp_773fc936303dec838cfd7db23903de62_Out_3;
            Unity_Lerp_float(0, _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_773fc936303dec838cfd7db23903de62_Out_3);
            float _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2;
            Unity_Multiply_float_float(_Lerp_773fc936303dec838cfd7db23903de62_Out_3, _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0, _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2);
            float _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1;
            Unity_Absolute_float(_Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2, _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1);
            float _Property_013b523e19192f8593f2bcc154316b47_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_e5638390467fac89ae1f7b85fc93815b_Out_2;
            Unity_Power_float(_Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1, _Property_013b523e19192f8593f2bcc154316b47_Out_0, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2);
            float _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_B_3, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1);
            float _Lerp_594e5a2708dbe78894dc533303332962_Out_3;
            Unity_Lerp_float(_Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1, _Lerp_594e5a2708dbe78894dc533303332962_Out_3);
            float _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3;
            Unity_Lerp_float(0, _Split_b20618c84cffd183aae7f27c2d0772cb_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3);
            float _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_688d5e023afdea8f88054040203609ac_Out_2;
            Unity_Multiply_float_float(_Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3, _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0, _Multiply_688d5e023afdea8f88054040203609ac_Out_2);
            float _Absolute_b525073675d39a899115ebede3255a97_Out_1;
            Unity_Absolute_float(_Multiply_688d5e023afdea8f88054040203609ac_Out_2, _Absolute_b525073675d39a899115ebede3255a97_Out_1);
            float _Property_b14b960de7b30882a67b30cf91355226_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_fd909f27e3507185bcb862a17c2e116e_Out_2;
            Unity_Power_float(_Absolute_b525073675d39a899115ebede3255a97_Out_1, _Property_b14b960de7b30882a67b30cf91355226_Out_0, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2);
            float _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3;
            Unity_Lerp_float(_Lerp_594e5a2708dbe78894dc533303332962_Out_3, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3, _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3);
            float4 _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0, _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2);
            float4 _Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_0709d20641a7668b85ded82df467d4f4_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_0709d20641a7668b85ded82df467d4f4_Out_0, _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2);
            float3 _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3);
            float3 _Normalize_5840852513c50882be7896a398055011_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5840852513c50882be7896a398055011_Out_1);
            float _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2;
            Unity_DotProduct_float3(_Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3, _Normalize_5840852513c50882be7896a398055011_Out_1, _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2);
            float _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1;
            Unity_Saturate_float(_DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2, _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1);
            float _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1;
            Unity_OneMinus_float(_Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1, _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1);
            float _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1;
            Unity_Absolute_float(_OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1, _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1);
            float _Power_0f033f56feb0de89a9152324c9659e0a_Out_2;
            Unity_Power_float(_Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1, 10, _Power_0f033f56feb0de89a9152324c9659e0a_Out_2);
            float4 _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2;
            Unity_Multiply_float4_float4(_Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0, (_Power_0f033f56feb0de89a9152324c9659e0a_Out_2.xxxx), _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2);
            float _Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0 = _RimLightPower;
            float4 _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2;
            Unity_Multiply_float4_float4(_Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2, (_Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2);
            float4 _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2);
            float4 _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2;
            Unity_Add_float4(_Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2, _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2);
            float4 _Clamp_cb735681159425838b158a92c7e830b0_Out_3;
            Unity_Clamp_float4(_Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, float4(0, 0, 0, 0), _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, _Clamp_cb735681159425838b158a92c7e830b0_Out_3);
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_R_1 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[0];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_G_2 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[1];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_B_3 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[2];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[3];
            float _Property_57dab79b7e7fc28c99642ba557430a27_Out_0 = _BaseMetallic;
            float _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2;
            Unity_Multiply_float_float(_Split_866a663ed067f988862843fe32765ff8_R_1, _Property_57dab79b7e7fc28c99642ba557430a27_Out_0, _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2);
            float _Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0 = _BaseAORemapMin;
            float _Property_5a040fb62cd8888895d4f920c4036587_Out_0 = _BaseAORemapMax;
            float2 _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0 = float2(_Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0, _Property_5a040fb62cd8888895d4f920c4036587_Out_0);
            float _Remap_de2674403349aa85b1136d42692d26f9_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_G_2, float2 (0, 1), _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0, _Remap_de2674403349aa85b1136d42692d26f9_Out_3);
            float3 _Vector3_4c4100faab122d8da757a32364182844_Out_0 = float3(_Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2, _Remap_de2674403349aa85b1136d42692d26f9_Out_3, 0);
            float _Property_7cdf7bda907cf087942cd072e635a869_Out_0 = _Base2Metallic;
            float _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2;
            Unity_Multiply_float_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1, _Property_7cdf7bda907cf087942cd072e635a869_Out_0, _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2);
            float _Property_b334f6ce40e54186b9864b004fbe88d2_Out_0 = _Base2AORemapMin;
            float _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0 = _Base2AORemapMax;
            float2 _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0 = float2(_Property_b334f6ce40e54186b9864b004fbe88d2_Out_0, _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0);
            float _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2, float2 (0, 1), _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3);
            float3 _Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0 = float3(_Multiply_befa03f2838946858f28ac63a284b0f8_Out_2, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869;
            float4 _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_4c4100faab122d8da757a32364182844_Out_0, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1);
            float _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0 = _CoverMetallic;
            float _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2;
            Unity_Multiply_float_float(_Split_b20618c84cffd183aae7f27c2d0772cb_R_1, _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0, _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2);
            float _Property_e52744d22eaee787aba665b5a103092d_Out_0 = _CoverAORemapMin;
            float _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0 = _CoverAORemapMax;
            float2 _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0 = float2(_Property_e52744d22eaee787aba665b5a103092d_Out_0, _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0);
            float _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_G_2, float2 (0, 1), _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3);
            float3 _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0 = float3(_Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3, 0);
            float3 _Lerp_5d687668f4856180be26ec62834c6113_Out_3;
            Unity_Lerp_float3((_HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1.xyz), _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_5d687668f4856180be26ec62834c6113_Out_3);
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[0];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[1];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_B_3 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[2];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_A_4 = 0;
            surface.BaseColor = (_Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3.xyz);
            surface.Emission = (_Clamp_cb735681159425838b158a92c7e830b0_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4;
            surface.Occlusion = _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2;
            surface.NormalTS = _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            surface.Metallic = _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingIndirect.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "VisibilityDXR"
            Tags
            {
                "LightMode" = "VisibilityDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 ps5
        
            // Keywords
            #pragma multi_compile _ TRANSPARENT_COLOR_SHADOW
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_VISIBILITY
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float4 _BaseTilingOffset;
        float _BaseTriplanarThreshold;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2TriplanarThreshold;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float3 _CoverDirection;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverTriplanarThreshold;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float _CoverEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float4 _RimColor;
        float _RimLightPower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float4 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2));
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float4 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2));
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float4 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float4 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float4(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float4 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float4(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float4 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float4(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        YZ_3 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0;
        XY_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        struct Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2);
        float3 _Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float3 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float3_float3(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2;
        Unity_Multiply_float_float(_Split_6299d4ddcc4c74828aea40a46fdb896e_B_3, -1, _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2);
        float2 _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0 = float2(_Multiply_de711f4a4614bd89a463b53374cf4036_Out_2, 1);
        float2 _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2));
        _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0);
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float2 _Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0 = float2(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4, _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5);
        float2 _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2;
        Unity_Multiply_float2_float2(_Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0, _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2);
        float2 _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_b227c84042055e8faa1a9fdc69529707_Out_2;
        Unity_Add_float2(_Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2, _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0, _Add_b227c84042055e8faa1a9fdc69529707_Out_2);
        float _Split_2cfb9eacd8762483941459cdf28bda97_R_1 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[0];
        float _Split_2cfb9eacd8762483941459cdf28bda97_G_2 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[1];
        float _Split_2cfb9eacd8762483941459cdf28bda97_B_3 = 0;
        float _Split_2cfb9eacd8762483941459cdf28bda97_A_4 = 0;
        float _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0 = float3(_Split_2cfb9eacd8762483941459cdf28bda97_R_1, _Split_2cfb9eacd8762483941459cdf28bda97_G_2, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float3_float3(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_R_1, 1);
        float2 _Multiply_862402885a49f18cb87278ab53bc6744_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_862402885a49f18cb87278ab53bc6744_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_862402885a49f18cb87278ab53bc6744_Out_2));
        _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0);
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float _Multiply_4649b768be76d784a3284bacde795359_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Multiply_4649b768be76d784a3284bacde795359_Out_2);
        float2 _Vector2_819fcd5eb484438eacad1987576d7d67_Out_0 = float2(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4, _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5);
        float2 _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2;
        Unity_Multiply_float2_float2(_Vector2_819fcd5eb484438eacad1987576d7d67_Out_0, _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2);
        float2 _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2;
        Unity_Add_float2(_Multiply_58530ebb3c6d798b93686a76247bf505_Out_2, _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0, _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2);
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[0];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[1];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_B_3 = 0;
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_A_4 = 0;
        float3 _Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0 = float3(_Multiply_4649b768be76d784a3284bacde795359_Out_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1);
        float3 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float3_float3(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float3 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float3(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float3 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float3(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float3 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float3(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        float3x3 Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1 = TransformWorldToTangent(_Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2.xyz, Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World);
        float3 _Normalize_15ef346824db0a8797631ed8b998e673_Out_1;
        Unity_Normalize_float3(_Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1, _Normalize_15ef346824db0a8797631ed8b998e673_Out_1);
        XYZ_1 = (float4(_Normalize_15ef346824db0a8797631ed8b998e673_Out_1, 1.0));
        XZ_2 = (float4(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, 1.0));
        YZ_3 = (float4(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, 1.0));
        XY_4 = (float4(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_d92b1410e1d6bc81a86076b09e35f302_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_d4a357b2daff5587ae46468726a33797_Out_0 = _BaseTilingOffset;
            float4 _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_d4a357b2daff5587ae46468726a33797_Out_0, _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2);
            float _Property_b168be530d5b4082a2816fc835b55e19_Out_0 = _BaseTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_d92b1410e1d6bc81a86076b09e35f302_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4);
            float4 _Property_17f0f1bec4ec6485881127275660d4f1_Out_0 = _BaseColor;
            float4 _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _Property_17f0f1bec4ec6485881127275660d4f1_Out_0, _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2);
            float _Split_473d9bf097327483847264a7cc5c61f9_R_1 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[0];
            float _Split_473d9bf097327483847264a7cc5c61f9_G_2 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[1];
            float _Split_473d9bf097327483847264a7cc5c61f9_B_3 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[2];
            float _Split_473d9bf097327483847264a7cc5c61f9_A_4 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[3];
            float _Split_2ffd394bfe87c786b791f90b404c032d_R_1 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[0];
            float _Split_2ffd394bfe87c786b791f90b404c032d_G_2 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[1];
            float _Split_2ffd394bfe87c786b791f90b404c032d_B_3 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[2];
            float _Split_2ffd394bfe87c786b791f90b404c032d_A_4 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[3];
            float _Property_a1b1d767544de781a39d6415872f7285_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0 = float2(_Property_a1b1d767544de781a39d6415872f7285_Out_0, _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0);
            float _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3;
            Unity_Remap_float(_Split_2ffd394bfe87c786b791f90b404c032d_A_4, float2 (0, 1), _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3);
            float4 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4;
            float3 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5;
            float2 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6;
            Unity_Combine_float(_Split_473d9bf097327483847264a7cc5c61f9_R_1, _Split_473d9bf097327483847264a7cc5c61f9_G_2, _Split_473d9bf097327483847264a7cc5c61f9_B_3, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6);
            UnityTexture2D _Property_080b6cb46abb00848263c964726eac36_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_080b6cb46abb00848263c964726eac36_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4);
            float _Split_866a663ed067f988862843fe32765ff8_R_1 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[0];
            float _Split_866a663ed067f988862843fe32765ff8_G_2 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[1];
            float _Split_866a663ed067f988862843fe32765ff8_B_3 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[2];
            float _Split_866a663ed067f988862843fe32765ff8_A_4 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[3];
            float _Property_3b9891099f2f3e84b765eb453f6f6810_Out_0 = _HeightMin;
            float _Property_bde21360babd9089a90a45cd2843925b_Out_0 = _HeightMax;
            float2 _Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0 = float2(_Property_3b9891099f2f3e84b765eb453f6f6810_Out_0, _Property_bde21360babd9089a90a45cd2843925b_Out_0);
            float _Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0 = _HeightOffset;
            float2 _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2;
            Unity_Add_float2(_Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0, (_Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0.xx), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2);
            float _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_B_3, float2 (0, 1), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3);
            UnityTexture2D _Property_11586ef261ce8e87953046ff84ce22ab_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_221c724b2137d58c8c387fee5b48be14_Out_0 = _Base2TilingOffset;
            float4 _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_221c724b2137d58c8c387fee5b48be14_Out_0, _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2);
            float _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0 = _Base2TriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_ca3aaaec266f85859b75e37163da7cba;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_11586ef261ce8e87953046ff84ce22ab_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4);
            float4 _Property_60dff9cc4310ea89874789591a78d84b_Out_0 = _Base2Color;
            float4 _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _Property_60dff9cc4310ea89874789591a78d84b_Out_0, _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2);
            float _Split_96d66d11efd8418aa95cffd04b788c51_R_1 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[0];
            float _Split_96d66d11efd8418aa95cffd04b788c51_G_2 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[1];
            float _Split_96d66d11efd8418aa95cffd04b788c51_B_3 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[2];
            float _Split_96d66d11efd8418aa95cffd04b788c51_A_4 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[3];
            float _Split_837cde6fde77238baac188382335775d_R_1 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[0];
            float _Split_837cde6fde77238baac188382335775d_G_2 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[1];
            float _Split_837cde6fde77238baac188382335775d_B_3 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[2];
            float _Split_837cde6fde77238baac188382335775d_A_4 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[3];
            float _Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0 = float2(_Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0, _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0);
            float _Remap_697b96439d3a0983800a051b2b4edd90_Out_3;
            Unity_Remap_float(_Split_837cde6fde77238baac188382335775d_A_4, float2 (0, 1), _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3);
            float4 _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4;
            float3 _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5;
            float2 _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6;
            Unity_Combine_float(_Split_96d66d11efd8418aa95cffd04b788c51_R_1, _Split_96d66d11efd8418aa95cffd04b788c51_G_2, _Split_96d66d11efd8418aa95cffd04b788c51_B_3, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5, _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6);
            float _Property_312b653a29ccc087849b1493611fb73c_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.tex, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.samplerstate, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.r;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_G_5 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.g;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_B_6 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.b;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_A_7 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.a;
            float _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1);
            float _Branch_6b7615e16629338ba87d3570a0096f66_Out_3;
            Unity_Branch_float(_Property_312b653a29ccc087849b1493611fb73c_Out_0, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1, _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _Branch_6b7615e16629338ba87d3570a0096f66_Out_3);
            UnityTexture2D _Property_b4749c77856157858fffde0aed55fc74_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_b4749c77856157858fffde0aed55fc74_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4);
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[0];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[1];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[2];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[3];
            float _Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0 = _HeightMin2;
            float _Property_145222f375008a879315637be0f172c5_Out_0 = _HeightMax2;
            float2 _Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0 = float2(_Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0, _Property_145222f375008a879315637be0f172c5_Out_0);
            float _Property_8be924d801daee88b294af592a560e75_Out_0 = _HeightOffset2;
            float2 _Add_37703f1eb9ce078daaedca833705f5dd_Out_2;
            Unity_Add_float2(_Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0, (_Property_8be924d801daee88b294af592a560e75_Out_0.xx), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2);
            float _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3, float2 (0, 1), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3);
            float _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2;
            Unity_Multiply_float_float(_Branch_6b7615e16629338ba87d3570a0096f66_Out_3, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3, _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2);
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_R_1 = IN.VertexColor[0];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2 = IN.VertexColor[1];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3 = IN.VertexColor[2];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_A_4 = IN.VertexColor[3];
            float _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2;
            Unity_Multiply_float_float(_Multiply_d9f42ca072d9188ab2566400157a199f_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2);
            float _Property_c0dc9341fd635288a1c2869945617704_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5;
            float4 _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1);
            UnityTexture2D _Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_9bedb34aba10fa89a5f5b18919971491_Out_0 = _CoverTilingOffset;
            float4 _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_9bedb34aba10fa89a5f5b18919971491_Out_0, _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2);
            float _Property_bf361924f27f848994241bda91fc2005_Out_0 = _CoverTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4);
            float4 _Property_19547f2fe562798683b730e775cbfb39_Out_0 = _CoverBaseColor;
            float4 _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _Property_19547f2fe562798683b730e775cbfb39_Out_0, _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2);
            float _Split_0d31d5c6a74be68484498325bbfacd3c_R_1 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[0];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_G_2 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[1];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_B_3 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[2];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_A_4 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[3];
            float _Split_90237729226dca849687b6c56fde4cbe_R_1 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[0];
            float _Split_90237729226dca849687b6c56fde4cbe_G_2 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[1];
            float _Split_90237729226dca849687b6c56fde4cbe_B_3 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[2];
            float _Split_90237729226dca849687b6c56fde4cbe_A_4 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[3];
            float _Property_007771e9e06cc78b9844d01f8129c541_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0 = float2(_Property_007771e9e06cc78b9844d01f8129c541_Out_0, _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0);
            float _Remap_690ea2a75496a283a66513f691c4f9db_Out_3;
            Unity_Remap_float(_Split_90237729226dca849687b6c56fde4cbe_A_4, float2 (0, 1), _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3);
            float4 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4;
            float3 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5;
            float2 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6;
            Unity_Combine_float(_Split_0d31d5c6a74be68484498325bbfacd3c_R_1, _Split_0d31d5c6a74be68484498325bbfacd3c_G_2, _Split_0d31d5c6a74be68484498325bbfacd3c_B_3, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6);
            float _Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_89bda93a711241049250cd3215f22c11_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0 = IN.uv0;
            float4 _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0 = SAMPLE_TEXTURE2D(_Property_89bda93a711241049250cd3215f22c11_Out_0.tex, _Property_89bda93a711241049250cd3215f22c11_Out_0.samplerstate, _Property_89bda93a711241049250cd3215f22c11_Out_0.GetTransformedUV((_UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0.xy)));
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_R_4 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.r;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_G_5 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.g;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_B_6 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.b;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_A_7 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.a;
            float _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0 = _CoverMaskPower;
            float _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_b8be215db546638398ea07060feb5224_A_7, _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0, _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2);
            float _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3;
            Unity_Clamp_float(_Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2, 0, 1, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3);
            float3 _Property_509761afcb3aad8f9a29405c122dbf08_Out_0 = _CoverDirection;
            UnityTexture2D _Property_72c615246e955087b85288c29905f048_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_72c615246e955087b85288c29905f048_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4);
            float _Property_7edd97bda70eb38a8c4253094700be37_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1.xyz), _Property_7edd97bda70eb38a8c4253094700be37_Out_0, _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2);
            UnityTexture2D _Property_6809577d1aa24984aa957e13d0574602_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_6809577d1aa24984aa957e13d0574602_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4);
            float _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1.xyz), _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0, _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_1276d06b2c028187bc5fb2018f7da110;
            float4 _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1);
            UnityTexture2D _Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4);
            float _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0, _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2);
            float3 _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, IN.WorldSpaceNormal, _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2);
            float _Split_e74c8f300b486e86a5700118b60b7885_R_1 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[0];
            float _Split_e74c8f300b486e86a5700118b60b7885_G_2 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[1];
            float _Split_e74c8f300b486e86a5700118b60b7885_B_3 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[2];
            float _Split_e74c8f300b486e86a5700118b60b7885_A_4 = 0;
            float _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2;
            Unity_Add_float(_Split_e74c8f300b486e86a5700118b60b7885_R_1, _Split_e74c8f300b486e86a5700118b60b7885_G_2, _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2);
            float _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2;
            Unity_Add_float(_Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2, _Split_e74c8f300b486e86a5700118b60b7885_B_3, _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2);
            float _Property_ca7cc2d889a56683904c7546a72cedbf_Out_0 = _Cover_Amount;
            float _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2;
            Unity_Subtract_float(4, _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2);
            float _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2;
            Unity_Divide_float(_Property_ca7cc2d889a56683904c7546a72cedbf_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2);
            float _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1;
            Unity_Absolute_float(_Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2, _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1);
            float _Power_681b2745dbae62839624b98240ca04f7_Out_2;
            Unity_Power_float(_Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Power_681b2745dbae62839624b98240ca04f7_Out_2);
            float _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3;
            Unity_Clamp_float(_Power_681b2745dbae62839624b98240ca04f7_Out_2, 0, 2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3);
            float _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2;
            Unity_Multiply_float_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2);
            float _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1;
            Unity_Saturate_float(_Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2, _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1);
            float _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3;
            Unity_Clamp_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, 0, 0.9999, _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3);
            float _Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0 = _Cover_Max_Angle;
            float _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2;
            Unity_Divide_float(_Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0, 45, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2);
            float _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1;
            Unity_OneMinus_float(_Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1);
            float _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2;
            Unity_Subtract_float(_Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1, _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2);
            float _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3;
            Unity_Clamp_float(_Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2, 0, 2, _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3);
            float _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2;
            Unity_Divide_float(1, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2);
            float _Multiply_749d76436ed5e58abec68ae130db866b_Out_2;
            Unity_Multiply_float_float(_Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2, _Multiply_749d76436ed5e58abec68ae130db866b_Out_2);
            float _Absolute_043a189b52847189ad0575955b41f403_Out_1;
            Unity_Absolute_float(_Multiply_749d76436ed5e58abec68ae130db866b_Out_2, _Absolute_043a189b52847189ad0575955b41f403_Out_1);
            float _Property_d4f4330ee4eced8d88fb074732401835_Out_0 = _CoverHardness;
            float _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2;
            Unity_Power_float(_Absolute_043a189b52847189ad0575955b41f403_Out_1, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2);
            float _Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0 = _Cover_Min_Height;
            float _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1;
            Unity_OneMinus_float(_Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0, _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1);
            float _Split_815418660959f184b10470e678ebae30_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_815418660959f184b10470e678ebae30_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_815418660959f184b10470e678ebae30_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_815418660959f184b10470e678ebae30_A_4 = 0;
            float _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2;
            Unity_Add_float(_OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1, _Split_815418660959f184b10470e678ebae30_G_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2);
            float _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, 1, _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2);
            float _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3;
            Unity_Clamp_float(_Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2, 0, 1, _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3);
            float _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0 = _Cover_Min_Height_Blending;
            float _Add_e57f70c02382b28397642f05af76cfb0_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0, _Add_e57f70c02382b28397642f05af76cfb0_Out_2);
            float _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2;
            Unity_Divide_float(_Add_e57f70c02382b28397642f05af76cfb0_Out_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2);
            float _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1;
            Unity_OneMinus_float(_Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2, _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1);
            float _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2;
            Unity_Add_float(_OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1, -0.5, _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2);
            float _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3;
            Unity_Clamp_float(_Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2, 0, 1, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3);
            float _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2;
            Unity_Add_float(_Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3, _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2);
            float _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3;
            Unity_Clamp_float(_Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2, 0, 1, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3);
            float _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2;
            Unity_Multiply_float_float(_Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2);
            float _Multiply_5336a32115eb29849650688fd99ee185_Out_2;
            Unity_Multiply_float_float(_Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_5336a32115eb29849650688fd99ee185_Out_2);
            float3 _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2, (_Multiply_5336a32115eb29849650688fd99ee185_Out_2.xxx), _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3);
            float3x3 Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1 = normalize(mul(Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent, _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3.xyz).xyz);
            float3 _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1, _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2);
            float _Split_b821124768adb688becbc5d63b26adb4_R_1 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[0];
            float _Split_b821124768adb688becbc5d63b26adb4_G_2 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[1];
            float _Split_b821124768adb688becbc5d63b26adb4_B_3 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[2];
            float _Split_b821124768adb688becbc5d63b26adb4_A_4 = 0;
            float _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2;
            Unity_Add_float(_Split_b821124768adb688becbc5d63b26adb4_R_1, _Split_b821124768adb688becbc5d63b26adb4_G_2, _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2);
            float _Add_508b788633abc0829f0843d1b1f942c2_Out_2;
            Unity_Add_float(_Add_fd43b427bfe3748cb0ced35df3b22159_Out_2, _Split_b821124768adb688becbc5d63b26adb4_B_3, _Add_508b788633abc0829f0843d1b1f942c2_Out_2);
            float _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2;
            Unity_Multiply_float_float(_Add_508b788633abc0829f0843d1b1f942c2_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2);
            float _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2;
            Unity_Multiply_float_float(_Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2);
            float _Multiply_b907f38702eabd80a6c67777243459de_Out_2;
            Unity_Multiply_float_float(_Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2);
            float _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2;
            Unity_Multiply_float_float(_Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2, _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2);
            UnityTexture2D _Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_9b6d5da081e434808a5840cbd915bb28;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4);
            float _Split_b20618c84cffd183aae7f27c2d0772cb_R_1 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[0];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_G_2 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[1];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_B_3 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[2];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_A_4 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[3];
            float _Property_987a8037965fff81a4930627358fc6e3_Out_0 = _CoverHeightMapMin;
            float _Property_89aeacdce0000086a98e45df79358a56_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_d18b9686bb8af48c85d99d319830c000_Out_0 = float2(_Property_987a8037965fff81a4930627358fc6e3_Out_0, _Property_89aeacdce0000086a98e45df79358a56_Out_0);
            float _Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0 = _CoverHeightMapOffset;
            float2 _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2;
            Unity_Add_float2(_Vector2_d18b9686bb8af48c85d99d319830c000_Out_0, (_Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0.xx), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2);
            float _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_B_3, float2 (0, 1), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3);
            float _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2;
            Unity_Multiply_float_float(_Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3, _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2);
            float _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2;
            Unity_Multiply_float_float(_Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2, _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2);
            float _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1;
            Unity_Saturate_float(_Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1);
            float _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2;
            Unity_Multiply_float_float(_Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2);
            float _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3;
            Unity_Branch_float(_Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3);
            float4 _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3;
            Unity_Lerp_float4(_HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxxx), _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3);
            float _Split_2d3577de3d626c8683c82ad2f5337a65_R_1 = IN.VertexColor[0];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_G_2 = IN.VertexColor[1];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_B_3 = IN.VertexColor[2];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_A_4 = IN.VertexColor[3];
            float _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_R_1, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1);
            float _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3;
            Unity_Lerp_float(0, _Split_866a663ed067f988862843fe32765ff8_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3);
            float _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2;
            Unity_Multiply_float_float(_Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3, _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0, _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2);
            float _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1;
            Unity_Absolute_float(_Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2, _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1);
            float _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2;
            Unity_Power_float(_Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1, _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0, _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2);
            float _Lerp_773fc936303dec838cfd7db23903de62_Out_3;
            Unity_Lerp_float(0, _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_773fc936303dec838cfd7db23903de62_Out_3);
            float _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2;
            Unity_Multiply_float_float(_Lerp_773fc936303dec838cfd7db23903de62_Out_3, _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0, _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2);
            float _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1;
            Unity_Absolute_float(_Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2, _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1);
            float _Property_013b523e19192f8593f2bcc154316b47_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_e5638390467fac89ae1f7b85fc93815b_Out_2;
            Unity_Power_float(_Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1, _Property_013b523e19192f8593f2bcc154316b47_Out_0, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2);
            float _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_B_3, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1);
            float _Lerp_594e5a2708dbe78894dc533303332962_Out_3;
            Unity_Lerp_float(_Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1, _Lerp_594e5a2708dbe78894dc533303332962_Out_3);
            float _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3;
            Unity_Lerp_float(0, _Split_b20618c84cffd183aae7f27c2d0772cb_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3);
            float _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_688d5e023afdea8f88054040203609ac_Out_2;
            Unity_Multiply_float_float(_Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3, _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0, _Multiply_688d5e023afdea8f88054040203609ac_Out_2);
            float _Absolute_b525073675d39a899115ebede3255a97_Out_1;
            Unity_Absolute_float(_Multiply_688d5e023afdea8f88054040203609ac_Out_2, _Absolute_b525073675d39a899115ebede3255a97_Out_1);
            float _Property_b14b960de7b30882a67b30cf91355226_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_fd909f27e3507185bcb862a17c2e116e_Out_2;
            Unity_Power_float(_Absolute_b525073675d39a899115ebede3255a97_Out_1, _Property_b14b960de7b30882a67b30cf91355226_Out_0, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2);
            float _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3;
            Unity_Lerp_float(_Lerp_594e5a2708dbe78894dc533303332962_Out_3, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3, _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3);
            float4 _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0, _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2);
            float4 _Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_0709d20641a7668b85ded82df467d4f4_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_0709d20641a7668b85ded82df467d4f4_Out_0, _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2);
            float3 _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3);
            float3 _Normalize_5840852513c50882be7896a398055011_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5840852513c50882be7896a398055011_Out_1);
            float _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2;
            Unity_DotProduct_float3(_Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3, _Normalize_5840852513c50882be7896a398055011_Out_1, _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2);
            float _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1;
            Unity_Saturate_float(_DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2, _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1);
            float _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1;
            Unity_OneMinus_float(_Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1, _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1);
            float _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1;
            Unity_Absolute_float(_OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1, _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1);
            float _Power_0f033f56feb0de89a9152324c9659e0a_Out_2;
            Unity_Power_float(_Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1, 10, _Power_0f033f56feb0de89a9152324c9659e0a_Out_2);
            float4 _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2;
            Unity_Multiply_float4_float4(_Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0, (_Power_0f033f56feb0de89a9152324c9659e0a_Out_2.xxxx), _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2);
            float _Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0 = _RimLightPower;
            float4 _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2;
            Unity_Multiply_float4_float4(_Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2, (_Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2);
            float4 _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2);
            float4 _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2;
            Unity_Add_float4(_Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2, _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2);
            float4 _Clamp_cb735681159425838b158a92c7e830b0_Out_3;
            Unity_Clamp_float4(_Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, float4(0, 0, 0, 0), _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, _Clamp_cb735681159425838b158a92c7e830b0_Out_3);
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_R_1 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[0];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_G_2 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[1];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_B_3 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[2];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[3];
            float _Property_57dab79b7e7fc28c99642ba557430a27_Out_0 = _BaseMetallic;
            float _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2;
            Unity_Multiply_float_float(_Split_866a663ed067f988862843fe32765ff8_R_1, _Property_57dab79b7e7fc28c99642ba557430a27_Out_0, _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2);
            float _Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0 = _BaseAORemapMin;
            float _Property_5a040fb62cd8888895d4f920c4036587_Out_0 = _BaseAORemapMax;
            float2 _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0 = float2(_Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0, _Property_5a040fb62cd8888895d4f920c4036587_Out_0);
            float _Remap_de2674403349aa85b1136d42692d26f9_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_G_2, float2 (0, 1), _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0, _Remap_de2674403349aa85b1136d42692d26f9_Out_3);
            float3 _Vector3_4c4100faab122d8da757a32364182844_Out_0 = float3(_Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2, _Remap_de2674403349aa85b1136d42692d26f9_Out_3, 0);
            float _Property_7cdf7bda907cf087942cd072e635a869_Out_0 = _Base2Metallic;
            float _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2;
            Unity_Multiply_float_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1, _Property_7cdf7bda907cf087942cd072e635a869_Out_0, _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2);
            float _Property_b334f6ce40e54186b9864b004fbe88d2_Out_0 = _Base2AORemapMin;
            float _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0 = _Base2AORemapMax;
            float2 _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0 = float2(_Property_b334f6ce40e54186b9864b004fbe88d2_Out_0, _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0);
            float _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2, float2 (0, 1), _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3);
            float3 _Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0 = float3(_Multiply_befa03f2838946858f28ac63a284b0f8_Out_2, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869;
            float4 _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_4c4100faab122d8da757a32364182844_Out_0, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1);
            float _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0 = _CoverMetallic;
            float _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2;
            Unity_Multiply_float_float(_Split_b20618c84cffd183aae7f27c2d0772cb_R_1, _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0, _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2);
            float _Property_e52744d22eaee787aba665b5a103092d_Out_0 = _CoverAORemapMin;
            float _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0 = _CoverAORemapMax;
            float2 _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0 = float2(_Property_e52744d22eaee787aba665b5a103092d_Out_0, _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0);
            float _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_G_2, float2 (0, 1), _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3);
            float3 _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0 = float3(_Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3, 0);
            float3 _Lerp_5d687668f4856180be26ec62834c6113_Out_3;
            Unity_Lerp_float3((_HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1.xyz), _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_5d687668f4856180be26ec62834c6113_Out_3);
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[0];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[1];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_B_3 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[2];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_A_4 = 0;
            surface.BaseColor = (_Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3.xyz);
            surface.Emission = (_Clamp_cb735681159425838b158a92c7e830b0_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4;
            surface.Occlusion = _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2;
            surface.NormalTS = _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            surface.Metallic = _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingVisibility.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "ForwardDXR"
            Tags
            {
                "LightMode" = "ForwardDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 ps5
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_FORWARD
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        #define HAS_LIGHTLOOP 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float4 _BaseTilingOffset;
        float _BaseTriplanarThreshold;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2TriplanarThreshold;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float3 _CoverDirection;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverTriplanarThreshold;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float _CoverEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float4 _RimColor;
        float _RimLightPower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float4 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2));
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float4 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2));
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float4 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float4 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float4(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float4 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float4(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float4 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float4(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        YZ_3 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0;
        XY_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        struct Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2);
        float3 _Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float3 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float3_float3(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2;
        Unity_Multiply_float_float(_Split_6299d4ddcc4c74828aea40a46fdb896e_B_3, -1, _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2);
        float2 _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0 = float2(_Multiply_de711f4a4614bd89a463b53374cf4036_Out_2, 1);
        float2 _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2));
        _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0);
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float2 _Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0 = float2(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4, _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5);
        float2 _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2;
        Unity_Multiply_float2_float2(_Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0, _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2);
        float2 _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_b227c84042055e8faa1a9fdc69529707_Out_2;
        Unity_Add_float2(_Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2, _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0, _Add_b227c84042055e8faa1a9fdc69529707_Out_2);
        float _Split_2cfb9eacd8762483941459cdf28bda97_R_1 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[0];
        float _Split_2cfb9eacd8762483941459cdf28bda97_G_2 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[1];
        float _Split_2cfb9eacd8762483941459cdf28bda97_B_3 = 0;
        float _Split_2cfb9eacd8762483941459cdf28bda97_A_4 = 0;
        float _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0 = float3(_Split_2cfb9eacd8762483941459cdf28bda97_R_1, _Split_2cfb9eacd8762483941459cdf28bda97_G_2, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float3_float3(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_R_1, 1);
        float2 _Multiply_862402885a49f18cb87278ab53bc6744_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_862402885a49f18cb87278ab53bc6744_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_862402885a49f18cb87278ab53bc6744_Out_2));
        _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0);
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float _Multiply_4649b768be76d784a3284bacde795359_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Multiply_4649b768be76d784a3284bacde795359_Out_2);
        float2 _Vector2_819fcd5eb484438eacad1987576d7d67_Out_0 = float2(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4, _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5);
        float2 _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2;
        Unity_Multiply_float2_float2(_Vector2_819fcd5eb484438eacad1987576d7d67_Out_0, _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2);
        float2 _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2;
        Unity_Add_float2(_Multiply_58530ebb3c6d798b93686a76247bf505_Out_2, _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0, _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2);
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[0];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[1];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_B_3 = 0;
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_A_4 = 0;
        float3 _Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0 = float3(_Multiply_4649b768be76d784a3284bacde795359_Out_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1);
        float3 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float3_float3(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float3 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float3(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float3 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float3(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float3 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float3(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        float3x3 Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1 = TransformWorldToTangent(_Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2.xyz, Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World);
        float3 _Normalize_15ef346824db0a8797631ed8b998e673_Out_1;
        Unity_Normalize_float3(_Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1, _Normalize_15ef346824db0a8797631ed8b998e673_Out_1);
        XYZ_1 = (float4(_Normalize_15ef346824db0a8797631ed8b998e673_Out_1, 1.0));
        XZ_2 = (float4(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, 1.0));
        YZ_3 = (float4(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, 1.0));
        XY_4 = (float4(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_d92b1410e1d6bc81a86076b09e35f302_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_d4a357b2daff5587ae46468726a33797_Out_0 = _BaseTilingOffset;
            float4 _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_d4a357b2daff5587ae46468726a33797_Out_0, _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2);
            float _Property_b168be530d5b4082a2816fc835b55e19_Out_0 = _BaseTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_d92b1410e1d6bc81a86076b09e35f302_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4);
            float4 _Property_17f0f1bec4ec6485881127275660d4f1_Out_0 = _BaseColor;
            float4 _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _Property_17f0f1bec4ec6485881127275660d4f1_Out_0, _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2);
            float _Split_473d9bf097327483847264a7cc5c61f9_R_1 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[0];
            float _Split_473d9bf097327483847264a7cc5c61f9_G_2 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[1];
            float _Split_473d9bf097327483847264a7cc5c61f9_B_3 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[2];
            float _Split_473d9bf097327483847264a7cc5c61f9_A_4 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[3];
            float _Split_2ffd394bfe87c786b791f90b404c032d_R_1 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[0];
            float _Split_2ffd394bfe87c786b791f90b404c032d_G_2 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[1];
            float _Split_2ffd394bfe87c786b791f90b404c032d_B_3 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[2];
            float _Split_2ffd394bfe87c786b791f90b404c032d_A_4 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[3];
            float _Property_a1b1d767544de781a39d6415872f7285_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0 = float2(_Property_a1b1d767544de781a39d6415872f7285_Out_0, _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0);
            float _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3;
            Unity_Remap_float(_Split_2ffd394bfe87c786b791f90b404c032d_A_4, float2 (0, 1), _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3);
            float4 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4;
            float3 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5;
            float2 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6;
            Unity_Combine_float(_Split_473d9bf097327483847264a7cc5c61f9_R_1, _Split_473d9bf097327483847264a7cc5c61f9_G_2, _Split_473d9bf097327483847264a7cc5c61f9_B_3, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6);
            UnityTexture2D _Property_080b6cb46abb00848263c964726eac36_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_080b6cb46abb00848263c964726eac36_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4);
            float _Split_866a663ed067f988862843fe32765ff8_R_1 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[0];
            float _Split_866a663ed067f988862843fe32765ff8_G_2 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[1];
            float _Split_866a663ed067f988862843fe32765ff8_B_3 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[2];
            float _Split_866a663ed067f988862843fe32765ff8_A_4 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[3];
            float _Property_3b9891099f2f3e84b765eb453f6f6810_Out_0 = _HeightMin;
            float _Property_bde21360babd9089a90a45cd2843925b_Out_0 = _HeightMax;
            float2 _Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0 = float2(_Property_3b9891099f2f3e84b765eb453f6f6810_Out_0, _Property_bde21360babd9089a90a45cd2843925b_Out_0);
            float _Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0 = _HeightOffset;
            float2 _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2;
            Unity_Add_float2(_Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0, (_Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0.xx), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2);
            float _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_B_3, float2 (0, 1), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3);
            UnityTexture2D _Property_11586ef261ce8e87953046ff84ce22ab_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_221c724b2137d58c8c387fee5b48be14_Out_0 = _Base2TilingOffset;
            float4 _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_221c724b2137d58c8c387fee5b48be14_Out_0, _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2);
            float _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0 = _Base2TriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_ca3aaaec266f85859b75e37163da7cba;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_11586ef261ce8e87953046ff84ce22ab_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4);
            float4 _Property_60dff9cc4310ea89874789591a78d84b_Out_0 = _Base2Color;
            float4 _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _Property_60dff9cc4310ea89874789591a78d84b_Out_0, _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2);
            float _Split_96d66d11efd8418aa95cffd04b788c51_R_1 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[0];
            float _Split_96d66d11efd8418aa95cffd04b788c51_G_2 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[1];
            float _Split_96d66d11efd8418aa95cffd04b788c51_B_3 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[2];
            float _Split_96d66d11efd8418aa95cffd04b788c51_A_4 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[3];
            float _Split_837cde6fde77238baac188382335775d_R_1 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[0];
            float _Split_837cde6fde77238baac188382335775d_G_2 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[1];
            float _Split_837cde6fde77238baac188382335775d_B_3 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[2];
            float _Split_837cde6fde77238baac188382335775d_A_4 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[3];
            float _Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0 = float2(_Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0, _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0);
            float _Remap_697b96439d3a0983800a051b2b4edd90_Out_3;
            Unity_Remap_float(_Split_837cde6fde77238baac188382335775d_A_4, float2 (0, 1), _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3);
            float4 _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4;
            float3 _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5;
            float2 _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6;
            Unity_Combine_float(_Split_96d66d11efd8418aa95cffd04b788c51_R_1, _Split_96d66d11efd8418aa95cffd04b788c51_G_2, _Split_96d66d11efd8418aa95cffd04b788c51_B_3, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5, _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6);
            float _Property_312b653a29ccc087849b1493611fb73c_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.tex, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.samplerstate, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.r;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_G_5 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.g;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_B_6 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.b;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_A_7 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.a;
            float _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1);
            float _Branch_6b7615e16629338ba87d3570a0096f66_Out_3;
            Unity_Branch_float(_Property_312b653a29ccc087849b1493611fb73c_Out_0, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1, _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _Branch_6b7615e16629338ba87d3570a0096f66_Out_3);
            UnityTexture2D _Property_b4749c77856157858fffde0aed55fc74_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_b4749c77856157858fffde0aed55fc74_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4);
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[0];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[1];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[2];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[3];
            float _Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0 = _HeightMin2;
            float _Property_145222f375008a879315637be0f172c5_Out_0 = _HeightMax2;
            float2 _Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0 = float2(_Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0, _Property_145222f375008a879315637be0f172c5_Out_0);
            float _Property_8be924d801daee88b294af592a560e75_Out_0 = _HeightOffset2;
            float2 _Add_37703f1eb9ce078daaedca833705f5dd_Out_2;
            Unity_Add_float2(_Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0, (_Property_8be924d801daee88b294af592a560e75_Out_0.xx), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2);
            float _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3, float2 (0, 1), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3);
            float _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2;
            Unity_Multiply_float_float(_Branch_6b7615e16629338ba87d3570a0096f66_Out_3, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3, _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2);
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_R_1 = IN.VertexColor[0];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2 = IN.VertexColor[1];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3 = IN.VertexColor[2];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_A_4 = IN.VertexColor[3];
            float _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2;
            Unity_Multiply_float_float(_Multiply_d9f42ca072d9188ab2566400157a199f_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2);
            float _Property_c0dc9341fd635288a1c2869945617704_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5;
            float4 _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1);
            UnityTexture2D _Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_9bedb34aba10fa89a5f5b18919971491_Out_0 = _CoverTilingOffset;
            float4 _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_9bedb34aba10fa89a5f5b18919971491_Out_0, _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2);
            float _Property_bf361924f27f848994241bda91fc2005_Out_0 = _CoverTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4);
            float4 _Property_19547f2fe562798683b730e775cbfb39_Out_0 = _CoverBaseColor;
            float4 _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _Property_19547f2fe562798683b730e775cbfb39_Out_0, _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2);
            float _Split_0d31d5c6a74be68484498325bbfacd3c_R_1 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[0];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_G_2 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[1];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_B_3 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[2];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_A_4 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[3];
            float _Split_90237729226dca849687b6c56fde4cbe_R_1 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[0];
            float _Split_90237729226dca849687b6c56fde4cbe_G_2 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[1];
            float _Split_90237729226dca849687b6c56fde4cbe_B_3 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[2];
            float _Split_90237729226dca849687b6c56fde4cbe_A_4 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[3];
            float _Property_007771e9e06cc78b9844d01f8129c541_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0 = float2(_Property_007771e9e06cc78b9844d01f8129c541_Out_0, _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0);
            float _Remap_690ea2a75496a283a66513f691c4f9db_Out_3;
            Unity_Remap_float(_Split_90237729226dca849687b6c56fde4cbe_A_4, float2 (0, 1), _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3);
            float4 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4;
            float3 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5;
            float2 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6;
            Unity_Combine_float(_Split_0d31d5c6a74be68484498325bbfacd3c_R_1, _Split_0d31d5c6a74be68484498325bbfacd3c_G_2, _Split_0d31d5c6a74be68484498325bbfacd3c_B_3, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6);
            float _Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_89bda93a711241049250cd3215f22c11_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0 = IN.uv0;
            float4 _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0 = SAMPLE_TEXTURE2D(_Property_89bda93a711241049250cd3215f22c11_Out_0.tex, _Property_89bda93a711241049250cd3215f22c11_Out_0.samplerstate, _Property_89bda93a711241049250cd3215f22c11_Out_0.GetTransformedUV((_UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0.xy)));
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_R_4 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.r;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_G_5 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.g;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_B_6 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.b;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_A_7 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.a;
            float _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0 = _CoverMaskPower;
            float _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_b8be215db546638398ea07060feb5224_A_7, _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0, _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2);
            float _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3;
            Unity_Clamp_float(_Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2, 0, 1, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3);
            float3 _Property_509761afcb3aad8f9a29405c122dbf08_Out_0 = _CoverDirection;
            UnityTexture2D _Property_72c615246e955087b85288c29905f048_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_72c615246e955087b85288c29905f048_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4);
            float _Property_7edd97bda70eb38a8c4253094700be37_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1.xyz), _Property_7edd97bda70eb38a8c4253094700be37_Out_0, _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2);
            UnityTexture2D _Property_6809577d1aa24984aa957e13d0574602_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_6809577d1aa24984aa957e13d0574602_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4);
            float _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1.xyz), _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0, _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_1276d06b2c028187bc5fb2018f7da110;
            float4 _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1);
            UnityTexture2D _Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4);
            float _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0, _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2);
            float3 _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, IN.WorldSpaceNormal, _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2);
            float _Split_e74c8f300b486e86a5700118b60b7885_R_1 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[0];
            float _Split_e74c8f300b486e86a5700118b60b7885_G_2 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[1];
            float _Split_e74c8f300b486e86a5700118b60b7885_B_3 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[2];
            float _Split_e74c8f300b486e86a5700118b60b7885_A_4 = 0;
            float _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2;
            Unity_Add_float(_Split_e74c8f300b486e86a5700118b60b7885_R_1, _Split_e74c8f300b486e86a5700118b60b7885_G_2, _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2);
            float _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2;
            Unity_Add_float(_Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2, _Split_e74c8f300b486e86a5700118b60b7885_B_3, _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2);
            float _Property_ca7cc2d889a56683904c7546a72cedbf_Out_0 = _Cover_Amount;
            float _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2;
            Unity_Subtract_float(4, _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2);
            float _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2;
            Unity_Divide_float(_Property_ca7cc2d889a56683904c7546a72cedbf_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2);
            float _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1;
            Unity_Absolute_float(_Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2, _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1);
            float _Power_681b2745dbae62839624b98240ca04f7_Out_2;
            Unity_Power_float(_Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Power_681b2745dbae62839624b98240ca04f7_Out_2);
            float _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3;
            Unity_Clamp_float(_Power_681b2745dbae62839624b98240ca04f7_Out_2, 0, 2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3);
            float _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2;
            Unity_Multiply_float_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2);
            float _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1;
            Unity_Saturate_float(_Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2, _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1);
            float _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3;
            Unity_Clamp_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, 0, 0.9999, _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3);
            float _Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0 = _Cover_Max_Angle;
            float _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2;
            Unity_Divide_float(_Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0, 45, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2);
            float _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1;
            Unity_OneMinus_float(_Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1);
            float _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2;
            Unity_Subtract_float(_Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1, _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2);
            float _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3;
            Unity_Clamp_float(_Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2, 0, 2, _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3);
            float _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2;
            Unity_Divide_float(1, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2);
            float _Multiply_749d76436ed5e58abec68ae130db866b_Out_2;
            Unity_Multiply_float_float(_Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2, _Multiply_749d76436ed5e58abec68ae130db866b_Out_2);
            float _Absolute_043a189b52847189ad0575955b41f403_Out_1;
            Unity_Absolute_float(_Multiply_749d76436ed5e58abec68ae130db866b_Out_2, _Absolute_043a189b52847189ad0575955b41f403_Out_1);
            float _Property_d4f4330ee4eced8d88fb074732401835_Out_0 = _CoverHardness;
            float _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2;
            Unity_Power_float(_Absolute_043a189b52847189ad0575955b41f403_Out_1, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2);
            float _Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0 = _Cover_Min_Height;
            float _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1;
            Unity_OneMinus_float(_Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0, _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1);
            float _Split_815418660959f184b10470e678ebae30_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_815418660959f184b10470e678ebae30_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_815418660959f184b10470e678ebae30_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_815418660959f184b10470e678ebae30_A_4 = 0;
            float _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2;
            Unity_Add_float(_OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1, _Split_815418660959f184b10470e678ebae30_G_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2);
            float _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, 1, _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2);
            float _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3;
            Unity_Clamp_float(_Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2, 0, 1, _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3);
            float _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0 = _Cover_Min_Height_Blending;
            float _Add_e57f70c02382b28397642f05af76cfb0_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0, _Add_e57f70c02382b28397642f05af76cfb0_Out_2);
            float _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2;
            Unity_Divide_float(_Add_e57f70c02382b28397642f05af76cfb0_Out_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2);
            float _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1;
            Unity_OneMinus_float(_Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2, _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1);
            float _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2;
            Unity_Add_float(_OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1, -0.5, _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2);
            float _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3;
            Unity_Clamp_float(_Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2, 0, 1, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3);
            float _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2;
            Unity_Add_float(_Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3, _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2);
            float _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3;
            Unity_Clamp_float(_Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2, 0, 1, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3);
            float _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2;
            Unity_Multiply_float_float(_Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2);
            float _Multiply_5336a32115eb29849650688fd99ee185_Out_2;
            Unity_Multiply_float_float(_Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_5336a32115eb29849650688fd99ee185_Out_2);
            float3 _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2, (_Multiply_5336a32115eb29849650688fd99ee185_Out_2.xxx), _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3);
            float3x3 Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1 = normalize(mul(Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent, _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3.xyz).xyz);
            float3 _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1, _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2);
            float _Split_b821124768adb688becbc5d63b26adb4_R_1 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[0];
            float _Split_b821124768adb688becbc5d63b26adb4_G_2 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[1];
            float _Split_b821124768adb688becbc5d63b26adb4_B_3 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[2];
            float _Split_b821124768adb688becbc5d63b26adb4_A_4 = 0;
            float _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2;
            Unity_Add_float(_Split_b821124768adb688becbc5d63b26adb4_R_1, _Split_b821124768adb688becbc5d63b26adb4_G_2, _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2);
            float _Add_508b788633abc0829f0843d1b1f942c2_Out_2;
            Unity_Add_float(_Add_fd43b427bfe3748cb0ced35df3b22159_Out_2, _Split_b821124768adb688becbc5d63b26adb4_B_3, _Add_508b788633abc0829f0843d1b1f942c2_Out_2);
            float _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2;
            Unity_Multiply_float_float(_Add_508b788633abc0829f0843d1b1f942c2_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2);
            float _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2;
            Unity_Multiply_float_float(_Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2);
            float _Multiply_b907f38702eabd80a6c67777243459de_Out_2;
            Unity_Multiply_float_float(_Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2);
            float _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2;
            Unity_Multiply_float_float(_Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2, _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2);
            UnityTexture2D _Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_9b6d5da081e434808a5840cbd915bb28;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4);
            float _Split_b20618c84cffd183aae7f27c2d0772cb_R_1 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[0];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_G_2 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[1];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_B_3 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[2];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_A_4 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[3];
            float _Property_987a8037965fff81a4930627358fc6e3_Out_0 = _CoverHeightMapMin;
            float _Property_89aeacdce0000086a98e45df79358a56_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_d18b9686bb8af48c85d99d319830c000_Out_0 = float2(_Property_987a8037965fff81a4930627358fc6e3_Out_0, _Property_89aeacdce0000086a98e45df79358a56_Out_0);
            float _Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0 = _CoverHeightMapOffset;
            float2 _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2;
            Unity_Add_float2(_Vector2_d18b9686bb8af48c85d99d319830c000_Out_0, (_Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0.xx), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2);
            float _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_B_3, float2 (0, 1), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3);
            float _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2;
            Unity_Multiply_float_float(_Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3, _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2);
            float _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2;
            Unity_Multiply_float_float(_Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2, _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2);
            float _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1;
            Unity_Saturate_float(_Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1);
            float _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2;
            Unity_Multiply_float_float(_Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2);
            float _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3;
            Unity_Branch_float(_Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3);
            float4 _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3;
            Unity_Lerp_float4(_HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxxx), _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3);
            float _Split_2d3577de3d626c8683c82ad2f5337a65_R_1 = IN.VertexColor[0];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_G_2 = IN.VertexColor[1];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_B_3 = IN.VertexColor[2];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_A_4 = IN.VertexColor[3];
            float _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_R_1, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1);
            float _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3;
            Unity_Lerp_float(0, _Split_866a663ed067f988862843fe32765ff8_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3);
            float _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2;
            Unity_Multiply_float_float(_Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3, _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0, _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2);
            float _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1;
            Unity_Absolute_float(_Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2, _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1);
            float _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2;
            Unity_Power_float(_Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1, _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0, _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2);
            float _Lerp_773fc936303dec838cfd7db23903de62_Out_3;
            Unity_Lerp_float(0, _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_773fc936303dec838cfd7db23903de62_Out_3);
            float _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2;
            Unity_Multiply_float_float(_Lerp_773fc936303dec838cfd7db23903de62_Out_3, _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0, _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2);
            float _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1;
            Unity_Absolute_float(_Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2, _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1);
            float _Property_013b523e19192f8593f2bcc154316b47_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_e5638390467fac89ae1f7b85fc93815b_Out_2;
            Unity_Power_float(_Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1, _Property_013b523e19192f8593f2bcc154316b47_Out_0, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2);
            float _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_B_3, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1);
            float _Lerp_594e5a2708dbe78894dc533303332962_Out_3;
            Unity_Lerp_float(_Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1, _Lerp_594e5a2708dbe78894dc533303332962_Out_3);
            float _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3;
            Unity_Lerp_float(0, _Split_b20618c84cffd183aae7f27c2d0772cb_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3);
            float _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_688d5e023afdea8f88054040203609ac_Out_2;
            Unity_Multiply_float_float(_Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3, _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0, _Multiply_688d5e023afdea8f88054040203609ac_Out_2);
            float _Absolute_b525073675d39a899115ebede3255a97_Out_1;
            Unity_Absolute_float(_Multiply_688d5e023afdea8f88054040203609ac_Out_2, _Absolute_b525073675d39a899115ebede3255a97_Out_1);
            float _Property_b14b960de7b30882a67b30cf91355226_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_fd909f27e3507185bcb862a17c2e116e_Out_2;
            Unity_Power_float(_Absolute_b525073675d39a899115ebede3255a97_Out_1, _Property_b14b960de7b30882a67b30cf91355226_Out_0, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2);
            float _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3;
            Unity_Lerp_float(_Lerp_594e5a2708dbe78894dc533303332962_Out_3, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3, _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3);
            float4 _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0, _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2);
            float4 _Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_0709d20641a7668b85ded82df467d4f4_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_0709d20641a7668b85ded82df467d4f4_Out_0, _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2);
            float3 _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3);
            float3 _Normalize_5840852513c50882be7896a398055011_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5840852513c50882be7896a398055011_Out_1);
            float _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2;
            Unity_DotProduct_float3(_Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3, _Normalize_5840852513c50882be7896a398055011_Out_1, _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2);
            float _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1;
            Unity_Saturate_float(_DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2, _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1);
            float _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1;
            Unity_OneMinus_float(_Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1, _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1);
            float _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1;
            Unity_Absolute_float(_OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1, _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1);
            float _Power_0f033f56feb0de89a9152324c9659e0a_Out_2;
            Unity_Power_float(_Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1, 10, _Power_0f033f56feb0de89a9152324c9659e0a_Out_2);
            float4 _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2;
            Unity_Multiply_float4_float4(_Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0, (_Power_0f033f56feb0de89a9152324c9659e0a_Out_2.xxxx), _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2);
            float _Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0 = _RimLightPower;
            float4 _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2;
            Unity_Multiply_float4_float4(_Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2, (_Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2);
            float4 _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2);
            float4 _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2;
            Unity_Add_float4(_Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2, _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2);
            float4 _Clamp_cb735681159425838b158a92c7e830b0_Out_3;
            Unity_Clamp_float4(_Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, float4(0, 0, 0, 0), _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, _Clamp_cb735681159425838b158a92c7e830b0_Out_3);
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_R_1 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[0];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_G_2 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[1];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_B_3 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[2];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[3];
            float _Property_57dab79b7e7fc28c99642ba557430a27_Out_0 = _BaseMetallic;
            float _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2;
            Unity_Multiply_float_float(_Split_866a663ed067f988862843fe32765ff8_R_1, _Property_57dab79b7e7fc28c99642ba557430a27_Out_0, _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2);
            float _Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0 = _BaseAORemapMin;
            float _Property_5a040fb62cd8888895d4f920c4036587_Out_0 = _BaseAORemapMax;
            float2 _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0 = float2(_Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0, _Property_5a040fb62cd8888895d4f920c4036587_Out_0);
            float _Remap_de2674403349aa85b1136d42692d26f9_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_G_2, float2 (0, 1), _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0, _Remap_de2674403349aa85b1136d42692d26f9_Out_3);
            float3 _Vector3_4c4100faab122d8da757a32364182844_Out_0 = float3(_Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2, _Remap_de2674403349aa85b1136d42692d26f9_Out_3, 0);
            float _Property_7cdf7bda907cf087942cd072e635a869_Out_0 = _Base2Metallic;
            float _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2;
            Unity_Multiply_float_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1, _Property_7cdf7bda907cf087942cd072e635a869_Out_0, _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2);
            float _Property_b334f6ce40e54186b9864b004fbe88d2_Out_0 = _Base2AORemapMin;
            float _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0 = _Base2AORemapMax;
            float2 _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0 = float2(_Property_b334f6ce40e54186b9864b004fbe88d2_Out_0, _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0);
            float _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2, float2 (0, 1), _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3);
            float3 _Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0 = float3(_Multiply_befa03f2838946858f28ac63a284b0f8_Out_2, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869;
            float4 _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_4c4100faab122d8da757a32364182844_Out_0, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1);
            float _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0 = _CoverMetallic;
            float _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2;
            Unity_Multiply_float_float(_Split_b20618c84cffd183aae7f27c2d0772cb_R_1, _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0, _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2);
            float _Property_e52744d22eaee787aba665b5a103092d_Out_0 = _CoverAORemapMin;
            float _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0 = _CoverAORemapMax;
            float2 _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0 = float2(_Property_e52744d22eaee787aba665b5a103092d_Out_0, _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0);
            float _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_G_2, float2 (0, 1), _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3);
            float3 _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0 = float3(_Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3, 0);
            float3 _Lerp_5d687668f4856180be26ec62834c6113_Out_3;
            Unity_Lerp_float3((_HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1.xyz), _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_5d687668f4856180be26ec62834c6113_Out_3);
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[0];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[1];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_B_3 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[2];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_A_4 = 0;
            surface.BaseColor = (_Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3.xyz);
            surface.Emission = (_Clamp_cb735681159425838b158a92c7e830b0_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4;
            surface.Occlusion = _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2;
            surface.NormalTS = _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            surface.Metallic = _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingForward.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "GBufferDXR"
            Tags
            {
                "LightMode" = "GBufferDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 ps5
        
            // Keywords
            #pragma multi_compile _ MINIMAL_GBUFFER
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_GBUFFER
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float4 _BaseTilingOffset;
        float _BaseTriplanarThreshold;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2TriplanarThreshold;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float3 _CoverDirection;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverTriplanarThreshold;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float _CoverEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float4 _RimColor;
        float _RimLightPower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Deferred/RaytracingIntersectonGBuffer.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/StandardLit/StandardLit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float4 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2));
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float4 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2));
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float4 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float4 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float4(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float4 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float4(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float4 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float4(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        YZ_3 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0;
        XY_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        struct Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2);
        float3 _Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float3 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float3_float3(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2;
        Unity_Multiply_float_float(_Split_6299d4ddcc4c74828aea40a46fdb896e_B_3, -1, _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2);
        float2 _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0 = float2(_Multiply_de711f4a4614bd89a463b53374cf4036_Out_2, 1);
        float2 _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2));
        _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0);
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float2 _Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0 = float2(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4, _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5);
        float2 _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2;
        Unity_Multiply_float2_float2(_Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0, _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2);
        float2 _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_b227c84042055e8faa1a9fdc69529707_Out_2;
        Unity_Add_float2(_Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2, _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0, _Add_b227c84042055e8faa1a9fdc69529707_Out_2);
        float _Split_2cfb9eacd8762483941459cdf28bda97_R_1 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[0];
        float _Split_2cfb9eacd8762483941459cdf28bda97_G_2 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[1];
        float _Split_2cfb9eacd8762483941459cdf28bda97_B_3 = 0;
        float _Split_2cfb9eacd8762483941459cdf28bda97_A_4 = 0;
        float _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0 = float3(_Split_2cfb9eacd8762483941459cdf28bda97_R_1, _Split_2cfb9eacd8762483941459cdf28bda97_G_2, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float3_float3(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_R_1, 1);
        float2 _Multiply_862402885a49f18cb87278ab53bc6744_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_862402885a49f18cb87278ab53bc6744_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_862402885a49f18cb87278ab53bc6744_Out_2));
        _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0);
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float _Multiply_4649b768be76d784a3284bacde795359_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Multiply_4649b768be76d784a3284bacde795359_Out_2);
        float2 _Vector2_819fcd5eb484438eacad1987576d7d67_Out_0 = float2(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4, _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5);
        float2 _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2;
        Unity_Multiply_float2_float2(_Vector2_819fcd5eb484438eacad1987576d7d67_Out_0, _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2);
        float2 _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2;
        Unity_Add_float2(_Multiply_58530ebb3c6d798b93686a76247bf505_Out_2, _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0, _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2);
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[0];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[1];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_B_3 = 0;
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_A_4 = 0;
        float3 _Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0 = float3(_Multiply_4649b768be76d784a3284bacde795359_Out_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1);
        float3 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float3_float3(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float3 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float3(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float3 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float3(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float3 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float3(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        float3x3 Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1 = TransformWorldToTangent(_Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2.xyz, Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World);
        float3 _Normalize_15ef346824db0a8797631ed8b998e673_Out_1;
        Unity_Normalize_float3(_Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1, _Normalize_15ef346824db0a8797631ed8b998e673_Out_1);
        XYZ_1 = (float4(_Normalize_15ef346824db0a8797631ed8b998e673_Out_1, 1.0));
        XZ_2 = (float4(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, 1.0));
        YZ_3 = (float4(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, 1.0));
        XY_4 = (float4(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_d92b1410e1d6bc81a86076b09e35f302_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_d4a357b2daff5587ae46468726a33797_Out_0 = _BaseTilingOffset;
            float4 _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_d4a357b2daff5587ae46468726a33797_Out_0, _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2);
            float _Property_b168be530d5b4082a2816fc835b55e19_Out_0 = _BaseTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_d92b1410e1d6bc81a86076b09e35f302_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4);
            float4 _Property_17f0f1bec4ec6485881127275660d4f1_Out_0 = _BaseColor;
            float4 _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _Property_17f0f1bec4ec6485881127275660d4f1_Out_0, _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2);
            float _Split_473d9bf097327483847264a7cc5c61f9_R_1 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[0];
            float _Split_473d9bf097327483847264a7cc5c61f9_G_2 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[1];
            float _Split_473d9bf097327483847264a7cc5c61f9_B_3 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[2];
            float _Split_473d9bf097327483847264a7cc5c61f9_A_4 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[3];
            float _Split_2ffd394bfe87c786b791f90b404c032d_R_1 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[0];
            float _Split_2ffd394bfe87c786b791f90b404c032d_G_2 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[1];
            float _Split_2ffd394bfe87c786b791f90b404c032d_B_3 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[2];
            float _Split_2ffd394bfe87c786b791f90b404c032d_A_4 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[3];
            float _Property_a1b1d767544de781a39d6415872f7285_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0 = float2(_Property_a1b1d767544de781a39d6415872f7285_Out_0, _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0);
            float _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3;
            Unity_Remap_float(_Split_2ffd394bfe87c786b791f90b404c032d_A_4, float2 (0, 1), _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3);
            float4 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4;
            float3 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5;
            float2 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6;
            Unity_Combine_float(_Split_473d9bf097327483847264a7cc5c61f9_R_1, _Split_473d9bf097327483847264a7cc5c61f9_G_2, _Split_473d9bf097327483847264a7cc5c61f9_B_3, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6);
            UnityTexture2D _Property_080b6cb46abb00848263c964726eac36_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_080b6cb46abb00848263c964726eac36_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4);
            float _Split_866a663ed067f988862843fe32765ff8_R_1 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[0];
            float _Split_866a663ed067f988862843fe32765ff8_G_2 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[1];
            float _Split_866a663ed067f988862843fe32765ff8_B_3 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[2];
            float _Split_866a663ed067f988862843fe32765ff8_A_4 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[3];
            float _Property_3b9891099f2f3e84b765eb453f6f6810_Out_0 = _HeightMin;
            float _Property_bde21360babd9089a90a45cd2843925b_Out_0 = _HeightMax;
            float2 _Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0 = float2(_Property_3b9891099f2f3e84b765eb453f6f6810_Out_0, _Property_bde21360babd9089a90a45cd2843925b_Out_0);
            float _Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0 = _HeightOffset;
            float2 _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2;
            Unity_Add_float2(_Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0, (_Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0.xx), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2);
            float _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_B_3, float2 (0, 1), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3);
            UnityTexture2D _Property_11586ef261ce8e87953046ff84ce22ab_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_221c724b2137d58c8c387fee5b48be14_Out_0 = _Base2TilingOffset;
            float4 _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_221c724b2137d58c8c387fee5b48be14_Out_0, _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2);
            float _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0 = _Base2TriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_ca3aaaec266f85859b75e37163da7cba;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_11586ef261ce8e87953046ff84ce22ab_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4);
            float4 _Property_60dff9cc4310ea89874789591a78d84b_Out_0 = _Base2Color;
            float4 _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _Property_60dff9cc4310ea89874789591a78d84b_Out_0, _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2);
            float _Split_96d66d11efd8418aa95cffd04b788c51_R_1 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[0];
            float _Split_96d66d11efd8418aa95cffd04b788c51_G_2 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[1];
            float _Split_96d66d11efd8418aa95cffd04b788c51_B_3 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[2];
            float _Split_96d66d11efd8418aa95cffd04b788c51_A_4 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[3];
            float _Split_837cde6fde77238baac188382335775d_R_1 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[0];
            float _Split_837cde6fde77238baac188382335775d_G_2 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[1];
            float _Split_837cde6fde77238baac188382335775d_B_3 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[2];
            float _Split_837cde6fde77238baac188382335775d_A_4 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[3];
            float _Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0 = float2(_Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0, _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0);
            float _Remap_697b96439d3a0983800a051b2b4edd90_Out_3;
            Unity_Remap_float(_Split_837cde6fde77238baac188382335775d_A_4, float2 (0, 1), _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3);
            float4 _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4;
            float3 _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5;
            float2 _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6;
            Unity_Combine_float(_Split_96d66d11efd8418aa95cffd04b788c51_R_1, _Split_96d66d11efd8418aa95cffd04b788c51_G_2, _Split_96d66d11efd8418aa95cffd04b788c51_B_3, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5, _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6);
            float _Property_312b653a29ccc087849b1493611fb73c_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.tex, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.samplerstate, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.r;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_G_5 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.g;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_B_6 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.b;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_A_7 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.a;
            float _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1);
            float _Branch_6b7615e16629338ba87d3570a0096f66_Out_3;
            Unity_Branch_float(_Property_312b653a29ccc087849b1493611fb73c_Out_0, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1, _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _Branch_6b7615e16629338ba87d3570a0096f66_Out_3);
            UnityTexture2D _Property_b4749c77856157858fffde0aed55fc74_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_b4749c77856157858fffde0aed55fc74_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4);
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[0];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[1];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[2];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[3];
            float _Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0 = _HeightMin2;
            float _Property_145222f375008a879315637be0f172c5_Out_0 = _HeightMax2;
            float2 _Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0 = float2(_Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0, _Property_145222f375008a879315637be0f172c5_Out_0);
            float _Property_8be924d801daee88b294af592a560e75_Out_0 = _HeightOffset2;
            float2 _Add_37703f1eb9ce078daaedca833705f5dd_Out_2;
            Unity_Add_float2(_Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0, (_Property_8be924d801daee88b294af592a560e75_Out_0.xx), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2);
            float _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3, float2 (0, 1), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3);
            float _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2;
            Unity_Multiply_float_float(_Branch_6b7615e16629338ba87d3570a0096f66_Out_3, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3, _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2);
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_R_1 = IN.VertexColor[0];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2 = IN.VertexColor[1];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3 = IN.VertexColor[2];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_A_4 = IN.VertexColor[3];
            float _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2;
            Unity_Multiply_float_float(_Multiply_d9f42ca072d9188ab2566400157a199f_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2);
            float _Property_c0dc9341fd635288a1c2869945617704_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5;
            float4 _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1);
            UnityTexture2D _Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_9bedb34aba10fa89a5f5b18919971491_Out_0 = _CoverTilingOffset;
            float4 _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_9bedb34aba10fa89a5f5b18919971491_Out_0, _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2);
            float _Property_bf361924f27f848994241bda91fc2005_Out_0 = _CoverTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4);
            float4 _Property_19547f2fe562798683b730e775cbfb39_Out_0 = _CoverBaseColor;
            float4 _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _Property_19547f2fe562798683b730e775cbfb39_Out_0, _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2);
            float _Split_0d31d5c6a74be68484498325bbfacd3c_R_1 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[0];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_G_2 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[1];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_B_3 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[2];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_A_4 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[3];
            float _Split_90237729226dca849687b6c56fde4cbe_R_1 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[0];
            float _Split_90237729226dca849687b6c56fde4cbe_G_2 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[1];
            float _Split_90237729226dca849687b6c56fde4cbe_B_3 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[2];
            float _Split_90237729226dca849687b6c56fde4cbe_A_4 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[3];
            float _Property_007771e9e06cc78b9844d01f8129c541_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0 = float2(_Property_007771e9e06cc78b9844d01f8129c541_Out_0, _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0);
            float _Remap_690ea2a75496a283a66513f691c4f9db_Out_3;
            Unity_Remap_float(_Split_90237729226dca849687b6c56fde4cbe_A_4, float2 (0, 1), _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3);
            float4 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4;
            float3 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5;
            float2 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6;
            Unity_Combine_float(_Split_0d31d5c6a74be68484498325bbfacd3c_R_1, _Split_0d31d5c6a74be68484498325bbfacd3c_G_2, _Split_0d31d5c6a74be68484498325bbfacd3c_B_3, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6);
            float _Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_89bda93a711241049250cd3215f22c11_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0 = IN.uv0;
            float4 _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0 = SAMPLE_TEXTURE2D(_Property_89bda93a711241049250cd3215f22c11_Out_0.tex, _Property_89bda93a711241049250cd3215f22c11_Out_0.samplerstate, _Property_89bda93a711241049250cd3215f22c11_Out_0.GetTransformedUV((_UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0.xy)));
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_R_4 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.r;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_G_5 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.g;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_B_6 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.b;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_A_7 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.a;
            float _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0 = _CoverMaskPower;
            float _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_b8be215db546638398ea07060feb5224_A_7, _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0, _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2);
            float _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3;
            Unity_Clamp_float(_Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2, 0, 1, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3);
            float3 _Property_509761afcb3aad8f9a29405c122dbf08_Out_0 = _CoverDirection;
            UnityTexture2D _Property_72c615246e955087b85288c29905f048_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_72c615246e955087b85288c29905f048_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4);
            float _Property_7edd97bda70eb38a8c4253094700be37_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1.xyz), _Property_7edd97bda70eb38a8c4253094700be37_Out_0, _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2);
            UnityTexture2D _Property_6809577d1aa24984aa957e13d0574602_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_6809577d1aa24984aa957e13d0574602_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4);
            float _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1.xyz), _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0, _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_1276d06b2c028187bc5fb2018f7da110;
            float4 _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1);
            UnityTexture2D _Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4);
            float _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0, _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2);
            float3 _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, IN.WorldSpaceNormal, _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2);
            float _Split_e74c8f300b486e86a5700118b60b7885_R_1 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[0];
            float _Split_e74c8f300b486e86a5700118b60b7885_G_2 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[1];
            float _Split_e74c8f300b486e86a5700118b60b7885_B_3 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[2];
            float _Split_e74c8f300b486e86a5700118b60b7885_A_4 = 0;
            float _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2;
            Unity_Add_float(_Split_e74c8f300b486e86a5700118b60b7885_R_1, _Split_e74c8f300b486e86a5700118b60b7885_G_2, _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2);
            float _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2;
            Unity_Add_float(_Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2, _Split_e74c8f300b486e86a5700118b60b7885_B_3, _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2);
            float _Property_ca7cc2d889a56683904c7546a72cedbf_Out_0 = _Cover_Amount;
            float _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2;
            Unity_Subtract_float(4, _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2);
            float _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2;
            Unity_Divide_float(_Property_ca7cc2d889a56683904c7546a72cedbf_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2);
            float _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1;
            Unity_Absolute_float(_Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2, _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1);
            float _Power_681b2745dbae62839624b98240ca04f7_Out_2;
            Unity_Power_float(_Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Power_681b2745dbae62839624b98240ca04f7_Out_2);
            float _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3;
            Unity_Clamp_float(_Power_681b2745dbae62839624b98240ca04f7_Out_2, 0, 2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3);
            float _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2;
            Unity_Multiply_float_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2);
            float _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1;
            Unity_Saturate_float(_Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2, _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1);
            float _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3;
            Unity_Clamp_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, 0, 0.9999, _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3);
            float _Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0 = _Cover_Max_Angle;
            float _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2;
            Unity_Divide_float(_Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0, 45, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2);
            float _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1;
            Unity_OneMinus_float(_Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1);
            float _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2;
            Unity_Subtract_float(_Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1, _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2);
            float _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3;
            Unity_Clamp_float(_Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2, 0, 2, _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3);
            float _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2;
            Unity_Divide_float(1, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2);
            float _Multiply_749d76436ed5e58abec68ae130db866b_Out_2;
            Unity_Multiply_float_float(_Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2, _Multiply_749d76436ed5e58abec68ae130db866b_Out_2);
            float _Absolute_043a189b52847189ad0575955b41f403_Out_1;
            Unity_Absolute_float(_Multiply_749d76436ed5e58abec68ae130db866b_Out_2, _Absolute_043a189b52847189ad0575955b41f403_Out_1);
            float _Property_d4f4330ee4eced8d88fb074732401835_Out_0 = _CoverHardness;
            float _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2;
            Unity_Power_float(_Absolute_043a189b52847189ad0575955b41f403_Out_1, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2);
            float _Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0 = _Cover_Min_Height;
            float _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1;
            Unity_OneMinus_float(_Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0, _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1);
            float _Split_815418660959f184b10470e678ebae30_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_815418660959f184b10470e678ebae30_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_815418660959f184b10470e678ebae30_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_815418660959f184b10470e678ebae30_A_4 = 0;
            float _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2;
            Unity_Add_float(_OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1, _Split_815418660959f184b10470e678ebae30_G_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2);
            float _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, 1, _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2);
            float _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3;
            Unity_Clamp_float(_Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2, 0, 1, _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3);
            float _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0 = _Cover_Min_Height_Blending;
            float _Add_e57f70c02382b28397642f05af76cfb0_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0, _Add_e57f70c02382b28397642f05af76cfb0_Out_2);
            float _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2;
            Unity_Divide_float(_Add_e57f70c02382b28397642f05af76cfb0_Out_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2);
            float _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1;
            Unity_OneMinus_float(_Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2, _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1);
            float _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2;
            Unity_Add_float(_OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1, -0.5, _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2);
            float _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3;
            Unity_Clamp_float(_Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2, 0, 1, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3);
            float _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2;
            Unity_Add_float(_Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3, _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2);
            float _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3;
            Unity_Clamp_float(_Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2, 0, 1, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3);
            float _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2;
            Unity_Multiply_float_float(_Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2);
            float _Multiply_5336a32115eb29849650688fd99ee185_Out_2;
            Unity_Multiply_float_float(_Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_5336a32115eb29849650688fd99ee185_Out_2);
            float3 _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2, (_Multiply_5336a32115eb29849650688fd99ee185_Out_2.xxx), _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3);
            float3x3 Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1 = normalize(mul(Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent, _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3.xyz).xyz);
            float3 _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1, _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2);
            float _Split_b821124768adb688becbc5d63b26adb4_R_1 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[0];
            float _Split_b821124768adb688becbc5d63b26adb4_G_2 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[1];
            float _Split_b821124768adb688becbc5d63b26adb4_B_3 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[2];
            float _Split_b821124768adb688becbc5d63b26adb4_A_4 = 0;
            float _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2;
            Unity_Add_float(_Split_b821124768adb688becbc5d63b26adb4_R_1, _Split_b821124768adb688becbc5d63b26adb4_G_2, _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2);
            float _Add_508b788633abc0829f0843d1b1f942c2_Out_2;
            Unity_Add_float(_Add_fd43b427bfe3748cb0ced35df3b22159_Out_2, _Split_b821124768adb688becbc5d63b26adb4_B_3, _Add_508b788633abc0829f0843d1b1f942c2_Out_2);
            float _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2;
            Unity_Multiply_float_float(_Add_508b788633abc0829f0843d1b1f942c2_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2);
            float _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2;
            Unity_Multiply_float_float(_Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2);
            float _Multiply_b907f38702eabd80a6c67777243459de_Out_2;
            Unity_Multiply_float_float(_Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2);
            float _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2;
            Unity_Multiply_float_float(_Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2, _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2);
            UnityTexture2D _Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_9b6d5da081e434808a5840cbd915bb28;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4);
            float _Split_b20618c84cffd183aae7f27c2d0772cb_R_1 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[0];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_G_2 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[1];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_B_3 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[2];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_A_4 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[3];
            float _Property_987a8037965fff81a4930627358fc6e3_Out_0 = _CoverHeightMapMin;
            float _Property_89aeacdce0000086a98e45df79358a56_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_d18b9686bb8af48c85d99d319830c000_Out_0 = float2(_Property_987a8037965fff81a4930627358fc6e3_Out_0, _Property_89aeacdce0000086a98e45df79358a56_Out_0);
            float _Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0 = _CoverHeightMapOffset;
            float2 _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2;
            Unity_Add_float2(_Vector2_d18b9686bb8af48c85d99d319830c000_Out_0, (_Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0.xx), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2);
            float _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_B_3, float2 (0, 1), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3);
            float _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2;
            Unity_Multiply_float_float(_Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3, _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2);
            float _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2;
            Unity_Multiply_float_float(_Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2, _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2);
            float _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1;
            Unity_Saturate_float(_Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1);
            float _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2;
            Unity_Multiply_float_float(_Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2);
            float _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3;
            Unity_Branch_float(_Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3);
            float4 _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3;
            Unity_Lerp_float4(_HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxxx), _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3);
            float _Split_2d3577de3d626c8683c82ad2f5337a65_R_1 = IN.VertexColor[0];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_G_2 = IN.VertexColor[1];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_B_3 = IN.VertexColor[2];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_A_4 = IN.VertexColor[3];
            float _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_R_1, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1);
            float _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3;
            Unity_Lerp_float(0, _Split_866a663ed067f988862843fe32765ff8_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3);
            float _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2;
            Unity_Multiply_float_float(_Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3, _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0, _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2);
            float _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1;
            Unity_Absolute_float(_Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2, _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1);
            float _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2;
            Unity_Power_float(_Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1, _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0, _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2);
            float _Lerp_773fc936303dec838cfd7db23903de62_Out_3;
            Unity_Lerp_float(0, _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_773fc936303dec838cfd7db23903de62_Out_3);
            float _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2;
            Unity_Multiply_float_float(_Lerp_773fc936303dec838cfd7db23903de62_Out_3, _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0, _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2);
            float _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1;
            Unity_Absolute_float(_Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2, _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1);
            float _Property_013b523e19192f8593f2bcc154316b47_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_e5638390467fac89ae1f7b85fc93815b_Out_2;
            Unity_Power_float(_Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1, _Property_013b523e19192f8593f2bcc154316b47_Out_0, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2);
            float _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_B_3, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1);
            float _Lerp_594e5a2708dbe78894dc533303332962_Out_3;
            Unity_Lerp_float(_Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1, _Lerp_594e5a2708dbe78894dc533303332962_Out_3);
            float _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3;
            Unity_Lerp_float(0, _Split_b20618c84cffd183aae7f27c2d0772cb_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3);
            float _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_688d5e023afdea8f88054040203609ac_Out_2;
            Unity_Multiply_float_float(_Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3, _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0, _Multiply_688d5e023afdea8f88054040203609ac_Out_2);
            float _Absolute_b525073675d39a899115ebede3255a97_Out_1;
            Unity_Absolute_float(_Multiply_688d5e023afdea8f88054040203609ac_Out_2, _Absolute_b525073675d39a899115ebede3255a97_Out_1);
            float _Property_b14b960de7b30882a67b30cf91355226_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_fd909f27e3507185bcb862a17c2e116e_Out_2;
            Unity_Power_float(_Absolute_b525073675d39a899115ebede3255a97_Out_1, _Property_b14b960de7b30882a67b30cf91355226_Out_0, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2);
            float _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3;
            Unity_Lerp_float(_Lerp_594e5a2708dbe78894dc533303332962_Out_3, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3, _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3);
            float4 _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0, _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2);
            float4 _Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_0709d20641a7668b85ded82df467d4f4_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_0709d20641a7668b85ded82df467d4f4_Out_0, _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2);
            float3 _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3);
            float3 _Normalize_5840852513c50882be7896a398055011_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5840852513c50882be7896a398055011_Out_1);
            float _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2;
            Unity_DotProduct_float3(_Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3, _Normalize_5840852513c50882be7896a398055011_Out_1, _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2);
            float _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1;
            Unity_Saturate_float(_DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2, _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1);
            float _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1;
            Unity_OneMinus_float(_Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1, _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1);
            float _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1;
            Unity_Absolute_float(_OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1, _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1);
            float _Power_0f033f56feb0de89a9152324c9659e0a_Out_2;
            Unity_Power_float(_Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1, 10, _Power_0f033f56feb0de89a9152324c9659e0a_Out_2);
            float4 _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2;
            Unity_Multiply_float4_float4(_Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0, (_Power_0f033f56feb0de89a9152324c9659e0a_Out_2.xxxx), _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2);
            float _Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0 = _RimLightPower;
            float4 _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2;
            Unity_Multiply_float4_float4(_Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2, (_Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2);
            float4 _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2);
            float4 _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2;
            Unity_Add_float4(_Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2, _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2);
            float4 _Clamp_cb735681159425838b158a92c7e830b0_Out_3;
            Unity_Clamp_float4(_Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, float4(0, 0, 0, 0), _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, _Clamp_cb735681159425838b158a92c7e830b0_Out_3);
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_R_1 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[0];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_G_2 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[1];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_B_3 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[2];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[3];
            float _Property_57dab79b7e7fc28c99642ba557430a27_Out_0 = _BaseMetallic;
            float _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2;
            Unity_Multiply_float_float(_Split_866a663ed067f988862843fe32765ff8_R_1, _Property_57dab79b7e7fc28c99642ba557430a27_Out_0, _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2);
            float _Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0 = _BaseAORemapMin;
            float _Property_5a040fb62cd8888895d4f920c4036587_Out_0 = _BaseAORemapMax;
            float2 _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0 = float2(_Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0, _Property_5a040fb62cd8888895d4f920c4036587_Out_0);
            float _Remap_de2674403349aa85b1136d42692d26f9_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_G_2, float2 (0, 1), _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0, _Remap_de2674403349aa85b1136d42692d26f9_Out_3);
            float3 _Vector3_4c4100faab122d8da757a32364182844_Out_0 = float3(_Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2, _Remap_de2674403349aa85b1136d42692d26f9_Out_3, 0);
            float _Property_7cdf7bda907cf087942cd072e635a869_Out_0 = _Base2Metallic;
            float _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2;
            Unity_Multiply_float_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1, _Property_7cdf7bda907cf087942cd072e635a869_Out_0, _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2);
            float _Property_b334f6ce40e54186b9864b004fbe88d2_Out_0 = _Base2AORemapMin;
            float _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0 = _Base2AORemapMax;
            float2 _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0 = float2(_Property_b334f6ce40e54186b9864b004fbe88d2_Out_0, _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0);
            float _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2, float2 (0, 1), _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3);
            float3 _Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0 = float3(_Multiply_befa03f2838946858f28ac63a284b0f8_Out_2, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869;
            float4 _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_4c4100faab122d8da757a32364182844_Out_0, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1);
            float _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0 = _CoverMetallic;
            float _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2;
            Unity_Multiply_float_float(_Split_b20618c84cffd183aae7f27c2d0772cb_R_1, _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0, _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2);
            float _Property_e52744d22eaee787aba665b5a103092d_Out_0 = _CoverAORemapMin;
            float _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0 = _CoverAORemapMax;
            float2 _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0 = float2(_Property_e52744d22eaee787aba665b5a103092d_Out_0, _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0);
            float _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_G_2, float2 (0, 1), _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3);
            float3 _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0 = float3(_Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3, 0);
            float3 _Lerp_5d687668f4856180be26ec62834c6113_Out_3;
            Unity_Lerp_float3((_HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1.xyz), _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_5d687668f4856180be26ec62834c6113_Out_3);
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[0];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[1];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_B_3 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[2];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_A_4 = 0;
            surface.BaseColor = (_Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3.xyz);
            surface.Emission = (_Clamp_cb735681159425838b158a92c7e830b0_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4;
            surface.Occlusion = _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2;
            surface.NormalTS = _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            surface.Metallic = _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingGBuffer.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "PathTracingDXR"
            Tags
            {
                "LightMode" = "PathTracingDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 ps5
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
        
        
        
            #define SHADERPASS SHADERPASS_PATH_TRACING
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define HAS_LIGHTLOOP 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float4 _BaseTilingOffset;
        float _BaseTriplanarThreshold;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2TriplanarThreshold;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float3 _CoverDirection;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverTriplanarThreshold;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _LavaEmissionColor;
        float _BaseEmissionMaskIntensivity;
        float _BaseEmissionMaskTreshold;
        float _Base2EmissionMaskIntensivity;
        float _Base2EmissionMaskTreshold;
        float _CoverEmissionMaskTreshold;
        float _CoverEmissionMaskIntensivity;
        float4 _RimColor;
        float _RimLightPower;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitPathTracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float4 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2));
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float4 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2));
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float4 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float4_float4(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float4 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float4(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float4 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float4(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float4 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float4(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        YZ_3 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0;
        XY_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        struct Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float4 Vector4_1D82816B, float Vector1_DA0A37FA, float4 Vector4_391AF460, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float4 OutVector4_1)
        {
        float4 _Property_27d472ec75203d83af5530ea2059db21_Out_0 = Vector4_1D82816B;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float4 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float4_float4(_Property_27d472ec75203d83af5530ea2059db21_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float4 _Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0 = Vector4_391AF460;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float4 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float4_float4(_Property_4bfd7f8d9b26e58583665745a21b7ed4_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float4 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float4(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float4 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float4(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        struct Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(UnityTexture2D Texture2D_80A3D28F, float Vector1_41461AC9, float Vector1_E4D1C13A, Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float IN, out float4 XYZ_1, out float4 XZ_2, out float4 YZ_3, out float4 XY_4)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float _Property_47988ec10c0c18879d461e00bed806e7_Out_0 = Vector1_41461AC9;
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2);
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_a87753ad90594382bf3a3a95abbadbc8_Out_2));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2);
        float3 _Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_e4fe778b81456d819c52bb414cd95968_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float3 _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float3_float3(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2.xxx), _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float4 _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2;
        Unity_Multiply_float4_float4(_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_138240d0d4846e87b0febabec0d6891b_Out_2);
        float _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2;
        Unity_Multiply_float_float(_Split_6299d4ddcc4c74828aea40a46fdb896e_B_3, -1, _Multiply_de711f4a4614bd89a463b53374cf4036_Out_2);
        float2 _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0 = float2(_Multiply_de711f4a4614bd89a463b53374cf4036_Out_2, 1);
        float2 _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2;
        Unity_Multiply_float2_float2((_Multiply_138240d0d4846e87b0febabec0d6891b_Out_2.xy), _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2);
        float4 _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_2af6058cc6ccb88caefd2799bb5941e8_Out_2));
        _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0);
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.r;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.g;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.b;
        float _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_A_7 = _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_RGBA_0.a;
        float2 _Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0 = float2(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_R_4, _SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_G_5);
        float2 _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2;
        Unity_Multiply_float2_float2(_Vector2_fe9aedd4528c7486ada4abdca0b0944e_Out_0, _Vector2_4ed33f0c73b2698fa6f3c1b77fe76808_Out_0, _Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2);
        float2 _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_b227c84042055e8faa1a9fdc69529707_Out_2;
        Unity_Add_float2(_Multiply_02b9b4665ad9918d8721bcaddc82f06f_Out_2, _Vector2_a74a85274da15181abb63cc5e8df0de1_Out_0, _Add_b227c84042055e8faa1a9fdc69529707_Out_2);
        float _Split_2cfb9eacd8762483941459cdf28bda97_R_1 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[0];
        float _Split_2cfb9eacd8762483941459cdf28bda97_G_2 = _Add_b227c84042055e8faa1a9fdc69529707_Out_2[1];
        float _Split_2cfb9eacd8762483941459cdf28bda97_B_3 = 0;
        float _Split_2cfb9eacd8762483941459cdf28bda97_A_4 = 0;
        float _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_ba083a478bc22280af2e2cc93ffd5027_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0 = float3(_Split_2cfb9eacd8762483941459cdf28bda97_R_1, _Split_2cfb9eacd8762483941459cdf28bda97_G_2, _Multiply_1d65ce08ce672087879125f2e13c4004_Out_2);
        float3 _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float3_float3(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3.xxx), _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float4 _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2;
        Unity_Multiply_float4_float4(_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, (_Property_47988ec10c0c18879d461e00bed806e7_Out_0.xxxx), _Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2);
        float2 _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_R_1, 1);
        float2 _Multiply_862402885a49f18cb87278ab53bc6744_Out_2;
        Unity_Multiply_float2_float2((_Multiply_2c0864423b014f8b8af8523f68cbb63c_Out_2.xy), _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_862402885a49f18cb87278ab53bc6744_Out_2);
        float4 _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8).samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Multiply_862402885a49f18cb87278ab53bc6744_Out_2));
        _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0);
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.r;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.g;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.b;
        float _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_A_7 = _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_RGBA_0.a;
        float _Multiply_4649b768be76d784a3284bacde795359_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Multiply_4649b768be76d784a3284bacde795359_Out_2);
        float2 _Vector2_819fcd5eb484438eacad1987576d7d67_Out_0 = float2(_SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_R_4, _SampleTexture2D_30c5fd692044ae87b9c4029fa46973fa_G_5);
        float2 _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2;
        Unity_Multiply_float2_float2(_Vector2_819fcd5eb484438eacad1987576d7d67_Out_0, _Vector2_a1e23e0f921b6484818f009a2b12a5ba_Out_0, _Multiply_58530ebb3c6d798b93686a76247bf505_Out_2);
        float2 _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2);
        float2 _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2;
        Unity_Add_float2(_Multiply_58530ebb3c6d798b93686a76247bf505_Out_2, _Vector2_e293c112b2f49e88a5fe46dfb1fbeb40_Out_0, _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2);
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[0];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2 = _Add_cf00fb232c6e2b8e973ab2f84453f55e_Out_2[1];
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_B_3 = 0;
        float _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_A_4 = 0;
        float3 _Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0 = float3(_Multiply_4649b768be76d784a3284bacde795359_Out_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_G_2, _Split_3ea3e61d32bdd78f82c686b75ff3fd9b_R_1);
        float3 _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float3_float3(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, (_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1.xxx), _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float3 _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float3(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float3 _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float3(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float3 _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float3(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, (_Add_e855069f047fae8ea9027d56acb61e56_Out_2.xxx), _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        float3x3 Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1 = TransformWorldToTangent(_Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2.xyz, Transform_73eecc0c3689d184a34c8d0f28a58adf_tangentTransform_World);
        float3 _Normalize_15ef346824db0a8797631ed8b998e673_Out_1;
        Unity_Normalize_float3(_Transform_73eecc0c3689d184a34c8d0f28a58adf_Out_1, _Normalize_15ef346824db0a8797631ed8b998e673_Out_1);
        XYZ_1 = (float4(_Normalize_15ef346824db0a8797631ed8b998e673_Out_1, 1.0));
        XZ_2 = (float4(_Vector3_08f62c5c01619e849f1a7d85a44531ac_Out_0, 1.0));
        YZ_3 = (float4(_Vector3_ba6cfb4671e8c58f9b41ea1dc23102ca_Out_0, 1.0));
        XY_4 = (float4(_Vector3_13a08d5940172a84a78ee3d9b8766833_Out_0, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_d92b1410e1d6bc81a86076b09e35f302_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_d4a357b2daff5587ae46468726a33797_Out_0 = _BaseTilingOffset;
            float4 _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_d4a357b2daff5587ae46468726a33797_Out_0, _Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2);
            float _Property_b168be530d5b4082a2816fc835b55e19_Out_0 = _BaseTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3;
            float4 _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_d92b1410e1d6bc81a86076b09e35f302_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XZ_2, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_YZ_3, _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XY_4);
            float4 _Property_17f0f1bec4ec6485881127275660d4f1_Out_0 = _BaseColor;
            float4 _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1, _Property_17f0f1bec4ec6485881127275660d4f1_Out_0, _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2);
            float _Split_473d9bf097327483847264a7cc5c61f9_R_1 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[0];
            float _Split_473d9bf097327483847264a7cc5c61f9_G_2 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[1];
            float _Split_473d9bf097327483847264a7cc5c61f9_B_3 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[2];
            float _Split_473d9bf097327483847264a7cc5c61f9_A_4 = _Multiply_6434c1e27d77608fb8dcec94697eb8d3_Out_2[3];
            float _Split_2ffd394bfe87c786b791f90b404c032d_R_1 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[0];
            float _Split_2ffd394bfe87c786b791f90b404c032d_G_2 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[1];
            float _Split_2ffd394bfe87c786b791f90b404c032d_B_3 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[2];
            float _Split_2ffd394bfe87c786b791f90b404c032d_A_4 = _TriplanarNM_2b9b27a1a1bba68194edddb5fe422579_XYZ_1[3];
            float _Property_a1b1d767544de781a39d6415872f7285_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0 = float2(_Property_a1b1d767544de781a39d6415872f7285_Out_0, _Property_a0fd73b9dac07285b1d70b54ca659a15_Out_0);
            float _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3;
            Unity_Remap_float(_Split_2ffd394bfe87c786b791f90b404c032d_A_4, float2 (0, 1), _Vector2_fc66e35bdc72f589a802edd7bfb7555b_Out_0, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3);
            float4 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4;
            float3 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5;
            float2 _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6;
            Unity_Combine_float(_Split_473d9bf097327483847264a7cc5c61f9_R_1, _Split_473d9bf097327483847264a7cc5c61f9_G_2, _Split_473d9bf097327483847264a7cc5c61f9_B_3, _Remap_0c05c4433df8c8898decaf8c2ca17cb2_Out_3, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGB_5, _Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RG_6);
            UnityTexture2D _Property_080b6cb46abb00848263c964726eac36_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3;
            float4 _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_080b6cb46abb00848263c964726eac36_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XZ_2, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_YZ_3, _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XY_4);
            float _Split_866a663ed067f988862843fe32765ff8_R_1 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[0];
            float _Split_866a663ed067f988862843fe32765ff8_G_2 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[1];
            float _Split_866a663ed067f988862843fe32765ff8_B_3 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[2];
            float _Split_866a663ed067f988862843fe32765ff8_A_4 = _TriplanarNM_26fef41c0b7e9a8489d2a70057ea5f5c_XYZ_1[3];
            float _Property_3b9891099f2f3e84b765eb453f6f6810_Out_0 = _HeightMin;
            float _Property_bde21360babd9089a90a45cd2843925b_Out_0 = _HeightMax;
            float2 _Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0 = float2(_Property_3b9891099f2f3e84b765eb453f6f6810_Out_0, _Property_bde21360babd9089a90a45cd2843925b_Out_0);
            float _Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0 = _HeightOffset;
            float2 _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2;
            Unity_Add_float2(_Vector2_9f8e90f51ffcfe8bb3d495766c0cabca_Out_0, (_Property_6ff6d72f7b1d0083b4e4ce61e7e7c8d3_Out_0.xx), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2);
            float _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_B_3, float2 (0, 1), _Add_39687f6bf7045086bc2d1ccf5f94c9de_Out_2, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3);
            UnityTexture2D _Property_11586ef261ce8e87953046ff84ce22ab_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_221c724b2137d58c8c387fee5b48be14_Out_0 = _Base2TilingOffset;
            float4 _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_221c724b2137d58c8c387fee5b48be14_Out_0, _Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2);
            float _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0 = _Base2TriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_ca3aaaec266f85859b75e37163da7cba;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_ca3aaaec266f85859b75e37163da7cba.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3;
            float4 _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_11586ef261ce8e87953046ff84ce22ab_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XZ_2, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_YZ_3, _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XY_4);
            float4 _Property_60dff9cc4310ea89874789591a78d84b_Out_0 = _Base2Color;
            float4 _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1, _Property_60dff9cc4310ea89874789591a78d84b_Out_0, _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2);
            float _Split_96d66d11efd8418aa95cffd04b788c51_R_1 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[0];
            float _Split_96d66d11efd8418aa95cffd04b788c51_G_2 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[1];
            float _Split_96d66d11efd8418aa95cffd04b788c51_B_3 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[2];
            float _Split_96d66d11efd8418aa95cffd04b788c51_A_4 = _Multiply_4d8e3ca1454e2d85963c9d240239a171_Out_2[3];
            float _Split_837cde6fde77238baac188382335775d_R_1 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[0];
            float _Split_837cde6fde77238baac188382335775d_G_2 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[1];
            float _Split_837cde6fde77238baac188382335775d_B_3 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[2];
            float _Split_837cde6fde77238baac188382335775d_A_4 = _TriplanarNM_ca3aaaec266f85859b75e37163da7cba_XYZ_1[3];
            float _Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0 = float2(_Property_a9807e270c8ae68db2a00b23b4aceb82_Out_0, _Property_0106a1baaa017b8d93c6d416dda17e61_Out_0);
            float _Remap_697b96439d3a0983800a051b2b4edd90_Out_3;
            Unity_Remap_float(_Split_837cde6fde77238baac188382335775d_A_4, float2 (0, 1), _Vector2_92da7adc0ff49f8cba8bafca74304dbd_Out_0, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3);
            float4 _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4;
            float3 _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5;
            float2 _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6;
            Unity_Combine_float(_Split_96d66d11efd8418aa95cffd04b788c51_R_1, _Split_96d66d11efd8418aa95cffd04b788c51_G_2, _Split_96d66d11efd8418aa95cffd04b788c51_B_3, _Remap_697b96439d3a0983800a051b2b4edd90_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Combine_365726e25f3c6587bc2cac1b7572931e_RGB_5, _Combine_365726e25f3c6587bc2cac1b7572931e_RG_6);
            float _Property_312b653a29ccc087849b1493611fb73c_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0 = SAMPLE_TEXTURE2D(_Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.tex, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.samplerstate, _Property_1004d4c014377e8c8fa291ed748b9f84_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.r;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_G_5 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.g;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_B_6 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.b;
            float _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_A_7 = _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_RGBA_0.a;
            float _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1);
            float _Branch_6b7615e16629338ba87d3570a0096f66_Out_3;
            Unity_Branch_float(_Property_312b653a29ccc087849b1493611fb73c_Out_0, _OneMinus_bc0b8885b596648d9b594130faa6585c_Out_1, _SampleTexture2D_c910b4b42510578d81c16169d3cb5727_R_4, _Branch_6b7615e16629338ba87d3570a0096f66_Out_3);
            UnityTexture2D _Property_b4749c77856157858fffde0aed55fc74_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3;
            float4 _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_b4749c77856157858fffde0aed55fc74_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XZ_2, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_YZ_3, _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XY_4);
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[0];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[1];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[2];
            float _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4 = _TriplanarNM_e1cbd521c1f2548db05840885a8dbe6b_XYZ_1[3];
            float _Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0 = _HeightMin2;
            float _Property_145222f375008a879315637be0f172c5_Out_0 = _HeightMax2;
            float2 _Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0 = float2(_Property_c1de6a6321562383bfac4b318fc7b0d3_Out_0, _Property_145222f375008a879315637be0f172c5_Out_0);
            float _Property_8be924d801daee88b294af592a560e75_Out_0 = _HeightOffset2;
            float2 _Add_37703f1eb9ce078daaedca833705f5dd_Out_2;
            Unity_Add_float2(_Vector2_416c3ee3a60cc686b2d2360a073acfad_Out_0, (_Property_8be924d801daee88b294af592a560e75_Out_0.xx), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2);
            float _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_B_3, float2 (0, 1), _Add_37703f1eb9ce078daaedca833705f5dd_Out_2, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3);
            float _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2;
            Unity_Multiply_float_float(_Branch_6b7615e16629338ba87d3570a0096f66_Out_3, _Remap_5a8467f2416dc98699682a4cf64a69aa_Out_3, _Multiply_d9f42ca072d9188ab2566400157a199f_Out_2);
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_R_1 = IN.VertexColor[0];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2 = IN.VertexColor[1];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3 = IN.VertexColor[2];
            float _Split_b4d08e724ec3df88ab7743c5b7a3f081_A_4 = IN.VertexColor[3];
            float _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2;
            Unity_Multiply_float_float(_Multiply_d9f42ca072d9188ab2566400157a199f_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_B_3, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2);
            float _Property_c0dc9341fd635288a1c2869945617704_Out_0 = _Height_Transition;
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5;
            float4 _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Combine_3fd4ebb76276a586a98cd7ec6a0634c2_RGBA_4, _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, _Combine_365726e25f3c6587bc2cac1b7572931e_RGBA_4, _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5, _HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1);
            UnityTexture2D _Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_9bedb34aba10fa89a5f5b18919971491_Out_0 = _CoverTilingOffset;
            float4 _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2;
            Unity_Divide_float4(float4(1, 1, 0, 0), _Property_9bedb34aba10fa89a5f5b18919971491_Out_0, _Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2);
            float _Property_bf361924f27f848994241bda91fc2005_Out_0 = _CoverTriplanarThreshold;
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3;
            float4 _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_0b7ec0ec463cd88c8269ef0d2c98eb85_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XZ_2, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_YZ_3, _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XY_4);
            float4 _Property_19547f2fe562798683b730e775cbfb39_Out_0 = _CoverBaseColor;
            float4 _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2;
            Unity_Multiply_float4_float4(_TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1, _Property_19547f2fe562798683b730e775cbfb39_Out_0, _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2);
            float _Split_0d31d5c6a74be68484498325bbfacd3c_R_1 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[0];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_G_2 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[1];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_B_3 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[2];
            float _Split_0d31d5c6a74be68484498325bbfacd3c_A_4 = _Multiply_0652b80f60f8ed84beea389318719c9a_Out_2[3];
            float _Split_90237729226dca849687b6c56fde4cbe_R_1 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[0];
            float _Split_90237729226dca849687b6c56fde4cbe_G_2 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[1];
            float _Split_90237729226dca849687b6c56fde4cbe_B_3 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[2];
            float _Split_90237729226dca849687b6c56fde4cbe_A_4 = _TriplanarNM_d7a0c444e17f6482b4a142cfc8438793_XYZ_1[3];
            float _Property_007771e9e06cc78b9844d01f8129c541_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0 = float2(_Property_007771e9e06cc78b9844d01f8129c541_Out_0, _Property_ce1117115fad1e85bdf2bbb84bd185cb_Out_0);
            float _Remap_690ea2a75496a283a66513f691c4f9db_Out_3;
            Unity_Remap_float(_Split_90237729226dca849687b6c56fde4cbe_A_4, float2 (0, 1), _Vector2_6ed3170e6a5acd8a8f702cd7a2af7737_Out_0, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3);
            float4 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4;
            float3 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5;
            float2 _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6;
            Unity_Combine_float(_Split_0d31d5c6a74be68484498325bbfacd3c_R_1, _Split_0d31d5c6a74be68484498325bbfacd3c_G_2, _Split_0d31d5c6a74be68484498325bbfacd3c_B_3, _Remap_690ea2a75496a283a66513f691c4f9db_Out_3, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGB_5, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RG_6);
            float _Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_89bda93a711241049250cd3215f22c11_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0 = IN.uv0;
            float4 _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0 = SAMPLE_TEXTURE2D(_Property_89bda93a711241049250cd3215f22c11_Out_0.tex, _Property_89bda93a711241049250cd3215f22c11_Out_0.samplerstate, _Property_89bda93a711241049250cd3215f22c11_Out_0.GetTransformedUV((_UV_13d53a8c036ded8490c69d17b7a3bb72_Out_0.xy)));
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_R_4 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.r;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_G_5 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.g;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_B_6 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.b;
            float _SampleTexture2D_b8be215db546638398ea07060feb5224_A_7 = _SampleTexture2D_b8be215db546638398ea07060feb5224_RGBA_0.a;
            float _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0 = _CoverMaskPower;
            float _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_b8be215db546638398ea07060feb5224_A_7, _Property_b3ce556358f99f80ae9037fb175f4c5f_Out_0, _Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2);
            float _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3;
            Unity_Clamp_float(_Multiply_ea35dd8ed2523f8b9a4c52fc52ecff0e_Out_2, 0, 1, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3);
            float3 _Property_509761afcb3aad8f9a29405c122dbf08_Out_0 = _CoverDirection;
            UnityTexture2D _Property_72c615246e955087b85288c29905f048_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3;
            float4 _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_72c615246e955087b85288c29905f048_Out_0, (_Divide_c703c79d4bf76e8c9848ea2ecd29211f_Out_2).x, _Property_b168be530d5b4082a2816fc835b55e19_Out_0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XZ_2, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_YZ_3, _TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XY_4);
            float _Property_7edd97bda70eb38a8c4253094700be37_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8dd9a87de3576e81ba1da2f170dd9cc0_XYZ_1.xyz), _Property_7edd97bda70eb38a8c4253094700be37_Out_0, _NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2);
            UnityTexture2D _Property_6809577d1aa24984aa957e13d0574602_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3;
            float4 _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_6809577d1aa24984aa957e13d0574602_Out_0, (_Divide_9f3f46254d5f7a8e87f60c4aa6f5522c_Out_2).x, _Property_20f6a96f64098d87b850c83bc45ddcee_Out_0, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XZ_2, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_YZ_3, _TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XY_4);
            float _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_8890d23c68a4598d85a048422a8f36fc_XYZ_1.xyz), _Property_c3260886a9a91b82a3d14c25e6fd0d2c_Out_0, _NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_1276d06b2c028187bc5fb2018f7da110;
            float4 _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_NormalStrength_8bafa3d69de37c818a39fccf03db9518_Out_2, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_NormalStrength_d049a259d0377180a2e5959b925a78bc_Out_2, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110, _HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1);
            UnityTexture2D _Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_TriplanarNMn_059da9746584140498cd018db3c76047_float _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceTangent = IN.WorldSpaceTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3;
            float4 _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4;
            SG_TriplanarNMn_059da9746584140498cd018db3c76047_float(_Property_1dcbde2a42b87e81bb254fd87a4816a5_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XZ_2, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_YZ_3, _TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XY_4);
            float _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_9176e0d3ea9ff88a9b888a200800b92d_Out_0, _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2);
            float3 _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, IN.WorldSpaceNormal, _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2);
            float _Split_e74c8f300b486e86a5700118b60b7885_R_1 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[0];
            float _Split_e74c8f300b486e86a5700118b60b7885_G_2 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[1];
            float _Split_e74c8f300b486e86a5700118b60b7885_B_3 = _Multiply_ea6008eef104198ca40a18608c76d5a4_Out_2[2];
            float _Split_e74c8f300b486e86a5700118b60b7885_A_4 = 0;
            float _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2;
            Unity_Add_float(_Split_e74c8f300b486e86a5700118b60b7885_R_1, _Split_e74c8f300b486e86a5700118b60b7885_G_2, _Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2);
            float _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2;
            Unity_Add_float(_Add_57be4f2ffc62ef89a9b736e6f1a99790_Out_2, _Split_e74c8f300b486e86a5700118b60b7885_B_3, _Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2);
            float _Property_ca7cc2d889a56683904c7546a72cedbf_Out_0 = _Cover_Amount;
            float _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2;
            Unity_Subtract_float(4, _Property_398a4ebc3d0302828e04c782fb4f49be_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2);
            float _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2;
            Unity_Divide_float(_Property_ca7cc2d889a56683904c7546a72cedbf_Out_0, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2);
            float _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1;
            Unity_Absolute_float(_Divide_58b01578ab8c8b858bb5e3a720366e16_Out_2, _Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1);
            float _Power_681b2745dbae62839624b98240ca04f7_Out_2;
            Unity_Power_float(_Absolute_a4d057707c029a85947bcf9de8128ee5_Out_1, _Subtract_9340fe9ac4518a8aa343888dc6143619_Out_2, _Power_681b2745dbae62839624b98240ca04f7_Out_2);
            float _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3;
            Unity_Clamp_float(_Power_681b2745dbae62839624b98240ca04f7_Out_2, 0, 2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3);
            float _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2;
            Unity_Multiply_float_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2);
            float _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1;
            Unity_Saturate_float(_Multiply_7632a3e8aed6d38e88c7f4b8e72f85dc_Out_2, _Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1);
            float _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3;
            Unity_Clamp_float(_Add_abe82f22f31b958eaf9f12f8db5f150d_Out_2, 0, 0.9999, _Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3);
            float _Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0 = _Cover_Max_Angle;
            float _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2;
            Unity_Divide_float(_Property_2df9fd6ca8ecaa828f0edb7582ef5616_Out_0, 45, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2);
            float _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1;
            Unity_OneMinus_float(_Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1);
            float _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2;
            Unity_Subtract_float(_Clamp_3b62dfdf4a729d8a9b33398bfdcff203_Out_3, _OneMinus_2d91255cf28d138db7f5edc0eed1ea86_Out_1, _Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2);
            float _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3;
            Unity_Clamp_float(_Subtract_2ae31a316a35bf8882b8de8d71b44b9f_Out_2, 0, 2, _Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3);
            float _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2;
            Unity_Divide_float(1, _Divide_1e9d5df33719338ca266a822ae3e1c73_Out_2, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2);
            float _Multiply_749d76436ed5e58abec68ae130db866b_Out_2;
            Unity_Multiply_float_float(_Clamp_a3af3696fa69dc8cb04a65e84a3c6c98_Out_3, _Divide_467a4be5b52daa80b2d4bf46d2f429c9_Out_2, _Multiply_749d76436ed5e58abec68ae130db866b_Out_2);
            float _Absolute_043a189b52847189ad0575955b41f403_Out_1;
            Unity_Absolute_float(_Multiply_749d76436ed5e58abec68ae130db866b_Out_2, _Absolute_043a189b52847189ad0575955b41f403_Out_1);
            float _Property_d4f4330ee4eced8d88fb074732401835_Out_0 = _CoverHardness;
            float _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2;
            Unity_Power_float(_Absolute_043a189b52847189ad0575955b41f403_Out_1, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2);
            float _Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0 = _Cover_Min_Height;
            float _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1;
            Unity_OneMinus_float(_Property_ecc3c7fdca2e938aa029cd0ff4fb9db6_Out_0, _OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1);
            float _Split_815418660959f184b10470e678ebae30_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_815418660959f184b10470e678ebae30_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_815418660959f184b10470e678ebae30_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_815418660959f184b10470e678ebae30_A_4 = 0;
            float _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2;
            Unity_Add_float(_OneMinus_6fb68ea250dfc28b97bc87b4872d90b2_Out_1, _Split_815418660959f184b10470e678ebae30_G_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2);
            float _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, 1, _Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2);
            float _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3;
            Unity_Clamp_float(_Add_9e2bffcd3cb38a83b04f8e67c5c96a06_Out_2, 0, 1, _Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3);
            float _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0 = _Cover_Min_Height_Blending;
            float _Add_e57f70c02382b28397642f05af76cfb0_Out_2;
            Unity_Add_float(_Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Property_6ec32fc8c4434e8b84cf41dd6b52dd34_Out_0, _Add_e57f70c02382b28397642f05af76cfb0_Out_2);
            float _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2;
            Unity_Divide_float(_Add_e57f70c02382b28397642f05af76cfb0_Out_2, _Add_9c527d082534a687b4f0de2b26f2d04d_Out_2, _Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2);
            float _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1;
            Unity_OneMinus_float(_Divide_94bc0a8d86daee888d2cd450fbf0d53e_Out_2, _OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1);
            float _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2;
            Unity_Add_float(_OneMinus_5447f70dbea44185b79c1ac1bb5ea4fa_Out_1, -0.5, _Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2);
            float _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3;
            Unity_Clamp_float(_Add_de674a5c5a1a348688c87f45d79cf9a1_Out_2, 0, 1, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3);
            float _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2;
            Unity_Add_float(_Clamp_0d06020cc00e3887b95a3ebd8edd196f_Out_3, _Clamp_3244d6500fdd2c8a92b20a9929d61642_Out_3, _Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2);
            float _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3;
            Unity_Clamp_float(_Add_ea368e3c8a99368d917c930eb07b8e9f_Out_2, 0, 1, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3);
            float _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2;
            Unity_Multiply_float_float(_Power_39a2971fc28ddc8e9f6d1423e692613d_Out_2, _Clamp_ce483c505aaa1f83b698a43bb22bf259_Out_3, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2);
            float _Multiply_5336a32115eb29849650688fd99ee185_Out_2;
            Unity_Multiply_float_float(_Saturate_0541c8e45c0d1e84acab0ae3a59218fa_Out_1, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_5336a32115eb29849650688fd99ee185_Out_2);
            float3 _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_51679ed1e0a0ef8aa01b53b035a4da51_Out_2, (_Multiply_5336a32115eb29849650688fd99ee185_Out_2.xxx), _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3);
            float3x3 Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1 = normalize(mul(Transform_9ae402175cd2148a9da0916d2d189ef9_transposeTangent, _Lerp_f5ea06dcb1a8c58bac1ae497649cf333_Out_3.xyz).xyz);
            float3 _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2;
            Unity_Multiply_float3_float3(_Property_509761afcb3aad8f9a29405c122dbf08_Out_0, _Transform_9ae402175cd2148a9da0916d2d189ef9_Out_1, _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2);
            float _Split_b821124768adb688becbc5d63b26adb4_R_1 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[0];
            float _Split_b821124768adb688becbc5d63b26adb4_G_2 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[1];
            float _Split_b821124768adb688becbc5d63b26adb4_B_3 = _Multiply_d902e15376a26b8eac35506e85f63b36_Out_2[2];
            float _Split_b821124768adb688becbc5d63b26adb4_A_4 = 0;
            float _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2;
            Unity_Add_float(_Split_b821124768adb688becbc5d63b26adb4_R_1, _Split_b821124768adb688becbc5d63b26adb4_G_2, _Add_fd43b427bfe3748cb0ced35df3b22159_Out_2);
            float _Add_508b788633abc0829f0843d1b1f942c2_Out_2;
            Unity_Add_float(_Add_fd43b427bfe3748cb0ced35df3b22159_Out_2, _Split_b821124768adb688becbc5d63b26adb4_B_3, _Add_508b788633abc0829f0843d1b1f942c2_Out_2);
            float _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2;
            Unity_Multiply_float_float(_Add_508b788633abc0829f0843d1b1f942c2_Out_2, _Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2);
            float _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2;
            Unity_Multiply_float_float(_Clamp_7340c193c2d92c81ba9dd931235ba17f_Out_3, _Property_d4f4330ee4eced8d88fb074732401835_Out_0, _Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2);
            float _Multiply_b907f38702eabd80a6c67777243459de_Out_2;
            Unity_Multiply_float_float(_Multiply_90d91831d95dfc83b55e42e5746bd269_Out_2, _Multiply_d1b58293be2e9982898e4a432bd61149_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2);
            float _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2;
            Unity_Multiply_float_float(_Multiply_ad921fb726e47688a4d134f6fb3c2273_Out_2, _Multiply_b907f38702eabd80a6c67777243459de_Out_2, _Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2);
            UnityTexture2D _Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float _TriplanarNM_9b6d5da081e434808a5840cbd915bb28;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNM_9b6d5da081e434808a5840cbd915bb28.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3;
            float4 _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4;
            SG_TriplanarNM_bc609ed95f52591469ab35dbfe0efcea_float(_Property_a0e97293ba0dfb83a0d87d28ef311bc7_Out_0, (_Divide_ddaec3b56c9fc58ca3314b828c03b1c8_Out_2).x, _Property_bf361924f27f848994241bda91fc2005_Out_0, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XZ_2, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_YZ_3, _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XY_4);
            float _Split_b20618c84cffd183aae7f27c2d0772cb_R_1 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[0];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_G_2 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[1];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_B_3 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[2];
            float _Split_b20618c84cffd183aae7f27c2d0772cb_A_4 = _TriplanarNM_9b6d5da081e434808a5840cbd915bb28_XYZ_1[3];
            float _Property_987a8037965fff81a4930627358fc6e3_Out_0 = _CoverHeightMapMin;
            float _Property_89aeacdce0000086a98e45df79358a56_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_d18b9686bb8af48c85d99d319830c000_Out_0 = float2(_Property_987a8037965fff81a4930627358fc6e3_Out_0, _Property_89aeacdce0000086a98e45df79358a56_Out_0);
            float _Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0 = _CoverHeightMapOffset;
            float2 _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2;
            Unity_Add_float2(_Vector2_d18b9686bb8af48c85d99d319830c000_Out_0, (_Property_856fd4da5f3d1b8c9bdd6966daada2b2_Out_0.xx), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2);
            float _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_B_3, float2 (0, 1), _Add_935266d0fc26dc87a5909ea1bd8aa423_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3);
            float _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2;
            Unity_Multiply_float_float(_Multiply_81bdd2734ef6c68fbc23ffe7409191b9_Out_2, _Remap_f85aa52613b0108d876fab409ea80b8c_Out_3, _Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2);
            float _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2;
            Unity_Multiply_float_float(_Multiply_65b9c8cf3a459284a298aa84443140a2_Out_2, _Split_b4d08e724ec3df88ab7743c5b7a3f081_G_2, _Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2);
            float _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1;
            Unity_Saturate_float(_Multiply_100e6799ca65308ca7cca7a0e52252db_Out_2, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1);
            float _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2;
            Unity_Multiply_float_float(_Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Saturate_a340e45e54317a81ae145a84c72daa75_Out_1, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2);
            float _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3;
            Unity_Branch_float(_Property_6d3f735ebfa9df8f83bb47a73ec17fda_Out_0, _Multiply_d8ca79d07c3bbe85b09000ed0e769324_Out_2, _Clamp_7c0c867aaa1f5b8683768528b130a408_Out_3, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3);
            float4 _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3;
            Unity_Lerp_float4(_HeightBlend4_19d44da719e63c8e96847fec3dcd58b5_OutVector4_1, _Combine_e08fc3fe64b11f8b92d3a5452fa1bc7e_RGBA_4, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxxx), _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3);
            float _Split_2d3577de3d626c8683c82ad2f5337a65_R_1 = IN.VertexColor[0];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_G_2 = IN.VertexColor[1];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_B_3 = IN.VertexColor[2];
            float _Split_2d3577de3d626c8683c82ad2f5337a65_A_4 = IN.VertexColor[3];
            float _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_R_1, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1);
            float _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3;
            Unity_Lerp_float(0, _Split_866a663ed067f988862843fe32765ff8_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3);
            float _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0 = _BaseEmissionMaskIntensivity;
            float _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2;
            Unity_Multiply_float_float(_Lerp_5f90f3a8c0875b8dba6104925781fa20_Out_3, _Property_3b34fa45052d748fb915b1e3fb7e9d8a_Out_0, _Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2);
            float _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1;
            Unity_Absolute_float(_Multiply_12a2eb54cc86eb86a1638a18ab005d46_Out_2, _Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1);
            float _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0 = _BaseEmissionMaskTreshold;
            float _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2;
            Unity_Power_float(_Absolute_290a4d2bb2eea28689f7121b807ef95f_Out_1, _Property_9c300a7423586c8db9e3b4b0d8a663e1_Out_0, _Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2);
            float _Lerp_773fc936303dec838cfd7db23903de62_Out_3;
            Unity_Lerp_float(0, _Split_0b441b86fba0ea80bc060dae9d7ed0d7_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_773fc936303dec838cfd7db23903de62_Out_3);
            float _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0 = _Base2EmissionMaskTreshold;
            float _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2;
            Unity_Multiply_float_float(_Lerp_773fc936303dec838cfd7db23903de62_Out_3, _Property_2c86ce2a565a858f985aa704216b8cb9_Out_0, _Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2);
            float _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1;
            Unity_Absolute_float(_Multiply_19b1a952e6fcbe8b87c4affdd20e986c_Out_2, _Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1);
            float _Property_013b523e19192f8593f2bcc154316b47_Out_0 = _Base2EmissionMaskIntensivity;
            float _Power_e5638390467fac89ae1f7b85fc93815b_Out_2;
            Unity_Power_float(_Absolute_2f0c90aaa5f4878bb156d3133b4f72c8_Out_1, _Property_013b523e19192f8593f2bcc154316b47_Out_0, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2);
            float _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1;
            Unity_OneMinus_float(_Split_2d3577de3d626c8683c82ad2f5337a65_B_3, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1);
            float _Lerp_594e5a2708dbe78894dc533303332962_Out_3;
            Unity_Lerp_float(_Power_8e48bef60ea87e83ba184619ac54a7b8_Out_2, _Power_e5638390467fac89ae1f7b85fc93815b_Out_2, _OneMinus_6c7e02851f4d978eb609e78dce2c1f1a_Out_1, _Lerp_594e5a2708dbe78894dc533303332962_Out_3);
            float _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3;
            Unity_Lerp_float(0, _Split_b20618c84cffd183aae7f27c2d0772cb_A_4, _OneMinus_cbb4fdd4c780ac8daac94d1520a49c56_Out_1, _Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3);
            float _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0 = _CoverEmissionMaskTreshold;
            float _Multiply_688d5e023afdea8f88054040203609ac_Out_2;
            Unity_Multiply_float_float(_Lerp_31e6810538a8b18ba21e2f8be0697d1c_Out_3, _Property_ab3a811e9cd94d8ba5d9c4359fa616b5_Out_0, _Multiply_688d5e023afdea8f88054040203609ac_Out_2);
            float _Absolute_b525073675d39a899115ebede3255a97_Out_1;
            Unity_Absolute_float(_Multiply_688d5e023afdea8f88054040203609ac_Out_2, _Absolute_b525073675d39a899115ebede3255a97_Out_1);
            float _Property_b14b960de7b30882a67b30cf91355226_Out_0 = _CoverEmissionMaskIntensivity;
            float _Power_fd909f27e3507185bcb862a17c2e116e_Out_2;
            Unity_Power_float(_Absolute_b525073675d39a899115ebede3255a97_Out_1, _Property_b14b960de7b30882a67b30cf91355226_Out_0, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2);
            float _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3;
            Unity_Lerp_float(_Lerp_594e5a2708dbe78894dc533303332962_Out_3, _Power_fd909f27e3507185bcb862a17c2e116e_Out_2, _Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3, _Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3);
            float4 _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0 = IsGammaSpace() ? LinearToSRGB(_LavaEmissionColor) : _LavaEmissionColor;
            float4 _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Property_ddc70cd9f8a51285bec87e3a36e8a8c3_Out_0, _Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2);
            float4 _Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0 = IsGammaSpace() ? LinearToSRGB(_RimColor) : _RimColor;
            float _Property_0709d20641a7668b85ded82df467d4f4_Out_0 = _CoverNormalScale;
            float3 _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2;
            Unity_NormalStrength_float((_TriplanarNMn_9715eb52188d2a8c8e850d5b45cafa58_XYZ_1.xyz), _Property_0709d20641a7668b85ded82df467d4f4_Out_0, _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2);
            float3 _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            Unity_Lerp_float3((_HeightBlend4_1276d06b2c028187bc5fb2018f7da110_OutVector4_1.xyz), _NormalStrength_d90a27c667bbb48e9e15ec520c3e2ff3_Out_2, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3);
            float3 _Normalize_5840852513c50882be7896a398055011_Out_1;
            Unity_Normalize_float3(IN.TangentSpaceViewDirection, _Normalize_5840852513c50882be7896a398055011_Out_1);
            float _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2;
            Unity_DotProduct_float3(_Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3, _Normalize_5840852513c50882be7896a398055011_Out_1, _DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2);
            float _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1;
            Unity_Saturate_float(_DotProduct_966558055b7b598fa86eab1d0d6796f0_Out_2, _Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1);
            float _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1;
            Unity_OneMinus_float(_Saturate_c4e5476beb9bf98095702b7be9a00f1a_Out_1, _OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1);
            float _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1;
            Unity_Absolute_float(_OneMinus_6dbdfed5d3bac2888a672122a579e163_Out_1, _Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1);
            float _Power_0f033f56feb0de89a9152324c9659e0a_Out_2;
            Unity_Power_float(_Absolute_eb669922f5466c80a1b7ea3a88320584_Out_1, 10, _Power_0f033f56feb0de89a9152324c9659e0a_Out_2);
            float4 _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2;
            Unity_Multiply_float4_float4(_Property_d018b0ca7c84a98db84dbe29259c44d1_Out_0, (_Power_0f033f56feb0de89a9152324c9659e0a_Out_2.xxxx), _Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2);
            float _Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0 = _RimLightPower;
            float4 _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2;
            Unity_Multiply_float4_float4(_Multiply_aeb0f66f15292a8a9982fed9d4b46c1c_Out_2, (_Property_e945f5cb8d55a88cb8d62dc7c139dedc_Out_0.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2);
            float4 _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2;
            Unity_Multiply_float4_float4((_Lerp_50ddcbc51efdb18bb0b22212b544441f_Out_3.xxxx), _Multiply_d8a64c2d6fa9b985abde4f3a2776e06f_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2);
            float4 _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2;
            Unity_Add_float4(_Multiply_9276911ebedfb887bd2587e8ae0a15ec_Out_2, _Multiply_d28e615eb2b2628088d21d3a421d28c6_Out_2, _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2);
            float4 _Clamp_cb735681159425838b158a92c7e830b0_Out_3;
            Unity_Clamp_float4(_Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, float4(0, 0, 0, 0), _Add_3dd3e5e6370db98db08de7e3cc8c6fa8_Out_2, _Clamp_cb735681159425838b158a92c7e830b0_Out_3);
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_R_1 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[0];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_G_2 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[1];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_B_3 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[2];
            float _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4 = _Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3[3];
            float _Property_57dab79b7e7fc28c99642ba557430a27_Out_0 = _BaseMetallic;
            float _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2;
            Unity_Multiply_float_float(_Split_866a663ed067f988862843fe32765ff8_R_1, _Property_57dab79b7e7fc28c99642ba557430a27_Out_0, _Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2);
            float _Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0 = _BaseAORemapMin;
            float _Property_5a040fb62cd8888895d4f920c4036587_Out_0 = _BaseAORemapMax;
            float2 _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0 = float2(_Property_27a0c97d2207ca89af0ef30bd5d6c062_Out_0, _Property_5a040fb62cd8888895d4f920c4036587_Out_0);
            float _Remap_de2674403349aa85b1136d42692d26f9_Out_3;
            Unity_Remap_float(_Split_866a663ed067f988862843fe32765ff8_G_2, float2 (0, 1), _Vector2_6f9956f2c0302f8382a2f5c741da0609_Out_0, _Remap_de2674403349aa85b1136d42692d26f9_Out_3);
            float3 _Vector3_4c4100faab122d8da757a32364182844_Out_0 = float3(_Multiply_aa5299d5bb4d2080af3ab6b593e1aa2c_Out_2, _Remap_de2674403349aa85b1136d42692d26f9_Out_3, 0);
            float _Property_7cdf7bda907cf087942cd072e635a869_Out_0 = _Base2Metallic;
            float _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2;
            Unity_Multiply_float_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_R_1, _Property_7cdf7bda907cf087942cd072e635a869_Out_0, _Multiply_befa03f2838946858f28ac63a284b0f8_Out_2);
            float _Property_b334f6ce40e54186b9864b004fbe88d2_Out_0 = _Base2AORemapMin;
            float _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0 = _Base2AORemapMax;
            float2 _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0 = float2(_Property_b334f6ce40e54186b9864b004fbe88d2_Out_0, _Property_0ee0b6f693d6ed8c830707e558e38b7b_Out_0);
            float _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3;
            Unity_Remap_float(_Split_0b441b86fba0ea80bc060dae9d7ed0d7_G_2, float2 (0, 1), _Vector2_ec982e7ec425d587a82289de9dcba701_Out_0, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3);
            float3 _Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0 = float3(_Multiply_befa03f2838946858f28ac63a284b0f8_Out_2, _Remap_e36fdc5121ad638e8112d325bff9b6c2_Out_3, 0);
            Bindings_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869;
            float4 _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1;
            SG_HeightBlend4_d15b6fb865d3b6d4ebc1fd476c3ad135_float((float4(_Vector3_4c4100faab122d8da757a32364182844_Out_0, 1.0)), _Remap_ddc02d039a9d5388b8add0d2d673d4ac_Out_3, (float4(_Vector3_d5775a771fd8c48e8c9af11a4af046aa_Out_0, 1.0)), _Multiply_55cb55224306dc818a87a2dbf82d5af0_Out_2, _Property_c0dc9341fd635288a1c2869945617704_Out_0, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869, _HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1);
            float _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0 = _CoverMetallic;
            float _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2;
            Unity_Multiply_float_float(_Split_b20618c84cffd183aae7f27c2d0772cb_R_1, _Property_7cf1f37cb0f052868aefa9c1514a9a20_Out_0, _Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2);
            float _Property_e52744d22eaee787aba665b5a103092d_Out_0 = _CoverAORemapMin;
            float _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0 = _CoverAORemapMax;
            float2 _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0 = float2(_Property_e52744d22eaee787aba665b5a103092d_Out_0, _Property_f5216b23a41a0b888854c3e04c30f9fb_Out_0);
            float _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3;
            Unity_Remap_float(_Split_b20618c84cffd183aae7f27c2d0772cb_G_2, float2 (0, 1), _Vector2_2d4e0b2bd57a668bb5e1d3f75180a968_Out_0, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3);
            float3 _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0 = float3(_Multiply_daff314f0b716c86b0dec03fe9225b8b_Out_2, _Remap_d545ba99e5a8678cbf5b23383fafd8fb_Out_3, 0);
            float3 _Lerp_5d687668f4856180be26ec62834c6113_Out_3;
            Unity_Lerp_float3((_HeightBlend4_29d88f6dcaacfd83b2cd9dbddbf40869_OutVector4_1.xyz), _Vector3_88cb732fef09b78495ad84577275ab8b_Out_0, (_Branch_3a65d9c75b1a6287a6fed46b1a467bf7_Out_3.xxx), _Lerp_5d687668f4856180be26ec62834c6113_Out_3);
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[0];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[1];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_B_3 = _Lerp_5d687668f4856180be26ec62834c6113_Out_3[2];
            float _Split_22fc6cf606e48f8fa771c4e8cab49553_A_4 = 0;
            surface.BaseColor = (_Lerp_7b425abcb4dfd0859d63f71a714fbb7d_Out_3.xyz);
            surface.Emission = (_Clamp_cb735681159425838b158a92c7e830b0_Out_3.xyz);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Split_a7e4bd6e1ce6a78e8e86a8499037a07c_A_4;
            surface.Occlusion = _Split_22fc6cf606e48f8fa771c4e8cab49553_G_2;
            surface.NormalTS = _Lerp_1ef9d67a29ba1b85a5434194628b76ad_Out_3;
            surface.Metallic = _Split_22fc6cf606e48f8fa771c4e8cab49553_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassPathTracing.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
    }
    CustomEditorForRenderPipeline "Rendering.HighDefinition.LitShaderGraphGUI" "UnityEngine.Rendering.HighDefinition.HDRenderPipelineAsset"
    CustomEditor "UnityEditor.ShaderGraph.GenericShaderGraphMaterialGUI"
    FallBack "Hidden/Shader Graph/FallbackError"
}